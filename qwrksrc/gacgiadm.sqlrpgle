      *****************************************************************
      *  (C) Copyright 1998-2004 Credentials Solutions, LLC
      *  All Rights Reserved
      *
      *     * * * *  Credentials Confidential Source * * * * * * *
      *  THIS PROGRAM IS AN UNPUBLISHED WORK FULLY PROTECTED BY THE
      *  UNITED STATES COPYRIGHT LAWS AND IS CONSIDERED A TRADE
      *  SECRET BELONGING TO THE COPYRIGHT HOLDER.
      *
      *\B Standard Backout Instructions:
      *\B   Re-compile prior version of program in PGMCOMPARE/RPG_PREV1
      *****************************************************************
      *
      *  PROGRAM-GACGIADM   is a CGI program to process all of the
      *                     products for the GA Applications
      *
      *  Author      : KMK
      *  Date Written: 06/08/04
      *****************************************************************
      *  Change History:
      * -------- --- --------------------------------------------------
      * 10/14/19 TDR Added support for gartr_getActionText
      *              Added puenvcall copybook
      * 10/09/19 RPR Replace sha_crypt with modsha
      * 09/19/19 TDR Fixed bug in waiting payment screen
      *              Added support for 'CP' & 'PC' express ship type
      *              Removed IBM Track details from table
      * 08/13/19 TDR Added support for 'EC' express ship type
      * 07/22/19 RPR Expand ordtxt_txt from 280 to 500 for new comment size
      *              Replace htxtArea with hTextArea 300a to 500a
      *              removed un referenced subroutines do_mtrept, $GT_Row, $MT_Row,
      *              fill_subd, get_header, get_trailr, pdf_gtrpt, writeGaRouter
      * 07/02/19 TDR Updated jQuery and Bootstrap Versions
      * 06/21/19 SAS Update address in the footer and added Check for secondary products
      * 05/22/19 TDR Added support for UIC & Harvard Diploma changes
      *              Removed SNDDST in favor of MODMAIL
      * 05/06/19 TDR Fixed bug to roll ga_seqnum
      * 05/03/19 TDR Stopped showing certain reports for LPR schools
      * 04/19/19 SAS Start referencing encrypted DOB fix bug with diplomas date crashing page
      * 04/10/19 TDR Don't show Lost/Stolen, Mail Returned & Re-Issue for LPRPERMIT
      * 02/21/19 SAS Update how and where we retreive monthly reports
      * 02/11/19 LEW fixed the tabalph and tabyear CTDATA to have the correct years
      * 01/04/19 LCC increased the length of td_cell5, PCALLTEXT increased from 280a to 500a
      * 08/16/18 TDR Added PDF download emails
      * 04/27/18 SAS Update to use new bootstrap not modal_bs
      * 03/30/18 HAD Search LPRPLATE support for plate# search in GA
      *              Admin
      * 03/22/18 HAD Added update DP order info button
      * 03/09/18 HAD Added support for new Express Ship Type 'EP'
      * 03/02/18 SAS Updating to jquery 3.3.1
      * 02/02/18 SAS Removing hard coding of libraries
      * 01/17/18 HAD Added change to fix a bug DP orders page and to
      *              get active alert messages for Dhaval P
      * 11/17/17 DBP Added alerts modal and call to cgialrt
      * 10/30/17 TDR Added Data range search for DP closed orders
      *              Added Notify User button when adding DP comment
      * 10/10/17 HAD changed lengths of happ_datab
      * 10/05/17 HAD restrict batch permit ordering if no tax exemption
      * 09/26/17 HAD Added Communcation history and order history on DP
      *              open order details screen, cancel order button
      *              on PP items waiting payment
      * 09/25/17 HAD Turned on number of diplomas Column on DP orders page
      *              for all schools
      * 08/25/17 HAD Added Number of Diplomas Column on DP orders page.
      *              Just for PPTEST
      * 08/14/17 HAD Added HTTP headers to all context/title/etc msg files
      *              that are used in this pgm
      * 08/11/17 HAD Removed all email ids from Northfield Print Group
      *              and added nkb1@credentialssolutions.com &
      *              graphics@credentialssolutions.com
      * 08/10/17 HAD Added shipping and Spl Instructions column on DP
      *              order screen for all DP or CE schools
      * 07/24/17 HAD Added shipping and Spl Instructions column on DP
      *              order screen. Live only for PPTEST
      * 07/18/17 HAD Removed KOF from print distribution group and
      *              removed prototypes from the source for the pgms which
      *              already has prototypes copybook
      * 06/12/17 HAD Changed dimensions of 1000 custom boxes to 15 x 12 x 9
      *              in FEDEX Shipping options
      * 06/12/17 HAD Added Update/Set Tracking number button on DP order
      *                    details screen. Live only for PPTEST
      * 05/31/17 HAD Added Place Paid DP Order link on GA Support Menu
      * 05/19/17 HAD Added button to view LPRPLATE1 changes
      * 05/15/17 TDR Set eligibility dates for garouter records
      * 05/15/17 SG  Delivery #18 Goto, MOVEA, Time converted to free
      * 05/05/17 SG  Converted to Free Format and recompiled
      * 04/14/17 DDZ update to use valid_email
      * 04/05/17 JJG start setting TBILL_YYY
      * 03/28/17 HAD Moved total amt field to delivery info table on DP order
      *              detail screen and removed rtr_action check for blanks
      *              in resendAuth subroutine
      * 03/27/17 HAD Added resendAuth subroutine  - reviewed by TDR
      * 03/24/17 HAD Added support for refunding DP orders - Reviewed by TDR
      * 03/20/17 HAD Added resend auth button, comment support in items
      *              waiting payment and amount field on diploma order
      *              details page - reviewed by TDR
      * 02/03/17 MRB Added KEY input to text area edits
      * 01/25/17 MRB Updated clean function for text areas
      * 01/04/17 KMK Added 2017 for report processing
      * 12/07/16 MRB Stopped Parking header going out always
      * 11/10/16 TDR Added support for pickup by name for diplomas
      *              Removed vehicle 2 fields (app_data A-C)
      * 11/07/16 MRB Updated web clean to correctly look at pet fields
      * 10/28/16 MRB Moved link to RSS from the sidebar to the footer
      * 10/05/16 LCC Removed the ability to order a batch of LPR parking permits
      * 09/28/16 TDR Fixing bug where 3rd party user being set incorrectly
      * 09/03/16 JWG Put in changes for popping windows using post based
      *              on pgm being test
      * 08/23/16 JWG changes from 08/03 compiled to production
      * 08/03/16 JWG Added new parsinp procedure and d-specs
      *              Added web prototypes for sanitize and clean of variables
      *              Removed user comments, they are not used
      * 08/02/16 JWG Made msg 3133 a schl overridable msg
      * 06/17/16 MRB Updated internal batch emails to use server_em
      * 04/25/16 MRB Allowed sales to switch between test fices
      * 04/06/16 MRB Added OTC batch sice of 550
      * 04/01/16 TDR Fixed view sample button error
      *              updated duplicate licenses errors to go to LAK
      * 02/25/16 KMK made verification menu for Depaul and depaul super user
      * 01/22/16 DDZ 508 reviewed changes
      *              Rational reformatted some SQL statements
      * 01/05/16 TDR Updated year dropdown
      * 01/04/16 DDZ Fix for linking to test programs
      * 12/22/15 MRB Added PPpaywin function to #PYMNT screen
      * 12/21/15 DDZ Moved Mark as paid from here to MODGAORD
      * 10/28/15 DDZ Removed tbillcycle check for ((CONDR) reissued
      * 09/18/15 MRB Started using new version of the order status function
      *              which removed need for Get_StatPP
      * 09/04/15 MRB Expired permits can now be refunded 3 months after expiration
      * 08/21/15 TDR Stopped allowing PO Box when ordering batch permits
      * 06/22/15 MRB Commented out LPR menu item
      * 06/18/15 TDR fixed issue where phone call logs displaying ((STOP))
      * 06/11/15 TDR Moved dvclientf2 chain into own subroutine (checkauth)
      * 06/11/15 TDR Made fice switching available to IT outside of CLLC
      * 05/29/15 KMK new fields for Diploma for DePaul
      * 04/30/15 DDZ Adding a control copy line in CI-F02 email to print group
      * 04/24/15 TDR Turned Parking Dashboard link live
      * 04/14/15 MRB Updated vehicle edit to remove blanks first
      * 03/30/15 TDR Replaced MBONGES with MRBRSS
      * 03/26/15 MRB Turned off reissue, lost/stolen, mail returned and cancel/refund
      *              buttons when a permit is expired
      *              Removed payment status subroutine and converted order status
      *              subroutine to be a subprocedure
      * 03/24/15 MRB Removed Danielle, added Terrance, Ruslan and Brendan
      * 03/20/15 MRB Updated reissue button to only display when card is charged
      * 01/28/15 SAS added PPMRKT to include internal First Class Mail pricing
      * 01/26/15 KMK correct phone call description for new call format
      * 12/11/14 TDR Superusers now lookup permits over all fices in ficegroup
      * 11/18/14 TDR Changed PDF Reports to call CLs instead of Commands
      * 10/27/14 MRB Added diploma name support
      * 10/24/14 MRB Fixed bug adding a comment to a muni order caused by
      *              the permit view mode created earlier
      * 10/17/14 MRB Added permit view mode for TurboData's desktop application
      * 10/01/14 TDR made web reporting available to James Kerbey
      * 09/25/14 SAS added call to gaord_orderstat and paystat for statuses
      *              added other last name to diploma information
      *              added payment status out to screen for orders
      * 09/16/14 TDR allowing multiple report chart windows to be openedget
      * 08/20/14 TDR made web reporting link available to CRMs
      * 08/20/14 KMK removed duplicate copy of server_em and dataqueues and c2n
      * 07/25/14 MRB Increased lot array size
      * 07/23/14 MRB Stopped padding student id if student id length is
      *              variable
      * 07/08/14 MRB Added 425 permit option for batch orders
      * 05/13/14 MRB Added 35 permit option for batch orders
      * 05/09/14 TDR Removed test fice restriction on multiple vehicles
      * 04/28/14 TDR Changed the length of z-add for BufrTrip
      * 04/22/14 TDR Added link to web chart reporting
      * 04/15/14 MRB Added trim of pet name to prevent a leading space
      * 03/31/14 MRB Updated program to use zcgi copybooks
      * 03/13/14 MRB Removed unused Do_PP_Paid subroutine
      * 03/05/14 MRB Reordered vehicle fields
      * 03/04/14 MRB Turned on FedEx Express Saver option
      * 02/28/14 MRB Added support for multiple vehicles
      * 02/19/14 MRB Updated batch shipping option language
      *              Added user type and kiosk code to place admin order window
      * 02/08/14 KMK Added 2014 letter for reports
      * 02/03/14 MRB Added Overrideable blank menu item for custom order link
      * 02/02/14 MRB Added FedEx Express Saver shipping option
      * 12/17/13 MRB Updated status description of permit issued over the counter
      * 08/30/13 MRB Removed edit vehicle info button for unissued permit
      * 08/28/13 MRB Increased length of cell5 to fix buffer overflow bug
      * 08/20/13 MRB Fixed bug with removing bog products from batch screen
      * 07/29/13 MRB Updated Tom's email
      * 07/25/13 MRB Removed bog products from the batch order screen
      * 06/25/13 MRB Added support for extended temp permit email type
      * 06/14/13 MRB Added clear of mail days field for adding a new resident
      * 05/16/13 MRB Added ability to order 20 permits internally
      * 05/02/13 MRB Fixed bug with license plate, permit and tag searches
      * 05/02/13 JWG Chg scan hstry scrn to read from scan1d logical
      * 04/30/13 MRB Removed Anne and added Steve to batch receipt email
      * 04/17/13 MRB GT menu options no longer school overrideable
      * 02/08/13 MRB Fixed reports for 2013
      * 02/06/13 MRB Fix paid date display bug
      * 01/25/13 JWG Fix LPR permit date/time errors
      *              chg lprscan to use set gt and read pe
      * 01/11/13 JWG Add new what to do for order search
      *              Add new panels for test LPR data display
      * 12/23/12 JJG remove T~FAXTEL# reference
      * 12/14/12 MRB Fixed bug when reissuing a reissue over the counter
      * 12/06/12 MRB Removed apostrophes from delivery attention field
      * 11/07/12 KMK Converted to use new rss monitor structure
      * 11/05/12 JJG Change default ship on OTC orders to ground
      * 10/02/12 MRB Fixed issued with displaying temp permit when marking
      *              multiple items paid
      * 09/11/12 JWG Fix super user capability
      * 09/05/12 MRB Updated hot list to only display last 10 months
      * 08/27/12 MRB Started using temp permit # field to determine if
      *              permit was issued OTC
      *              Updated replacement method to look at if original
      *              permit was issued OTC
      * 08/24/12 MRB Stopped writing router records when there is no
      *              email or cell phone #
      * 08/08/12 MRB Added documentation for sql address error query
      * 07/27/12 MRB Changed IMB_TRACK to IMBTRACK#
      * 07/06/12 MRB Increased length of td cell6 to fix cutoff
      *              updated fedex rate request to set max weight for
      *              fedex envelope to .5 lbs
      * 07/02/12 KMK convert set_java SR to use putenv
      * 06/13/12 MRB Corrected use of hccs_user to admin user
      * 06/01/12 KMK Updated to run rate request on new Fedex program
      * 05/29/12 JJG Changed submitted batch jobs to run under CIAUTO
      *              instead of CLLCBTCH
      * 05/07/12 MRB Updated imb history display
      * 05/03/12 JWG Add Super user fice switching to menu panel
      * 04/13/12 MRB Turned off free shipping for remaining schools
      * 03/26/12 MRB Removed gaby's email, added Kristin
      * 03/19/12 MRB Added export IMB scan type
      * 02/27/12 MRB Started writing out date and user that marked an
      *              item 3rd party receiveable
      * 02/20/12 MRB Started clearing opt in code if email is removed
      * 02/16/12 MRB Updated batch order receipt email
      * 02/13/12 MRB Added minimum weight to fedex rate request
      * 02/02/12 MRB Replaced gafrmstats with formid1 database
      * 01/24/12 MRB Started recording user id and date permit is marked
      *              3rd party receiveable
      * 01/16/12 MRB Added internal batch size of 15 permits
      * 01/04/12 MRB Added trims to vehicle data to avoid buffer overflow
      * 12/22/11 MRB Turned off upload pdf diplomas menu item for CE
      * 12/16/11 MRB Added resent email auto call type to MT, GT and CE
      * 12/02/11 MRB Added menu item for uploading pdf diplomas
      * 10/31/11 MRB Added suffix to DP order detail display
      * 10/12/11 MRB Added column to DP Open Orders list
      * 10/06/11 MRB Updated DP processing to allow for no dp_dat record
      * 09/23/11 MRB Added new usps error extended temp router type
      * 09/09/11 MRB Started setting the del_duns codes when user switches fices
      * 08/26/11 MRB Updated phone call types
      * 08/05/11 MRB Added rose to batch order email notifications
      * 07/26/11 MRB Added delivery notification to communication history
      * 07/22/11 MRB Turned on 3rd party place paid permit order link for
      *              all schools
      * 07/12/11 MRB Fixed bug with customer service access to lake forest
      * 07/05/11 MRB Updated check_fice to always check for live fice
      *              instead of just when the user changes the fice
      * 07/01/11 MRB Turned on Resident Editor for customer service
      * 06/24/11 MRB Turned on PPMRKT fice for sales
      * 06/23/11 MRB Turned on 3rd party paid link for Yuba
      * 06/21/11 MRB Restricted sales users to non-live fices
      * 06/17/11 MRB Added dupe plate check when restoring deleted plates
      * 06/08/11 MRB Restricting sales user to non-live fices - commented out
      *              Added place paid permit order to 3rd party page
      *              Updated Batch Receipt email
      * 05/27/11 MRB Updated display of OTC batch orders
      * 05/13/11 MRB Removed hugo, swapped brian for danielle on
      *              batch order receipts
      * 05/04/11 MRB Updated Batch Order Receipt
      * 04/29/11 MRB Updated File Extraction page
      *              Added paid user to order status screen
      * 04/28/11 MRB Made extract orders link available to any school
      * 04/22/11 MRB Updated PP_ressnm to pass new charge parameter when
      *              Email Mailer button is pressed
      * 04/19/11 MRB Fixed bug with Muni Batch Parking permits
      * 04/06/11 MRB Allowed 3rd party permits to be marked as paid
      *              after being reissued
      * 03/29/11 MRB Updated muni batch order link to open in new window
      *              Turned off oliver, turned on hugo for batch receipts
      * 03/17/11 MRB Turned off vacate button if account has address error
      * 03/16/11 MRB Started setting delivery point code for residents
      * 03/15/11 MRB Turned off comments by order # on resident editor
      * 03/11/11 MRB Stopped program from setting N action code
      *              Updated addresses that require action screen
      * 03/08/11 MRB Fixed bug when more than 20 emails are sent to a user
      * 03/03/11 MRB Updated sha hash calculation for extended temp
      *              permits for increased security
      * 03/01/11 MRB Locking orders that are in-use by robo
      * 02/25/11 MRB Updated batch receipt email subject
      * 02/14/11 KMK Updated so Monthly reports show for 2011
      * 01/12/11 MRB Added button to allow users to edit name info
      * 01/10/11 MRB Updated email type for DP "M" e-mails
      * 12/14/10 MRB Updated parking detail date/time printed to say
      *              date/time issued if permit was not mailed
      * 12/03/10 MRB Started Charging Chaffey for Shipping for OTC orders
      * 11/29/10 MRB Updated IMB Mail history to include new column
      * 11/22/10 MRB Added Change Password link to menu
      * 11/19/10 MRB Turned on IMB Tracking data table for everyone
      * 11/17/10 MRB Set Anne to only get batch e-mails for Lake Forest
      * 11/08/10 MRB Working on IMB Tracking data table
      *          MRB Turned off "Email Mailer" button when there is no
      *              email address (resident maintenance)
      * 11/04/10 MRB Added display ssn button to track showing the ssn
      * 10/20/10 MRB Updated Mark contact initals from MBD to MRB
      * 10/01/10 MRB Added e-mail address to batch receipt e-mails
      * 09/10/10 MRB Added Nick to receive batch order e-mails
      * 09/01/10 MRB Updated to allow schools to extend a temp permit
      *              Switched OTC Batch to say business days instead
      *              of calendar days
      * 08/31/10 JJG Change CUST_SRV to MSUPPORT
      * 08/20/10 MRB Replacing pcall fields with single pcalltext field
      * 08/06/10 MRB Added start and end time to batch receipt e-mails
      * 07/10/10 JJG Added CIBINDDIR
      * 07/08/10 MRB Updated logic for displaying the temp permit
      *              to not display when the permit is handed otc
      * 07/01/10 MRB Completed conversion from Make date and make time ion
      *              to dsptmstamp function
      * 06/29/10 MRB Converting more make dates to use dsptmstamp function
      * 06/28/10 MRB Converted Order a batch of permits to a popup win
      *              to help prevent dup orders
      * 06/21/10 MRB Added End Status Date / Time, updated time format
      *              Converted program to use MODDATES
      * 06/18/10 KMK Removed "A"ddition F spec on DVCALLS Database
      * 06/17/10 MRB Added Courtney to Batch email receipts
      * 06/16/10 MRB Added Tom to Batch email receipts
      * 05/24/10 MRB Removed View Sample link of OTC order page if
      *              there are no products to select
      * 05/19/10 MRB Removed condition to skip Muni account changed by msg
      * 05/07/10 MRB Made PP search options, msg 2134 school overrideable
      *              Also converted items waiting payment SID search to
      *              a message file
      *              Started setting sorder_yyy
      * 04/27/10 JWG Broke out hot sheet link, now is "H", Kevin will update
      *              users already set to see hot sheet
      * 04/23/10 MRB Updated comment to say batch report is created by
      *              pdfcgi2
      *              Switched E-mail Resident Button to a submit job
      * 04/21/10 MRB Started Adding E-mail Resident Button, also
      *              changed confirmPIN java function to confirmEmail
      * 04/19/10 MRB Removed init of grateOtxt and O2txt, they have been
      *              added to gamaster1
      * 04/16/10 KMK converted to email alert data queue program
      * 04/13/10 MRB Added back wrtpanlget value is 's' - search parms
      *              for parking search fields
      *              Changed prnt_pdf routine to take order number
      *              instead of the root order #
      * 04/08/10 MRB Started setting torder_yyy when writing the OTC
      *              control record
      * 03/22/10 MRB Removed Rabies Column from Resident Editor
      * 03/18/10 MRB Turned Comments on Resident Editor LIVE
      * 03/17/10 MRB Added Comments to Resident Editor for MSTEST fice
      * 03/16/10 MRB Added code to display an email was returned for the
      *              Resident Editor
      * 03/16/10 MRB Added the Live Lake Forest fice to use the grateOtxt field
      * 03/08/10 MRB Removed the Rabies fields from the Pet Editor - Munis
      * 03/08/10 MRB Updated the Muni Change E-mail notification - the
      *              resident's pin was not being written to the router rec
      * 03/05/10 MRB Removed Unknown Resident button for Munis - replaced
      *              with always using the Vacate Resident button
      * 03/02/10 MRB Added online rate text for TEST Seattle
      * 03/01/10 MRB Added support for Lake Forest to select radio to charge
      *              the discounted online rate
      * 02/23/10 MRB Converted Vehicle Edit radio button text to msg files
      * 02/10/10 KMK Updated Monthly Parking Reports for 2010
      * 02/09/10 MRB Removed SSN from pass_srch
      *              Updated search by social to search by encryped ssn
      * 02/08/10 MRB Started using encrypted social security number
      * 01/14/10 MRB Started using data0 instead of data1 for Diploma Type
      * 11/30/09 MRB Changed PDF E-mail reports (GT and MT) to submit under
      *              CIBATCH instead of ci auto
      *  9/24/09 MRB prevented resending order receipt for OTC orders
      *  9/23/09 MRB Removed commented out credit card info
      *  9/02/09 JJG Removed Margaret Freeman
      *  7/06/09 MRB Turned off e-mail alert to invalid plates
      *  6/11/09 MRB Updated Do_Paid_RT to search for the root order #
      *              and use that instead of assuming that horder# is root
      *  5/07/09 MRB Switched all calls to EML ALERT to a submitted job
      *              This removes the 2 second delay the user used to see
      * 04/28/09 MRB Added check of fiscal year of PP_Search by last name
      *              so that MS, MT, and GT orders will not search previous
      *              years orders
      * 04/16/09 MRB Added Label ID to FedEx shipping weight lookup
      * 04/02/09 MRB Changed priority order of Resident Editor search fields
      *              The order is, Barcode, User ID, Plate, Addr1, Last Name
      *              Tel #
      * 03/27/09 MRB Added changes to include tqty at the front of
      *              description (tapp_data9) for switch to remove
      *              tqty from tapp_data9
      * 01/06/09 MRB Switched Resident, Veh, and Pet Add and Update buttons
      *              to be submit buttons with a javascript "change" function
      * 12/29/08 MRB Started setting vehicle prefix/suffix in add and upd routines
      * 11/12/08 MRB Switched to lookup vehicles by instance
      * 09/09/08 MRB Switched the logic for displaying the temp permit
      *              button to also check ga_tempdat and ga_tempdys
      * 06/10/08 MRB Switched Muni AV Error list to SQL
      * 05/16/08 MRB Payment screen now works for GT orders
      * 04/18/08 MRB Removed ability to Update a bad address in RES edit
      * 03/25/08 MRB Added gam_res1 to pgm, started conversion of using
      *              instance# to get res file
      * 03/09/08 MRB Let Server AV set #AV_status instead of this pgm
      * 02/05/08 MRB Updated PETs to function the same as ORD3
      * 10/18/07 MRB Updated OTC Rate Calculation - hardcoded to .65 for
      *              early orders and 1.00 for normal orders
      * 10/10/07 MRB Updated Set_Rate to calculate order cost from order rec
      * 05/10/07 JJG Added TGA_PAIDBY field to GAORDER1 and set this pgm to
      *              update it based on origin field
      * 04/16/07 MRB Switched "Do_pp_paid" to "do_paid_rt" for all
      *              Mark as Paid requests, Marks all orders with
      *              same root # as paid
      * 03/26/07 MRB Added View Only access to parking permit requests
      * 03/18/07 MRB Added use of hrecid and trecid to program
      * 03/09/07 MRB Allowed Admin to update drivers license even afteretc.
      *              Vehicle registration sticker was ordered
      * 03/09/07 MRB Switched prnt_pdf to use Root order# for receipts etc.
      * 03/08/07 MRB Added order numbers to resident lookup
      * 02/19/07 MRB Turned Show All Unpaid button on for all schools
      * 08/16/06 MRB When COD is marked PAID for PP elig date is set
      * 08/14/06 MRB Order receipt is sent when COD is marked PAID
      ********************************************************************
      * File specifications
      ********************************************************************
      * PROGRAMS That are submitted to BATCH, whose CMDs require the
      *          QTMHHTTP and QTMHTTP1 Authority.
      * GA_RPTONHC, GA_RP_MT1C, GA_RPTCSHC, GAPP_FREE, GA_RPTRCV
      * GA_RPTRTNC, GA_RPTRFDC
      ********************************************************************
     H option(*NOXREF:*NODEBUGIO:*SRCSTMT)
     H thread(*SERIALIZE)
     H DFTACTGRP(*NO) ACTGRP(*NEW)
     H BNDDIR('CIBINDDIR':'QC2LE')
      *---------------Define Files
     Fdvclientf1uf   e           k disk    usropn
     Fdvclientf2uf   e           k disk    usropn
     Fdvinstitl4uf   e           k disk    usropn
     Fga_3rdpt1 uf a e           k disk    usropn
     Fgam_bus1  uf a e           k disk    usropn
     Fgam_coa1a uf   e           k disk    usropn
     Fgam_pet1  uf a e           k disk    usropn
     Fgam_pet1i uf a e           k disk    usropn rename(ga_petrec:petrec_1i)
     Fgam_res1a uf a e           k disk    usropn prefix(W:1)
     F                                     rename(ga_resrec:resrec_1a)
     Fgam_res1u uf   e           k disk    usropn rename(ga_resrec:resrec_1u)
     Fgam_str1  uf a e           k disk    usropn
     Fgam_veh1  uf a e           k disk    usropn
     Fgam_veh1i uf   e           k disk    usropn rename(ga_vehrec:vehrec_1i)
     Fgaorder1# uf a e           k disk    usropn rename(gaorder:garec_#)
     Fgaorder1T uf   e           k disk    usropn rename(gaorder:garec_t)
     Fgarouter1 o  a e           k disk    usropn
     Fciccstat1 if   e           k disk    usropn
     Fdvabbrev1 if   e           k disk    usropn
     fdvclientl7if   e           k disk    usropn prefix(J:1)
     f                                     rename(client:clientcrm)
     Fdvinstitf1if   e           k disk    usropn
     Fdvinstitl7if   e           k disk    usropn
     f                                     prefix(G:1)
     Fdvcallsf1 if   e           k disk    usropn
     fformid1   if   e           k disk    usropn
     Fga_3rdpt1aif   e           k disk    usropn rename(thirdpty:third_1a)
     Fgadp_dat1 if   e           k disk    usropn
     Fgam_bus1a if   e           k disk    usropn rename(ga_busrec:ga_busA)
     Fgam_pet2i if   e           k disk    usropn rename(ga_petrec:petrec_2i)
     Fgam_res1  if   e           k disk    usropn prefix(W:1)
     Fgam_res1t if   e           k disk    usropn rename(ga_resrec:resrec_1t)
     Fgam_res1n if   e           k disk    usropn rename(ga_resrec:resrec_1n)
     Fgam_res2  if   e           k disk    usropn rename(ga_resrec:resrec_2)
     Fgam_res2a if   e           k disk    usropn rename(ga_resrec:resrec_2a)
     F                                     prefix(W:1)
     Fgam_res2n if   e           k disk    usropn rename(ga_resrec:resrec_2n)
     Fgam_veh1l if   e           k disk    usropn rename(ga_vehrec:vehrec_1l)
     F                                     prefix('D':1)
     Fgam_veh1p if   e           k disk    usropn rename(ga_vehrec:vehrec_1p)
     Fgam_veh1u if   e           k disk    usropn rename(ga_vehrec:vehrec_1u)
     Fgam_veh2i if   e           k disk    usropn rename(ga_vehrec:vehrec_2i)
     Fgam_veh2p if   e           k disk    usropn rename(ga_vehrec:vehrec_2p)
     Fgamaster1 if   e           k disk    usropn
     Fgamodels1 if   e           k disk    usropn
     Fgaoption1 if   e           k disk    usropn
     Fgaorder1  if   e           k disk    usropn
     Fgaorder1A if   e           k disk    usropn rename(gaorder:garec_a)
     Fgaorder1C if   e           k disk    usropn rename(gaorder:garec_c)
     Fgaorder1D if   e           k disk    usropn rename(gaorder:garec_d)
     Fgaorder1H if   e           k disk    usropn rename(gaorder:garec_h)
     Fgaorder1I if   e           k disk    usropn rename(gaorder:garec_i)
     Fgaorder1L8if   e           k disk    usropn rename(gaorder:garec_l8)
     Fgaorder1M if   e           k disk    usropn rename(gaorder:garec_m)
     Fgaorder1N if   e           k disk    usropn rename(gaorder:garec_n)
     Fgaorder1S if   e           k disk    usropn rename(gaorder:garec_s)
     Fgaorder1U if   e           k disk    usropn rename(gaorder:garec_u)
     Fgapp_fmt1 if   e           k disk    usropn
     Fgarouter1bif   e           k disk    usropn rename(garouter:garouter_b)
     Fgarouter1cif   e           k disk    usropn rename(garouter:garouterc)
     F                                     prefix('Z':1)
     Fgatrack2  if   e           k disk    usropn
     Fimbcodes1 if   e           k disk    usropn
     Fimbtrack1jif   e           k disk    usropn
     Flprcite1  if   e           k disk    usropn
     Flprlot1   if   e           k disk    usropn
     Flprplate1 if   e           k disk    usropn
     flprplate1cif   e           k disk    usropn rename(platerec:platerec_c)
     Flprscan1d if   e           k disk    usropn
     fcalltyps1 if   e           k disk    usropn
      *---------------End of Files

       dcl-c HTML_NAME_LEN 20;
       dcl-c HTML_DATA_LEN 100;
       dcl-c MAX_INPUT_DIM 100;
       dcl-c BUFIN_LEN 4096;

       //  Data structures for parsing parameters must be first
      /copy rpgcopy,statusds
      /copy rpgcopy,parsedsbas
      /copy rpgcopy,parseds70
      /copy rpgcopy,cllcpsds
      /copy rpgcopy,dvdtaara
      /copy rpgcopy,imbdescrp
      /copy rpgcopy,messageds
      /copy rpgcopy,parsinp_ds
      /copy rpgcopy,zhskpg_ds
      /copy rpgcopy,$srvrgt_ds
      /copy rpgcopy,$rss_cntds
      /copy rpgcopy,$ga_mstrds
       //   sysval service program definitions
      /copy rpgcopy,$ut_sysvds
      /copy rpgcopy,$SRVRAV_DS
      /copy rpgcopy,$SRVRED_DS
      /copy rpgcopy,$srvrmf_ds
      /copy rpgcopy,$srvrm2_ds
      /copy rpgcopy,$airbil_ds

       // ------------------------------------------------------------------
       //   Prototype definitions for functions
       // ------------------------------------------------------------------
      /copy prototypes,APIGetEnv
      /copy prototypes,APIStdIn
      /copy prototypes,APIStdOut
      /copy prototypes,crmfunc
      /copy prototypes,dvlogerror
      /copy prototypes,setenvvar
      /copy prototypes,dates
      /copy prototypes,error
      /copy prototypes,gaord
      /copy prototypes,gartr
      /copy prototypes,mail
      /copy prototypes,srvred
      /copy prototypes,valid
      /copy prototypes,sha
      /include prototypes,web
      //include prototypes,zcmdexc
      /include prototypes,zsystemcmd

       // Prototype for CGIALRT
       dcl-pr cgialrt extpgm('CGIALRT');
          afice char(6) const;
          adismissDt packed(9) const;
          adissmissTm zoned(6) const;
          aisTest char(1) const;
          amsgArray char(1500) dim(10);
          acount zoned(2:0);
       end-pr;

       // Prototype for MUNI_PGM
       dcl-pr muni_pgm extpgm(#prog_name);
          ms_chrg         char(1)         const;
          ms_fice         char(6)         const;
          ms_prod         char(1)         const;
          ms_mode         char(1)         const;
          ms_pinusr       char(8)         const;
       end-pr;

       // Prototype for VALIDST function to get/validate state code
       dcl-pr validST char(150);
          TheCC           char(3)         value;
          TheState        char(3)         value;
          TheOver         char(1)         value;
          The_FICE        char(6)         value;
       end-pr;

       // Prototype for VALIDZIP function to validate postcode
       dcl-pr validZip char(20);
          ThePostcd       char(11)        value;
          TheCC           char(3)         value;
       end-pr;

       // Prototype for VALIDTEL function to validate telephone numbers
       dcl-pr validTel char(55);
          TheTelno        char(25)        value;
          TheCC           char(3)         value;
          TheCtl          char(1)         value;
       end-pr;

       // Prototype for cvt2num procedure that converts xxx.xxx to numeric
       dcl-pr cvt2num packed(11:3);
          stringval       char(22)        value;
       end-pr;

       // Prototype for dtara_seq# that retrieves a sequence# from Data Area
       dcl-pr dtara_seq# packed(11:0);
          c               char(3)         value;
       end-pr;


       // Prototype for VALIDCC function to get/validate country code
       dcl-pr validCC char(150);
          TheCC           char(3)         value;
          TheOver         char(1)         value;
          The_FICE        char(6)         value;
       end-pr;

       dcl-pr parseAddr char(120);
          TheFICE         char(6)         value;
          TheAddrLn       char(50)        value;
       end-pr;

       dcl-ds parsed_adr len(120);
          returnCD        char(2);
          str_hnum        char(10);
          str_prequ       char(12);
          str_dir         char(2);
          str_name        char(25);
          str_type        char(4);
          str_postd       char(5);
          str_postq       char(5);
          str_apt         char(5);
          addr_50         char(50);
       end-ds;



       dcl-ds ccstateds extname('CICCSTAT1');
          ccs_data        char(150)       pos(1);
       end-ds;

       dcl-ds credUser likeds(credUser_t);

       dcl-ds resrecU_ds extname('GAM_RES1U') end-ds;
       dcl-ds resrec1ads extname('GAM_RES1A')
                         prefix(W:1);
       end-ds;

       dcl-ds instwrk_ds extname('DVINSTITF1')
                         prefix(M:1);
       end-ds;

       dcl-ds sav_resds extname('GAM_RES1U')
                        prefix(X:1);
       end-ds;

       dcl-s lotcnt          packed(3:0)     inz;
       dcl-ds schlLots likerec(lprlotrec) dim(50);

       // ************************************************************
       //   Field defines for DAYSTIL prototype
       dcl-s $from           char(8);
       dcl-s $fwrd           char(8);

       // Prototype for DAYSTIL procedure to get day count difference
       dcl-pr daystil packed(5:0);
          $from           char(8)         value;
          $fwrd           char(8)         value;
       end-pr;

       //   Field defines for DATEPLUS and DATEMINUS prototype
       dcl-s $date           char(8);
       dcl-s $days           packed(5:0);
       dcl-s $value          packed(5:0);
       dcl-s $result         char(8);
       dcl-s $unit           char(1)         inz('D');


       // ---------------------------------------------------------
       //    SCREENS - Generic Screen message construct storage
       //              Specially formatted:
       //                each entry contains 'XXXXXXXXX' in cols 2-10
       //                   which is the panel ID
       //                the first entry containing a new panel ID has
       //                   a '#' in col 1 and blanks in columns 11-17
       //                all other entries contain a ' ' in column 1 and
       //                   columns 11-17 as follows:
       //                columns 11-13 can contain either 'MSG' indicating
       //                   that a message number follows in 14-17
       //                 or 'RTN' indicating that a routine name follows
       //                   in 14-17
       //
       //     by using this structure, we can do a lookup on the array to
       //     find the first entry for a particular panel and can then
       //     scan for the next # to set the end point for the do loop.
       //     there must be an end record in the table following the
       //     last set of panel entries so that the end point for the
       //     last panel can be located.
       // ---------------------------------------------------------
       dcl-ds screends;
          screens         char(26)        DIM(1500) CTDATA;
       end-ds;

       dcl-ds element_ds len(26);
          element_id      char(9)         pos(2);
          element_wd      char(3)         pos(11);
          element_fl      char(4)         pos(14);
          element_vf      char(6)         pos(18);
          element_p1      char(1)         pos(18);
          element_p2      char(1)         pos(19);
          element_p3      char(1)         pos(20);
          element_p4      char(1)         pos(21);
          element_p5      char(1)         pos(22);
          element_mo      char(1)         pos(23);
          element_md      char(13)        pos(14);
       end-ds;

       dcl-ds error_arg len(17);
          err_lit1        char(13)        pos(1) inz(' xxxxxxx  MSG');
          err_num         char(4)         pos(14);
       end-ds;

       //         table of 3 letter month abbrev
       dcl-s month           char(3)         ctdata dim(12) perrcd(12);

       //         table of 4 letter Salutations
       dcl-s salut           char(4)         ctdata dim(5) perrcd(5);

       // +  HTML_GOTO1- HTML Page After Successfu SignOn
       dcl-s Html_goto1      char(80)        DIM(35) CTDATA;

       // +  HTML_GOTO2- HTML Page After Successfu SignOn
       dcl-s Html_goto2      char(80)        DIM(35) CTDATA;

       // +  HTML_HEAD - common page header for hidden variables
       dcl-c size_head       15;
       dcl-s html_head       char(80)        DIM(size_head) CTDATA;

       // +  HTML_HDRS- common page header vars for RS
       dcl-c size_hdrs       15;
       dcl-s Html_hdrs       char(80)        DIM(size_hdrs) CTDATA;

       // +  HTML_SRCH - top portion of page for searching
       dcl-c size_osrh       500;
       dcl-s html_OrdSrch    char(80)        DIM(size_osrh) CTDATA;

       // +  HTML_OTCP - common page header for hidden variables
       dcl-c size_otcp       18;
       dcl-s html_otcp       char(80)        DIM(size_otcp) CTDATA;

       // +  HTML_NUMP - common page header for hidden variables
       dcl-c size_nump       30;
       dcl-s html_nump       char(80)        DIM(size_nump) CTDATA;

       // +  HTML_3rd_E  - HTML for adding/editing a new 3rd Party
       dcl-s html_3rd_E      char(80)        DIM(100) CTDATA;

       // +  HTML_SRCH - top portion of page for searching
       dcl-c size_srchn      50;
       dcl-s html_srchn      char(80)        DIM(size_srchn) CTDATA;

       // +  HTML_SRCH - top portion of page for searching
       dcl-c size_srch       50;
       dcl-s html_srch       char(80)        DIM(size_srch) CTDATA;

       // +  HTML_SRCH2 - top portion of page for searching
       dcl-c size_srch2      100;
       dcl-s html_srch2      char(80)        DIM(size_srch2) CTDATA;

       //    HTML_DELY   Delivery Address Screen - OTC
       dcl-c size_dely       220;
       dcl-s html_dely       char(80)        DIM(size_dely) CTDATA;

       //    HTML_DELY   Delivery Address Screen - OTC Summary
       dcl-s html_delys      char(80)        DIM(size_dely) CTDATA;

       //    HTML_RUSH   Rush Service radio boxes - OTC
       dcl-c size_rush       30;
       dcl-s html_rush       char(80)        DIM(size_rush) CTDATA;

       //    HTML_RUSHS  Rush Service radio boxes - OTC Summary
       dcl-s html_rushs      char(80)        DIM(size_rush) CTDATA;

       //    HTML_SHIP   OTC Shipping Info - OTC
       dcl-c size_ship       50;
       dcl-s html_ship       char(80)        DIM(size_ship) CTDATA;

       //    HTML_SHIPS  Delivery Address Screen - OTC Summary
       dcl-s html_ships      char(80)        DIM(size_ship) CTDATA;

       // +  HTML_DP_1 - Detail Information for Diploma Order - STUDENT
       dcl-c size_dp_1       250;
       dcl-s html_dp_1       char(80)        DIM(size_dp_1) CTDATA;

       // +  HTML_DP_2 - Middle Section Of Actions to Perform - BUTTONS
       dcl-c size_dp_2       250;
       dcl-s html_dp_2       char(80)        DIM(size_dp_2) CTDATA;

       // +  HTML_DP_4 - Detail Information for Diploma Order - DELIVERY
       dcl-c size_dp_4       250;
       dcl-s html_dp_4       char(80)        DIM(size_dp_4) CTDATA;

       // +  HTML_CE_1 - Detail Information for Certification Order - STU
       dcl-c size_ce_1       250;
       dcl-s html_ce_1       char(80)        DIM(size_ce_1) CTDATA;

       // +  HTML_CE_2 - Middle Section Of Actions to Perform - BUTTONS
       dcl-c size_ce_2       250;
       dcl-s html_ce_2       char(80)        DIM(size_ce_2) CTDATA;

       // +  HTML_Ce_4 - Detail Information for Certification Order - DEL
       dcl-c size_ce_4       250;
       dcl-s html_ce_4       char(80)        DIM(size_ce_4) CTDATA;

       // +  HTML_MS   - Detail Information for Municipal Servcies
       dcl-c size_ms         250;
       dcl-s html_ms         char(80)        DIM(size_ms) CTDATA;

       // +  HTML_PP   - Detail Information for Parking Permits
       dcl-c size_pp         250;
       dcl-s html_pp         char(80)        DIM(size_pp) CTDATA;

       // +  HTML_PPP  - Detail Information for Parking Permit Payment
       dcl-c size_ppp        100;
       dcl-s html_ppp        char(80)        DIM(size_ppp) CTDATA;

       // +  HTML_MRTN - Municiple Mail Returned
       dcl-c size_mrtn       100;
       dcl-s html_mrtn       char(80)        DIM(size_mrtn) CTDATA;

       // +  HTML_MSRH - Municiple Search
       dcl-c size_msrh       100;
       dcl-s html_msrh       char(80)        DIM(size_msrh) CTDATA;

       // +  HTML_RESD - Residence Detail Screen
       dcl-c size_resd       300;
       dcl-s html_resd       char(80)        DIM(size_resd) CTDATA;

       // +  HTML_VEHD - Vehicle Detail Screen
       dcl-c size_vehd       300;
       dcl-s html_vehd       char(80)        DIM(size_vehd) CTDATA;

       // +  HTML_PETD - Pet Detail Screen
       dcl-c size_petd       200;
       dcl-s html_petd       char(80)        DIM(size_petd) CTDATA;

       // +  HTML_SND   GA Resend Information for ConfirmID
       dcl-c size_snd        100;
       dcl-s html_snd        char(80)        DIM(size_snd) CTDATA;

       // +  HTML_CMNT  GA Comment Information
       dcl-c size_cmnt       100;
       dcl-s html_cmnt       char(80)        DIM(size_cmnt) CTDATA;

       // +  HTML_STR   GA Comment Information
       dcl-c size_str        100;
       dcl-s html_str        char(80)        DIM(size_str) CTDATA;

       // +  HTML_BUS   GA Business Information
       dcl-c size_bus        100;
       dcl-s html_bus        char(80)        DIM(size_bus) CTDATA;

       // +  HTML_RPTPP Custom Reports for PP Application
       dcl-c size_rppp       100;
       dcl-s html_rppp       char(80)        DIM(size_rppp) CTDATA;

       // +  HTML_DPOH  DP Orders Header
       dcl-c size_dpoh       20;
       dcl-s html_dpoh       char(80)        DIM(size_dpoh) CTDATA;

       //         table of Resend Router Options AR_OPT
       dcl-s ar_opt          char(25)        DIM(11) CTDATA;

       //         table of digits/letters for tracer
       dcl-s tabdig          char(2)         dim(31) CTDATA perrcd(13);
       dcl-s tablet          char(1)         alt(tabdig) dim(31);

       //         table of 4 letter Postal Abbreviations for Street Type
       dcl-s sel_strtyp      char(4)         CTDATA dim(34) perrcd(17);

       //    table of Shipping Options to send to FedEx
       dcl-s shiparyk        char(5)         dim(25) CTDATA perrcd(1);
       dcl-s shipary         char(20)        alt(shiparyk) dim(25);

       dcl-ds *n;
          ship_line       char(50);
          ship_type       char(1)         overlay(ship_line:2);
          ship_pack       char(3)         overlay(ship_line:4);
          ship_len        char(2)         overlay(ship_line:8);
          ship_hght       char(2)         overlay(ship_line:11);
          ship_wdth       char(2)         overlay(ship_line:14);
       end-ds;


       // +  Array of DV,EV,TP Call Types = MANUAL
       dcl-s call_pp_c       char(2)         DIM(50) CTDATA;
       dcl-s call_pp_t       char(68)        DIM(50) alt(call_pp_c);

       dcl-s call_dp_c       char(2)         DIM(50) CTDATA;
       dcl-s call_dp_t       char(68)        DIM(50) alt(call_dp_c);

       dcl-s call_ct_c       char(2)         DIM(50) CTDATA;
       dcl-s call_ct_t       char(68)        DIM(50) alt(call_ct_c);

       dcl-s call_ms_c       char(2)         DIM(50) CTDATA;
       dcl-s call_ms_t       char(68)        DIM(50) alt(call_ms_c);

       dcl-s call_mt_c       char(2)         DIM(50) CTDATA;
       dcl-s call_mt_t       char(68)        DIM(50) alt(call_mt_c);

       dcl-s call_gt_c       char(2)         DIM(50) CTDATA;
       dcl-s call_gt_t       char(68)        DIM(50) alt(call_gt_c);

       dcl-s call_ce_c       char(2)         DIM(50) CTDATA;
       dcl-s call_ce_t       char(68)        DIM(50) alt(call_ce_c);

       // +  Array of DV,EV,TP Call Types = AUTO CALLS
       dcl-s auto_pp_c       char(2)         DIM(50) CTDATA;
       dcl-s auto_pp_t       char(68)        DIM(50) alt(auto_pp_c);

       dcl-s auto_dp_c       char(2)         DIM(50) CTDATA;
       dcl-s auto_dp_t       char(68)        DIM(50) alt(auto_dp_c);

       dcl-s auto_ct_c       char(2)         DIM(50) CTDATA;
       dcl-s auto_ct_t       char(68)        DIM(50) alt(auto_ct_c);

       dcl-s auto_ms_c       char(2)         DIM(50) CTDATA;
       dcl-s auto_ms_t       char(68)        DIM(50) alt(auto_ms_c);

       dcl-s auto_mt_c       char(2)         DIM(50) CTDATA;
       dcl-s auto_mt_t       char(68)        DIM(50) alt(auto_mt_c);

       dcl-s auto_gt_c       char(2)         DIM(50) CTDATA;
       dcl-s auto_gt_t       char(68)        DIM(50) alt(auto_gt_c);

       dcl-s auto_ce_c       char(2)         DIM(50) CTDATA;
       dcl-s auto_ce_t       char(68)        DIM(50) alt(auto_ce_c);

       //   JavaScript Function NEWwin() to display new window
       dcl-s NEWwin          char(100)       ctdata dim(size_newwin);
       dcl-c size_newwin     100;

       //   jQuery Functions for Searching
       dcl-s jqry_funcs      char(100)       ctdata dim(size_jqfunc);
       dcl-c size_jqfunc     50;

       // +  ALERT_MODAL- Alerts Modal for call to cgialrt
       dcl-c size_modal      21;
       dcl-s alert_modal     char(80)        DIM(size_modal) CTDATA;

       // ***********************************************************************
       //       Variables for the CGI interface API for QtmhWrStout.
       // ***********************************************************************
       dcl-s BufOut          char(4096)      INZ;
       dcl-s BufOutln        int(10)         inz;

       // ***********************************************************************
       // ***********************************************************************
       // ***********************************************************************
       //  Define line feed that is required when writing data to std output. ***
       // ***********************************************************************
       dcl-c Linefeed        x'15';
       dcl-c break           '<br>';
       dcl-c eml_break       x'25';

       // ------------------------------------------------------------
       //    Variables for sending e-mails
       // ------------------------------------------------------------

       dcl-s mail_subj       char(60);
       dcl-s mail_msg        char(5000);

       //  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       //  Variables for the GA_TRNSFR called program
       //  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       dcl-s function        char(10);
       dcl-s rc              char(1);

       dcl-ds *n;
          parms_fr        char(150)       pos(1);
          fr_instnc#      zoned(11:0)     pos(1) inz;
          fr_fice         char(6)         pos(12);
          fr_dir          char(2)         pos(18);
          fr_name         char(25)        pos(20);
          fr_hnum         char(10)        pos(45);
          fr_prequ        char(12)        pos(55);
          fr_type         char(4)         pos(67);
          fr_postd        char(5)         pos(71);
          fr_postq        char(5)         pos(76);
          fr_apt          char(5)         pos(81);
          fr_sacct        char(2)         pos(86);
          fr_city         char(25)        pos(88);
          fr_state        char(3)         pos(113);
          fr_pinuser      char(10)        pos(116);
       end-ds;

       dcl-ds *n;
          parms_to        char(150)       pos(1);
          to_instnc#      zoned(11:0)     pos(1) inz;
          to_fice         char(6)         pos(12);
          to_dir          char(2)         pos(18);
          to_name         char(25)        pos(20);
          to_hnum         char(10)        pos(45);
          to_prequ        char(12)        pos(55);
          to_type         char(4)         pos(67);
          to_postd        char(5)         pos(71);
          to_postq        char(5)         pos(76);
          to_apt          char(5)         pos(81);
          to_sacct        char(2)         pos(86);
          to_city         char(25)        pos(88);
          to_state        char(3)         pos(113);
          to_pinuser      char(10)        pos(116);
       end-ds;

       //  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       //  Some local variables used by this program
       //  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       dcl-c #false          '0';
       dcl-c #true           '1';

       dcl-c PROD_NAME       'GACGIADM';
       dcl-c TEST_NAME       'GACGIADMT';
       dcl-c ADM2_PROD       'GACGIADM2';
       dcl-c ADM2_TEST       'GACGIADM2T';
       dcl-c ARCH_NOBU       'ARCH_NOBU';
       dcl-c PDF_PROD        'pdfcgi2';
       dcl-c PDF_TEST        'pdfcgi2t';

       dcl-s maxDpCols       packed(2:0)     inz(10);

       dcl-s #days           packed(5:0)     inz;
       dcl-s #days_diff      packed(5:0)     inz;
       dcl-s #formula        char(1);
       dcl-s #periods        packed(5:0)     inz;
       dcl-s #weeks          packed(5:0)     inz;
       dcl-s #prog_name      char(10)        inz;

       dcl-s $pgm_name       char(10);

       dcl-ds *n;
          @Result         char(55)        pos(1);
          @Reslt_RC       char(2)         pos(1);
          @Reslt_RCM      char(1)         pos(3);
          @Reslt_tel      char(25)        pos(6);
          @Reslt_idp      char(3)         pos(33);
          @Reslt_msk      char(15)        pos(36);
       end-ds;
       //   spare 5 bytes for expansion of etel_mask in 51-55

       dcl-s ad_from         char(8);
       dcl-s ad_to           char(8);

       dcl-s @appl_name      char(10)        inz('GACGIADM');

       dcl-s a1              packed(9:0)     INZ;
       dcl-s abbrev          char(6)         inz;
       dcl-s actions         char(1)         DIM(20);
       dcl-s adm2name        char(10)        inz;
       dcl-s addr_old        char(35);
       dcl-s addr_new        char(35);
       dcl-s alertCount     zoned(2:0)       inz(0);
       dcl-s alertMessage   char(1500);
       dcl-s alertMsgArray  char(1500)       dim(10);
       dcl-s alt_pmt#        char(11);

       dcl-s amt_prod        char(20)        inz;
       dcl-s amt_secp        char(240)       inz;
       dcl-s amt_800         char(20)        inz;
       dcl-s amt_hndl        char(20)        inz;
       dcl-s amt_ship        char(20)        inz;
       dcl-s amt_totl        char(20)        inz;

       dcl-s ar_optkey       char(12)        dim(40);
       dcl-s ar_optdat       char(20)        dim(40);

       dcl-s ar_sbnm         char(37)        inz dim(99);
       dcl-s asize           packed(3:0)     inz;

       dcl-s billcycle       char(3);
       dcl-s blnk9           char(9)         INZ;
       dcl-s blnk10          char(10)        INZ;
       dcl-s blnk26          char(26)        INZ;
       dcl-s button_txt      char(35);
       dcl-s bytesize        packed(5:0)     INZ;
       dcl-s byte2           char(2);
       dcl-s byte3           char(3);
       dcl-s byte4           char(4);
       dcl-s byte5           char(5);
       dcl-s byte6           char(6);
       dcl-s byte7           char(7);
       dcl-s byte7a          char(7);
       dcl-s byte7b          char(7);
       dcl-s byte8           char(8);
       dcl-s byte10          char(10);
       dcl-s byte11          char(11);
       dcl-s byte12          char(12);
       dcl-s byte13          char(13);
       dcl-s byte14          char(14);
       dcl-s byte15          char(15);
       dcl-s byte17          char(17);
       dcl-s byte20          char(20);
       dcl-s byte22          char(22);
       dcl-s byte25          char(25);
       dcl-s byte27          char(27);
       dcl-s byte30          char(30);
       dcl-s byte35          char(35);
       dcl-s byte37          char(37);
       dcl-s byte50          char(50);
       dcl-s byte50a         char(50);
       dcl-s byte52          char(52);
       dcl-s byte70          char(70);
       dcl-s byte72          char(72);
       dcl-s byte80          char(80);
       dcl-s byte100         char(100);
       dcl-s byte160         char(160);
       dcl-s byte300         char(300);
       dcl-s byte400         char(400);
       dcl-s byte500         char(500);
       dcl-s byte700         char(700);
       dcl-s byte900         char(900);
       dcl-s byte1200        char(1200);

       dcl-ds *n;
          call_data       char(70)        pos(1);
          cd_1            char(1)         pos(1);
          cd_3to69        char(67)        pos(3);
          cd_3to70        char(68)        pos(3);
          cd_70           char(1)         pos(70);
       end-ds;

       dcl-s cc_last4        char(10);
       dcl-s checkzip        char(20);
       dcl-s check_stage     char(1);
       dcl-s chk_text        char(8);
       dcl-s chkobjcmd       char(70);
       dcl-s chrg_byte       char(1);
       dcl-s city_state      char(50)        inz;
       dcl-s city_UC         char(25);
       dcl-s cnt_wtro        packed(7:0)     inz;
       dcl-s cnt_wtrn        packed(7:0)     inz;
       dcl-s count_ext       char(5)         inz;
       dcl-s comma_pos       packed(3:0)     inz;
       dcl-s commentInd      char(1)         inz;
       dcl-s comp_msg        char(90);
       dcl-s condition       char(10);
       dcl-s cutoff          packed(9:0)     inz;

       dcl-ds *n;
          cycle_date      zoned(8:0)      pos(1);
          cycle_dt_a      char(8)         pos(1);
          cycle_yyy       char(3)         pos(1);
          cycle_yyyy      char(4)         pos(1);
          cycle_mm        char(2)         pos(5);
          cycle_dd        char(2)         pos(7);
       end-ds;

       dcl-s cycle_time      zoned(6:0)      inz;

       dcl-s command         char(5000);
       dcl-s dash            char(3)         inz;

       dcl-ds del_ds;
          del_addr1       char(50)        pos(1);
          del_addr2       char(50)        pos(51);
          del_addr3       char(50)        pos(101);
          del_addr4       char(50)        pos(151);
          del_addr5       char(50)        pos(201);
          deladdr         char(50)        Pos(1) dim(5);
       end-ds;

       dcl-s disab_eml       char(10);
       dcl-s disab_ena       char(10);

       dcl-ds dsply_date len(10);
          dsply_mm        char(2)         pos(1);
          dsply_s1        char(1)         pos(3);
          dsply_dd        char(2)         pos(4);
          dsply_s2        char(1)         pos(6);
          dsply_yyyy      char(4)         pos(7);
       end-ds;

       dcl-ds dsply_time len(8);
          dsply_hh        char(2)         pos(1);
          dsply_c1        char(1)         pos(3);
          dsply_mi        char(2)         pos(4);
          dsply_c2        char(1)         pos(6);
          dsply_ss        char(2)         pos(7);
       end-ds;

       dcl-ds dsply_time2 len(9);
          dsply_hh2       char(2)         pos(1);
          dsply_c12       char(1)         pos(3);
          dsply_mi2       char(2)         pos(4);
          dsply_zone      char(3)         pos(7);
       end-ds;

       dcl-s dsp_ssn         char(11);
       dcl-s dsp_sid         char(15);
       dcl-s dsply_user      char(10);

       dcl-s emlToaddr char(50) dim(3);
       dcl-s emlCcaddr  char(50) dim(3);
       dcl-s emlBcaddr  char(50) dim(3);
       dcl-s endDate         zoned(8:0);
       dcl-s ei              packed(5:0)     INZ;
       dcl-s errs            char(90)        DIM(40) INZ;

       dcl-ds errline len(94);
          errtext         char(90)        pos(1);
          err_indic       char(1)         pos(1);
          err_msg#        char(4)         pos(2);
          err_vf          char(6)         pos(6);
          errbr           char(4)         pos(91) inz('<br>');
       end-ds;

       //    error array html header and trailer

       dcl-c err_tableh      '<center><table border=0 +
                           cellpadding=4 cellspacing=0 +
                           width=70%> +
                           <tr><td>';

       dcl-c err_header      '<font color=#df0000>+
                           <b>Your input contains the +
                           following error(s):';

       dcl-c err_trailr      '</b></font>';

       dcl-c err_tablet      '</td></tr></table></center>';

       dcl-s errorText       varchar(1000);

       dcl-s exp_date        zoned(8:0)      inz;
       dcl-s expires         char(25);

       dcl-s field_150       char(150);

       dcl-s field_nam4      char(4);

       dcl-s fnLike          char(22);

       dcl-s frstflag        char(1);
       dcl-s frst_cmnt       char(1);
       dcl-s found_pin       char(1);
       dcl-s fov             char(1)         inz;
       dcl-s fov_fice        char(6)         inz;

       dcl-ds gaRouterTextDs likeds(gaRouterTextDs_t);
       dcl-s got_a_rec       char(1);
       dcl-s Get_Retrn       char(4);

       dcl-s happ_datab      char(23);

       dcl-s har_veh         packed(11:0)    inz dim(999);
       dcl-s har_pet         packed(11:0)    inz dim(999);

       dcl-s headerOut       ind             inz(#false);
       dcl-s have_cmt        char(1);
       dcl-s have_del        char(1);
       dcl-s have_newr       char(1)         inz('0');
       dcl-s have_pets       char(1);
       dcl-s have_paid       char(1)         inz('0');
       dcl-s have_res        char(1)         inz('0');
       dcl-s have_res2       char(1)         inz('0');
       dcl-s have_suba       char(1)         inz('0');
       dcl-s have_trak       char(1);
       dcl-s have_unpd       char(1)         inz('0');
       dcl-s have_vehs       char(1);
       dcl-s hday2b          char(2)         inz;
       dcl-s hdo_fulssn      char(1)         INZ;
       dcl-s hex00           char(1)         INZ(x'00');
       dcl-s hficeinst       char(45);
       dcl-s hin_out         char(1)         inz;
       dcl-s hival7          zoned(7:0)      INZ(9999999);
       dcl-s hmonth2b        char(2)         inz;
       dcl-s htmlline        char(120);

       dcl-s hrowcntr        packed(3:0)     inz;
       dcl-s hrush           char(1)         inz('N');
       dcl-s hsha_hash       char(196);
       dcl-s hyear4b         char(4)         inz;

       dcl-ds *n;
          htmlstmt        char(80)        INZ;
          html_1to5       char(5)         overlay(htmlstmt:1);
          html_1to8       char(8)         overlay(htmlstmt:1);
          html_1to10      char(10)        overlay(htmlstmt:1);
          html_7          char(1)         overlay(htmlstmt:7);
          html_9to12      char(4)         overlay(htmlstmt:9);
          html_msgs       char(13)        overlay(htmlstmt:9);
          htm80           char(1)         dim(80) overlay(htmlstmt);
       end-ds;

       dcl-s hchk_pdate      char(1)         inz;
       dcl-s hdateInd        char(1)         inz;
       dcl-s hres2mode       char(1)         inz('N');
       dcl-s hsrchInd        char(1)         inz;
       dcl-s hsrch_value     char(20);
       dcl-s hsrch_paid      char(1);
       dcl-s hsuperuser      char(3);
       dcl-s hviewonly       char(1)         INZ('0');

       dcl-s $$i             packed(3:0)     INZ;
       dcl-s i               packed(5:0)     INZ;
       dcl-s i1              packed(5:0)     INZ;
       dcl-s i2              packed(5:0)     inz;
       dcl-s i3              packed(5:0)     inz;
       dcl-s i4              packed(5:0)     inz;
       dcl-s idx             packed(5:0)     INZ;
       dcl-s idx2            packed(5:0)     INZ;
       dcl-s ix              packed(5:0)     INZ;
       dcl-s id_len20        zoned(2:0)      INZ;
       dcl-s instance#       packed(11:0)    INZ;

       dcl-s ISO_date        date;

       dcl-ds isods len(10);
          isoyyyy         char(4)         pos(1);
          isosep1         char(1)         pos(5) inz('-');
          isomm           char(2)         pos(6);
          isosep2         char(1)         pos(8) inz('-');
          isodd           char(2)         pos(9);
       end-ds;

       dcl-s isTest          char(1)         inz(#false);
       dcl-s javaRC          char(2);
       dcl-s kbillcycle      char(3);
       dcl-s kcardtype       char(4);
       dcl-s kconfid9        char(9);
       dcl-s kpaid_date      packed(9:0)     inz;
       dcl-s kiso_cc         char(2)         inz('US');
       dcl-s krecord_id      char(1);
       dcl-s ksrch_tel#      char(25);
       dcl-s ksys_type       char(2);

       dcl-s hlastdays       char(2);
       dcl-s last_fice       char(6);
       dcl-s len             packed(5:0);
       dcl-s LenFN           packed(5:0)     INZ;
       dcl-s LenLN           packed(5:0)     INZ;
       dcl-s lidx            packed(5:0)     INZ;
       dcl-s lnLike          char(22);
       dcl-s location        char(30);
       dcl-s lock_addr       char(1);
       dcl-ds lprOrdDs qualified dim(2);
          order#          char(9);
       end-ds;

       dcl-s match_code      char(1)         inz;
       dcl-c MAX_BATCH       30;
       dcl-ds messageDs likeds(msgDs_t) inz;
       dcl-s mode            char(1)         inz;
       dcl-s msgtext         char(80);

       dcl-s nbytes          packed(5:0)     INZ;
       dcl-c newln           ':/N';
       dcl-s num_kb          packed(7:0)     inz;
       dcl-s num_vehs        packed(3:0)     inz;
       dcl-s num_pets        packed(3:0)     inz;
       dcl-s num_rows        packed(5:0)     inz;
       dcl-s nxt_suba        char(2);
       dcl-s n20             zoned(2:0);

       dcl-s old_authcd      char(1);
       dcl-s onlydst         char(3);
       dcl-ds order_ds likerec(garec_#) dim(50);
       dcl-ds orderds extname('GAORDER1#') end-ds;
       dcl-s order_by        char(40);

       dcl-ds ordtxt_ds;
          ord_txt      char(525)       pos(1);
          ordtxt_dat      char(8)         pos(1);
          ordtxt_tim      char(6)         pos(9);
          ordtxt_usr      char(10)        pos(15);
          ordtxt_typ      char(1)         pos(25);
          ordtxt_txt      char(500)       pos(26);
       end-ds;

       dcl-s otc_code        char(1)         inz('O');
       dcl-s otc_rate        packed(5:2);
       dcl-s otc_cost        packed(7:2);
       dcl-s otc_ship        packed(7:2);
       dcl-s otc_total       packed(7:2);

       dcl-s overrides       char(70);

       dcl-s overrid1        char(70)        inz('OVRDBF FILE(GAROUTER1) -
       TOFILE(*LIBL/GAROUTER1) -
       SEQONLY(*NO)');

       dcl-s overrid3        char(70)        inz('OVRDBF FILE(GAROUTER1B) -
       TOFILE(*LIBL/GAROUTER1B) -
       SEQONLY(*NO)');

       dcl-s pad_num         packed(3:0)     inz;

       dcl-ds panelentry len(26);
          panel           char(10)        pos(1);
       end-ds;

       dcl-s pk_3p0          packed(3:0)     inz;
       dcl-s pk_5p0          packed(5:0)     inz;
       dcl-s pk_7p0          packed(7:0)     inz;
       dcl-s pk_11p0         packed(11:0)    inz;

       dcl-ds poBox_ds;
          po_addrs        char(140);
          po_addra        char(35)        overlay(po_addrs);
          po_addr1        char(35)        overlay(po_addrs:*next);
          po_addr2        char(35)        overlay(po_addrs:*next);
          po_addr3        char(35)        overlay(po_addrs:*next);
       end-ds;

       dcl-s prod_byte       char(1);

       dcl-ds PWwarning len(51);
          pwxtext1        char(41)        pos(1) inz('<B>Warning--Your Passwo+
                           rd will expire in ');
          $PWday1         char(1)         pos(42);
          pwxtext2        char(9)         pos(43) inz(' days</b>');
       end-ds;

       dcl-ds reportData qualified dim(12);
          mlfile char(10);
          mlname char(10);
          mlnrcd int(10);
       end-ds;

       dcl-ds rateds;
          rate_handl      packed(7:2)     inz;
          rate_total      packed(7:2)     inz;
          rate_800        packed(7:2)     inz;
       end-ds;

       dcl-s res_errors      char(1);
       dcl-s res_type        char(15);

       dcl-c RUSH_FEE        25;

       dcl-ds key_strds;
          skey_name       char(25)        pos(1);
          skey_type       char(4)         pos(26);
          skey_postd      char(5)         pos(30);
       end-ds;

       dcl-s sbmjobcmd       char(180);
       dcl-s sql_stmt        char(500);
       dcl-s ssn_last4       char(4);
       dcl-s subs_exist      char(1)         inz('0');
       dcl-s ky_billusr      char(10);
       dcl-ds sprusr qualified;
          fice1           char(6);
          fice2           char(6);
          shrtname        char(12);
       end-ds;

       dcl-s rfnd_amt        char(10);

       dcl-s row             char(1500);
       dcl-s row_count       packed(5:0)     inz(0);
       dcl-s row_idx         packed(5:0);
       dcl-s row_text        char(50);
       dcl-s rpt_file        char(10);
       dcl-s rpt_last        char(10);
       dcl-s rpt_lib         char(10)        inz('CLLCFILE');
       dcl-s rpt_slct        char(3);
       dcl-s rpt_title       char(35);

       dcl-ds rpt_ds;
          rpt_hdr         char(1)         pos(1);
          rpt_fice        char(6)         pos(2);
          rpt_cent        char(1)         pos(8);
          rpt_mnth        char(2)         pos(9);
          rpt_appl        char(3)         pos(8);
          rpt_Year        char(2)         pos(11);
       end-ds;

       dcl-s rtr_action      char(1);
       dcl-s rtr_data        char(10);

       dcl-s s1              packed(5:0)     inz;
       dcl-s s2              zoned(2:0)      inz;
       dcl-s senior_yy       char(2);

       //  variables for the sha hash
       dcl-s srchByDate      ind             inz(#false);
       dcl-s sha_hash        char(196);
       dcl-s startDate       zoned(8:0);
       dcl-s sha_val         char(512);
       dcl-s sha_salt        char(512);
       dcl-s sha_Bytes       char(28);
       dcl-s sha_value       char(25);
       dcl-s sha_valid       char(1);
       dcl-s sha_ssn         char(512);
       dcl-ds shipOptionDs likerec(ga_parms);
       dcl-ds secProdOptionDs likerec(ga_parms);

       dcl-s show_del        char(1)         inz('0');
       dcl-s show_paid       char(1);
       dcl-s show_stats      char(1)         inz('0');
       dcl-s skip_it         char(1);
       dcl-s skip_sub        char(1);
       dcl-s slct_null       char(1);
       dcl-s slct_type       char(3);

       dcl-ds *n;
          slct_dirs       char(18)        inz('  E W N S NENWSESW');
          ar_slctdir      char(2)         dim(9) overlay(slct_dirs);
       end-ds;

       dcl-s searchLpr       ind             inz(#false);
       dcl-s srch_count      packed(5:0);

       dcl-s stage_last      char(1)         inz(' ');
       dcl-s string65        char(65);
       dcl-s squeze_var      char(25);
       dcl-s sql#rows        int(10:0)   inz;
       dcl-s sqlLastRow      int(10:0)   inz;
       dcl-s sqlStatus       int(10:0)   inz;

       dcl-ds *n;
          slct_line       char(70)        pos(1);
          slct_valu1      char(1)         pos(1);
          slct_name1      char(68)        pos(3);
       end-ds;

       dcl-ds stu_ds;
          stu_addr1       char(40)        pos(1);
          stu_addr2       char(40)        pos(41);
          stu_addr3       char(40)        pos(81);
          stu_addr4       char(40)        pos(121);
          stuaddr         char(40)        Pos(1) dim(4);
       end-ds;

       dcl-ds *n;
          sv_s_sid        char(10);
          sv_s_nam        char(10);
          sv_s_ord        char(9);
          sv_s_dta5       char(10);
          sv_s_dta8       char(35);
          sv_s_tag        char(11);
          sv_s_type       char(3);
          pass_srch       char(250)       pos(1);
       end-ds;

       dcl-ds *n;
          sv_m_tarea      char(3);
          sv_m_tnum       char(7);
          sv_m_nam        char(20);
          sv_m_dta5       char(10);
          sv_m_dta6       char(10);
          sv_m_addr1      char(35);
          sv_m_mtype      char(1);
          pass_muni       char(250)       pos(1);
       end-ds;

       dcl-ds *n;
          sub_codes       char(34)        inz('ABCDEFGHJKLMNPQRSTUVWXYZ-
       0123456789');
          ar_subcod       char(1)         dim(34) overlay(sub_codes);
       end-ds;

       dcl-ds *n;
          td_line         char(55)        pos(1);
          td_frmt         char(5)         pos(1);
          td_data         char(50)        pos(6);
       end-ds;

       dcl-s td_ary          char(55)        dim(20);
       dcl-s td_i            packed(3:0)     inz;
       dcl-s td_i2           packed(3:0)     inz;

       dcl-s td_cell1        char(250);
       dcl-s td_cell2        char(150);
       dcl-s td_cell3        char(150);
       dcl-s td_cell4        char(250);
       dcl-s td_cell4b       char(150);
       dcl-s td_cell5        char(600);
       dcl-s td_cell6        char(250);
       dcl-s td_cell7        char(250);
       dcl-s td_cell8        char(250);
       dcl-s td_cell8b       char(250);
       dcl-s td_cell9        char(250);
       dcl-s td_cell10       char(250);
       dcl-s td_cell11       char(150);
       dcl-s td_cell12       char(150);

       dcl-s testing         char(1)         inz(#false);
       dcl-s testPgm         char(1)         inz;

       dcl-s temp_date       zoned(8:0)      inz;
       dcl-s text_prod       char(160)       inz;
       dcl-s text_secp       char(900)       inz;
       dcl-s text_800        char(160)       inz;
       dcl-s text_ship       char(160)       inz;
       dcl-s text_totl       char(160)       inz;
       dcl-s text_hndl       char(160)       inz;

       dcl-s the_applid      char(2);
       dcl-s the_date        packed(9:0)     inz;
       dcl-s the_dir         char(2);
       dcl-s the_recid       char(2);
       dcl-s the_root        char(9);
       dcl-s the_sectn       char(2);
       dcl-s the_state       char(3);
       dcl-s the_value       char(1);

       dcl-s tmp_class       char(1);

       dcl-ds *n;
          thisy           char(1)         pos(1);
          thism           char(1)         pos(2);
          thisd           char(1)         pos(3);
       end-ds;

       dcl-s tr_cell1        char(100);
       dcl-s ttl_amt         packed(7:2)     inz;
       dcl-s ttl_cnt         packed(7:0)     inz;
       dcl-s ttl_ccs         packed(7:0)     inz;
       dcl-s ttl_cods        packed(7:0)     inz;
       dcl-s trnsfr_new      char(1)         inz('0');
       dcl-s trnsfr_sub      char(1)         inz('0');
       dcl-s upd_addr1       char(1);
       dcl-s upd_tel#        char(1);
       dcl-s use_adrsrh      char(1);
       dcl-s use_lookup      char(1);
       dcl-s use_namsrh      char(1);
       dcl-s use_telsrh      char(1);
       dcl-s use_vehsrh      char(1);
       dcl-s user_id8        char(8);

       dcl-ds vald_addr1 len(12);
          vald_dir1       char(2)         pos(1);
          vald_str1       char(5)         pos(3);
          vald_end1       char(5)         pos(8);
       end-ds;

       dcl-ds vald_addr2 len(12);
          vald_dir2       char(2)         pos(1);
          vald_str2       char(5)         pos(3);
          vald_end2       char(5)         pos(8);
       end-ds;

       dcl-ds whattodo len(75);
          whattodo4       char(4)         pos(1);
          whattodo5       char(5)         pos(1);
          whattodo6       char(6)         pos(1);
          whattodo7       char(7)         pos(1);
       end-ds;

       dcl-s weight          packed(5:1)     inz;
       dcl-s wk_idnum        char(10);
       dcl-s wkfullname      char(100);
       dcl-s work_1000       char(1000);
       dcl-s work_fice       char(6);
       dcl-s work_20         char(20);
       dcl-s work_40         char(40);
       dcl-s work_rate       packed(7:2)     inz;
       dcl-s wrk_action      char(20);
       dcl-s wrk_avsmlv      char(1);
       dcl-s wrk_numpmt      packed(7:0);
       dcl-s wrk_status      char(20);
       dcl-s wrk_usrtyp      char(60);

       dcl-s xdig            char(10)        inz('0123456789');
       dcl-s year            zoned(4:0);
       dcl-s yschname        char(50);
       dcl-s year_beg        packed(5:0)     inz;
       dcl-s year_cur        packed(5:0)     inz;
       dcl-s year_end        packed(5:0)     inz;
       dcl-s zn2             zoned(2:0)      INZ;

       //  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       //  Date and Time Data Structures
       //  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       dcl-ds td14ds;
          td14            zoned(14:0)     pos(1);
          curtime         zoned(6:0)      pos(1);
          td14time        zoned(6:0)      pos(1);
          td14mmdd        zoned(4:0)      pos(7);
          td14date        char(8)         pos(7);
          td14yyyy        zoned(4:0)      pos(11);
          td14m           char(2)         pos(7);
          td14d           char(2)         pos(9);
          td14y           char(1)         pos(14);
          td14md          char(4)         pos(7);
          time6           zoned(6:0)      pos(1);
          atimehh         char(2)         pos(1);
          atimemm         char(2)         pos(3);
          atimess         char(2)         pos(5);
       end-ds;

       dcl-ds date8ds;
          today           zoned(8:0)      pos(1);
          date8           zoned(8:0)      pos(1);
          date8yyyy       zoned(4:0)      pos(1);
          date8mmdd       zoned(4:0)      pos(5);
          date8mm         zoned(2:0)      pos(5);
          date8dd         zoned(2:0)      pos(7);
          adate8          char(8)         pos(1);
          adate8yyyy      char(4)         pos(1);
          adate8mmdd      char(4)         pos(5);
          adate8mm        char(2)         pos(5);
          adate8dd        char(2)         pos(7);
       end-ds;

       dcl-s fmt_time        time;
       dcl-s aFICE           like(RFICE);
       dcl-s aPIN_USER       like(RPIN_USER);
       dcl-s aAVSTAT         like(RAVSTAT);
       dcl-s aERRCODE        like(RERRCODE);
       dcl-s aFRSTNAME       like(RFRSTNAME);
       dcl-s aLASTNAME       like(RLASTNAME);
       dcl-s aADDR1          like(RADDR1);
       dcl-s aTEL#           like(RTEL#);
       dcl-s aLASTACTD       like(RLASTACTD);
       dcl-s cmdlen          packed(15:5);
       dcl-s ItemLen         packed(5:0);
       dcl-s BufrTrip        packed(5:0);
       dcl-s lgprogram       char(10);
       dcl-s lgerrno         char(2);
       dcl-s lguserid        char(10);
       dcl-s lgmessag        char(80);
       dcl-s lgrmtaddr       char(20);
       dcl-s lgemaddr        char(50);
       dcl-s byte1           char(1);
       dcl-s referer         char(50);
       dcl-s numbers         char(10);
       dcl-s qq_i            packed(7:0);
       dcl-s $ERRGOTO        char(6);
       dcl-s ibbyte20        char(20);
       dcl-s Msg_Filewk      char(20);
       dcl-s #call_gtrc      char(1);
       dcl-s #GT_keyord      char(2);
       dcl-s #call_rc        char(1);
       dcl-s #AV_keyord      char(2);
       dcl-s #ED_keyord      char(2);
       dcl-s #MF_keyord      char(2);
       dcl-s NCatLen         int(10);
       dcl-s NForIdx0001     int(10);
       dcl-s NForIdx0002     int(10);
       dcl-s #time6          packed(6:0);
       dcl-s #time6a         char(6);
       dcl-s @r              packed(7:0);
       dcl-s @from           packed(7:0);
       dcl-s @to             packed(7:0);
       dcl-s @loc_of_#       packed(7:0);
       dcl-s #Loc            packed(3:0);
       dcl-s #P              packed(3:0);
       dcl-s #Parm_Code      char(1);
       // Prototype for $pgm_name
       dcl-pr Pgm_$PGM_NAME extpgm($pgm_name) end-pr;
       // Prototype for GA_LPLATE
       dcl-pr ga_lplate extpgm('GA_LPLATE');
          hveh_pliss      char(3);
          hveh_plate      char(10);
          hplate_pfx      char(4);
          hplate_mid      char(10);
          hplate_sfx      char(4);
          tmp_class       char(1);
          hcategry        char(1);
          hvehweight      char(6);
          hfice           char(6);
          hproduct        char(1);
       end-pr;
       // Prototype for GA_TRNSFR
       dcl-pr ga_trnsfr extpgm('GA_TRNSFR');
          function        char(10);
          parms_fr        char(150);
          parms_to        char(150);
          byte10          char(10);
          rc              char(1);
       end-pr;
       // Prototype for GEN_USRPIN
       dcl-pr gen_usrpin extpgm('GEN_USRPIN');
          wfice           char(6);
          byte4           char(4);
          wpin_user       char(8);
          wpin#           char(4);
       end-pr;

       // Prototype for QCMDEXC
       dcl-pr qcmdexc extpgm('QCMDEXC');
          theCommand      char(5000);
          cmdLength       packed(15:5);
       end-pr;

       dcl-s skipMail ind;
       dcl-s skipAlt  ind;
       dcl-s res1uFlag ind;

       dcl-s reportYear  char(2);
       dcl-s rptIndex    int(10);
       dcl-s visableMonth char(2);
       dcl-s visableYear  char(2);
       dcl-s wYear        char(4);
       dcl-s wMonth       char(3);

       dcl-s hTextArea char(500);
       dcl-s commentTextArea char(700);

       // *************************************************************
       //     Start of CGI Program execution section...
       // *************************************************************

       exsr $Mainsr;
       close *all;
       return;

       // **************************************************************
       //    $Mainsr: Start Main processing...
       // **************************************************************
       begsr $Mainsr;
       //   Any errors not accounted for (*PSSR write a panel and end)
       if panel       = '#FATALERR ';
          exsr wrtpanel;
          leavesr;
       endif;
       // ----------

       //   Run the Generic CGI Housekeeping Routine
       exsr zcgihskpg;

       // -------------------------------------------------------
       //   Starting Point for the Main Program
       // -------------------------------------------------------
       //   Start by setting the current sate and time
       td14date = %char(%date():*usa0);
       td14time = %dec(%time():*iso);

       date8yyyy = td14yyyy;
       date8mmdd = td14mmdd;
       cycle_date  = Today;
       cycle_time  = curtime;

       whattodo = Bufin;

       clear ei;
       clear errs;

       //   Check contents of WHATTODO for something to do?
       if whattodo5   = 'XXXXX';
          panel       = '#XXXXXXXX';
          exsr WrtPanel;
     c*                  goto      End
          leavesr;
       endif;

       // -------------------------------------------------------------
       //      Check buffer contents for ORD1 - for Placing an Admin order
       //                                       for gacgiord
       // -------------------------------------------------------------
       if whattodo4   = 'ORD1';
          whattodo = %xlate('*':' ':whattodo);
          h_applid    = %subst(whattodo:5:2);
          hsignonkey  = %subst(whattodo:7:12);
          huserid     = %subst(whattodo:19:10);
          h3pp_user   = %subst(whattodo:29:10);
          husrtype    = %subst(whattodo:39:1);
          hkiosk      = %subst(whattodo:40:1);
          exsr checksign;
          hfice       = cfreefice;

          panel       = '#GOTO1    ';
          exsr WrtPanel;
     c*                  goto      End
          leavesr;
       endif;

       // -------------------------------------------------------------
       //      Check buffer contents for ORD2 - for Logging in as the
       //                                       Resident (to gacgiord2)
       // -------------------------------------------------------------
       if whattodo4   = 'ORD2';
          whattodo = %xlate('*':' ':whattodo);
          user_id8    = %subst(whattodo:5:8);
          hpassword   = %subst(whattodo:13:4);
          hsignonkey  = %subst(whattodo:17:12);
          huserid     = %subst(whattodo:29:10);
          hovr_rate   = %subst(whattodo:39:1);
          hpostdate   = %subst(whattodo:40:10);
          exsr checksign;
          hfice       = cfreefice;

          panel       = '#GOTO2    ';
          exsr WrtPanel;
     c*                  goto      End
          leavesr;
       endif;

       // -------------------------------------------------------------
       //      BATCH - for Placing a Batch order in a new window
       // -------------------------------------------------------------
       if whattodo5   = 'BATCH';
          whattodo = %xlate('*':' ':whattodo);
          hsignonkey  = %subst(whattodo:6:12);
          huserid     = %subst(whattodo:18:10);
          h_applid    = %subst(whattodo:28:2);
          exsr checksign;
          hfice       = cfreefice;

          hscrn_type  = 'MNU';

          if h_applid = 'MS';
             h_action = 'MOC';
          else;
             h_action = 'OTC';
          endif;

       endif;



       //-----------------------------------------------------------
       //   SEARCH  - Act the same way as if someone used the srch panel
       //-----------------------------------------------------------
       if whattodo6 = 'SEARCH';
          whattodo = %xlate('*':' ':whattodo);
          hsignonkey  = %subst(whattodo:7:12);
          huserid     = %subst(whattodo:19:10);
          h_applid    = %subst(whattodo:29:2);
          hsrch_type  = %subst(whattodo:31:3);
          if hsrch_type = 'DT8';
             hsrch_dta8 = %subst(whattodo:34:35);
          else;
             // Add srch types later
          endif;

          exsr checksign;
          hfice = cfreefice;

          hscrn_type = 'PP1';
          h_action = 'SRH';
       endif;

       //------------------------------------------------
       //    Else, this is the input cycle on a screen.
       //    We need to see what type of input screen we are
       //    getting and process it.
       //------------------------------------------------
       //    RUN PARSEINPT to get variables from webpage into program
       exsr ParseInp;

       //Testing for new look of search screen
       if huserid = 'TDRRSS' or huserid = 'P012452DEM';
          //testing = #true;
       endif;

       // ----If ACTION is NOT LOGOFF, make sure HSIGNONKEY is intact.
       // 10/16/2014 MRB added ability for user to be SHA authorized instead
       if hsha_hash <> *blanks;
          exsr Get_Schnam;
          exsr check_sha;
       elseif h_action   <> 'OFF';
          exsr CheckSign;
       endif;
       if condition   <> *blanks;
          panel       = '#LOGONGA ';
          exsr WrtPanel;

     c*                  goto      End
          leavesr;
        endif;


       //  ----Get School Database Info
       exsr Get_Schnam;
       exsr Get_Master;

       // --Fix Permit Number length
       if hsrch_dta8 <> *blanks;
          byte11 = hsrch_dta8;

     c*    pad_dta8      tag
          //if %len(%trim(byte11)) < GPERMIT#LN;
             //byte11      = '0' + %trim(byte11);
     c*                  goto      pad_dta8
          //hsrch_dta8 = byte11;
          //endif;

          dow (%len(%trim(byte11)) < GPERMIT#LN);
              byte11 = '0' + %trim(byte11);
          enddo;

          hsrch_dta8 = byte11;
       endif;

       // --Fix StudentID Number length - pad to schools value
       //   unless the id number is variable length
       if hsrch_sid  <> *blanks and
              isid_fmt <> 'V';
          byte10 = hsrch_sid;
     c*    pad_sid       tag
          //if %len(%trim(byte10)) < id_len20;
             //byte10      = '0' + %trim(byte10);
     c*                  goto      pad_sid
          //hsrch_sid = byte10;
          //endif;

          dow %len(%trim(byte10)) < id_len20;
              byte10 = '0' + %trim(byte10);
          enddo;

          hsrch_sid = byte10;
       endif;

       // --Fix Tag Number length
       if hsrch_tag  <> *blanks;
          byte11 = hsrch_tag;

     c*    pad_tag       tag
          //if %len(%trim(byte11)) < GPET#LN;
             //byte11      = '0' + %trim(byte11);
     c*                  goto      pad_tag
          //endif;

          dow %len(%trim(byte11)) < GPET#LN;
              byte11 = '0' + %trim(byte11);
          enddo;

          hsrch_tag = byte11;
       endif;

       //  ----Perform Screen Processing based upon the type of screen

       select;
             // ---------------------------------------------------------------------
             //     Go to the RSS system menu
             // ---------------------------------------------------------------------
          when h_action = '2RS';
             h_action    = 'MNU';
             clear hscrn_next;
             panel       = '#RSS_MENU';
             exsr WrtPanel;

          when h_action = 'DPR';  // Diploma Specific redirect
             errorText = 'User: ' + %trim(huserid);
             error_sendEmail('TDR':'Diploma/Certificate Redirect':errorText);

             h_action    = 'MNU';
             clear hscrn_next;
             panel       = '#RSS_MENU';
             exsr WrtPanel;

             // ---------------------------------------------------------------------
             //     Update the FICE with the NUFICE
             // ---------------------------------------------------------------------
          when h_action = 'NUF';
             setll hnufice instrec;
             *in90 = not %found;
             if NOT %equal;
                hfice       = '009998';
                exsr get_schnam;
             endif;

             hscrn_next  = 'MNU';
             panel       = '#MENU     ';
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //   Action Codes that can occur on any screen are processed first
             // ------------------------------------------------------------------
             // *   OFF action code (must always be first) - Log off the user
          when h_action = 'OFF';

             exsr PP_LogOff;
             h_action    = *blanks;
             panel       = '#LOGOFF   ';
             hscrn_next  = 'OFF';
             exsr WrtPanel;

             // ---------------------------------------------------------------------
             //     Initial Menu Request immediately after CI_LOGON
             // -------------------------------------------------------------------
          when h_action12 = '$M';

             ei          = ei + 1;
             $PWday1     = h_action3;
             %subst(errs(ei):1:51) = PWwarning;

             h_action    = *blanks;
             panel       = '#MENU     ';
             hscrn_next  = 'MNU';
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     MNU action code - Display the menu of functions
             // ------------------------------------------------------------------
          when h_action = 'MNU';

             h_action    = *blanks;
             panel       = '#MENU     ';
             hscrn_next  = 'MNU';
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     MNU - Processing
             // ------------------------------------------------------------------
          when hscrn_type = 'MNU';

             select;

                   // --Parking Permits - Screen 1
                when h_action = 'PP1';
                   hviewonly   = #false;

                   h_applid    = 'PP';
                   panel       = '#PP_SCR1  ';
                   hscrn_next  = 'PP1';

                   // --Parking Permits - Screen with view access
                when h_action = 'PPV';
                   hviewonly   = #true;

                   h_applid    = 'PP';
                   panel       = '#PP_SCR1  ';
                   hscrn_next  = 'PP1';

                   // --Parking Permits - Hot List
                when h_action = 'PHL';
                   h_applid    = 'PP';
                   hsrch_type  = 'PHL';
                   //                   exsr      $PP_Check
                   exsr $GA_Check;
                   panel       = '#PP_HLIST ';
                   hscrn_next  = 'PHL';

                   // --Parking Permits - COD payment Screen  (Parking Permit Payment)
                when h_action = 'PPP';
                   clear horder#;
                   hviewonly   = #false;

                   h_applid    = 'PP';
                   exsr get_master;
                   panel       = '#PYMNT    ';
                   hscrn_next  = 'PAY';
                   //                   eval      hscrn_next  = 'PPP'

                   // --Parking Permits - Statistical Screen
                when h_action = 'PST';
                   h_applid    = 'PP';
                   panel       = '#PP_STATS ';
                   hscrn_next  = 'PST';

                   // --Parking Permits - Monthly Reports
                when h_action = 'PRP';
                   h_applid    = 'PP';
                   panel       = '#REPORTS  ';
                   hscrn_next  = 'REP';

                   // --Parking Permits - Over the counter order Screen
                when h_action = 'OTC';

                   //restrict batch permit ordering if no tax exemption
                   if itaxexempt = *blanks;
                      panel = '#PP_TAXER ';
                   else;
                      //   init delivery address fields
                      exsr do_initOTC;

                      h_applid    = 'PP';
                      //    Set OTC Batch Orders to DOWN in wrtpanl
                      panel       = '#PP_OTC   ';
                   endif;

                   hscrn_next  = 'OTC';

                   // --Parking Permits - 3rd Party Receivable Maintenance
                when h_action = '3RD';
                   h_applid    = 'PP';
                   panel       = '#PP_3RCV  ';
                   hscrn_next  = '3RD';

                   // --Parking Permits - Extract to-be pulled records
                when h_action = 'EXT';
                   h_applid    = 'PP';
                   panel       = '#PP_EXT   ';
                   hscrn_next  = 'EXT';

                   // --Parking Permits - LPR Scan History Screen
                when h_action = 'LPR';
                   h_applid    = 'PP';
                   panel       = '#LPRSCAN  ';
                   hscrn_next  = 'LPR';

                   // --Diploma Orders - Screen 1
                when h_action = 'DP1';
                   h_applid    = 'DP';
                   hsrch_type  = 'STG';
                   hcntr_dp    = 'O';
                   exsr $GA_Check;
                   exsr get_master;
                   panel       = '#DP_SCR1  ';
                   hscrn_next  = 'DP1';

                   // --Diploma Orders History -
                when h_action = 'DOH';
                   h_applid    = 'DP';
                   hsrch_type  = 'STG';
                   hcntr_dp    = 'C';
                   panel       = '#DP_SCR1  ';
                   hscrn_next  = 'DP1';

                   // --Diploma Order - Monthly Reports
                when h_action = 'DRP';
                   h_applid    = 'DP';
                   panel       = '#REPORTS  ';
                   hscrn_next  = 'REP';

                   // --Certification Orders - Screen 1
                when h_action = 'CE1';
                   h_applid    = 'CE';
                   hsrch_type  = 'STG';
                   hcntr_dp    = 'O';
                   exsr $GA_Check;
                   panel       = '#CE_SCR1  ';
                   hscrn_next  = 'CE1';

                   // --Certification Orders History -
                when h_action = 'CEH';
                   h_applid    = 'CE';
                   hsrch_type  = 'STG';
                   hcntr_dp    = 'C';
                   panel       = '#CE_SCR1  ';
                   hscrn_next  = 'CE1';

                   // --Certification Order - Monthly Reports
                when h_action = 'CRP';
                   h_applid    = 'CE';
                   panel       = '#REPORTS  ';
                   hscrn_next  = 'REP';

                   // --Municipal Services - Street Maintenance
                when h_action = 'MSS';
                   h_applid    = 'MS';
                   panel       = '#MS_STR   ';
                   hscrn_next  = 'MSS';

                   // --Municipal Services - Business Maintenance
                when h_action = 'MSB';
                   h_applid    = 'MS';
                   panel       = '#MS_BUS   ';
                   hscrn_next  = 'MSB';

                   // --Municipal Services - Resident / Vehicle / Pet Maintenance
                when h_action = 'MSR';
                   hres2mode   = 'N';
                   h_applid    = 'MS';
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   // --Municipal Services - Quick Order Screen - Barcode Scanning
                when h_action = 'MSQ';
                   h_applid    = 'MS';
                   exsr init_batch;
                   panel       = '#MS_QUICK ';
                   hscrn_next  = 'MSQ';

                   // --Municipal Services - Change of Address - NCOA Maintanence
                when h_action = 'MSC';
                   h_applid    = 'MS';
                   panel       = '#MS_NCOA  ';
                   hscrn_next  = 'MSC';

                   // --Municipal Services - Search Muni Orders
                when h_action = 'MS1';
                   hviewonly   = #false;

                   h_applid    = 'MS';
                   panel       = '#MS_SCR1  ';
                   hscrn_next  = 'MS1';

                   // --Municipal Services - Screen with view access
                when h_action = 'MSV';
                   hviewonly   = #true;

                   h_applid    = 'MS';
                   panel       = '#MS_SCR1  ';
                   hscrn_next  = 'MS1';

                   // --Municipal Services - COD payment Screen
                when h_action = 'MSP';
                   hviewonly   = #false;

                   h_applid    = 'MS';
                   panel       = '#PYMNT    ';
                   hscrn_next  = 'PAY';

                   // --Municipal Services - Mail Returned Processing
                when h_action = 'MLR';
                   h_applid    = 'MS';
                   panel       = '#MS_RETND ';
                   hscrn_next  = 'MLR';

                   // --Municipal Services - Over the counter order Screen
                when h_action = 'MOC';

                   //   init delivery address fields

                   exsr do_initOTC;

                   h_applid    = 'MS';
                   //    Set OTC Batch Orders to DOWN for outside orders in wrtpanl
                   panel       = '#PP_OTC   ';
                   hscrn_next  = 'OTC';

                   // --Muni Services - Monthly Reports
                when h_action = 'MRP';
                   h_applid    = 'MS';
                   panel       = '#REPORTS  ';
                   hscrn_next  = 'REP';

                when h_action = 'CXL';
                   panel       = '#MENU     ';
                   hscrn_next  = 'MNU';
                   //Dismisses ALL messages
                   exsr updateDismissDt;
                   leavesr;

                other;
                   panel       = '#MENU     ';
                   hscrn_next  = 'MNU';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

       //----------------------------------------------------------------
       //  LPR - Processing for LPR Scan history screen
       //----------------------------------------------------------------
       when hscrn_type = 'LPR';
          hscrn_next = 'LPR';
          select;
          when h_action = 'LPC';
             panel = '#LPRCITE';
          when h_action = 'LPP';
             panel = '#LPRPLATE';
          other;
             panel = '#LPRSCAN';
          endsl;
          clear h_action;

          exsr WrtPanel;

       // ------------------------------------------------------------------
       //     PP1 - Processing for Parking Permits - Screen 1
       // ------------------------------------------------------------------
          when hscrn_type = 'PP1';


          // If the user connected via sha and is not signed in, force view only
          if sha_valid = #true;
             hviewonly = #true;
          endif;

          if hsrch_type = 'DT5' and gmult_vehs = 'Y';
             searchLpr = #true;
          endif;

             select;
                when h_action = 'SRH';
                   if searchLpr;
                      exsr ppCheckLpr;
                   else;
                      exsr $PP_Check;

                   endif;
                   //     If condition = 'not-found' - no mathces found
                   //     If condition = 'unique   ' - found 1 unique match
                   //     If condition = 'multiple ' - found multple records
                   if condition   = 'not-found';
                      panel       = '#PP_SCR1  ';
                      hscrn_next  = 'PP1';
                   elseif condition   = 'unique   ';
                      exsr get_order;
                      if (condition = 'not-found');
                         panel       = '#PP_SCR1  ';
                         hscrn_next  = 'PP1';
                      else;
                         panel       = '#PP_SCR2  ';
                         hscrn_next  = 'PP2';
                      endif;
                   elseif condition   = 'multiple ';
                      panel       = '#PP_SCR1  ';
                      hscrn_next  = 'PP1';
                   endif;

                when h_action = 'DTL';
                   exsr get_order;
                   panel       = '#PP_SCR2  ';
                   hscrn_next  = 'PP2';

                when h_action = 'RES';
                   exsr get_resU;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';
                other;
                   panel       = '#PP_SCR1  ';
                   hscrn_next  = 'PP1';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     PP2 - Processing for Parking Permits - Screen 2
             // ------------------------------------------------------------------
       WHEN hscrn_type = 'PP2';

       if hsrch_type = 'DT5' and gmult_vehs = 'Y';
             searchLpr = #true;
       endif;

       select;
       WHEN h_action = 'BCK';

          if searchLpr;
             exsr ppCheckLpr;
          else;
             exsr $PP_Check;
          endif;

          condition   = 'multiple ';
          panel       = '#PP_SCR1  ';
          hscrn_next  = 'PP1';
       WHEN h_action = 'MRT';
          exsr do_pp_mrt;
          exsr get_order;
          panel       = '#PP_SCR2  ';
          hscrn_next  = 'PP2';
       WHEN h_action = 'PAI';
          exsr Do_Paid_RT;
          exsr get_order;
          panel       = '#PP_SCR2  ';
          hscrn_next  = 'PP2';
       WHEN h_action = '3PA';
          exsr do_pp_3pty;
          exsr get_order;
          panel       = '#PP_SCR2  ';
          hscrn_next  = 'PP2';
       WHEN h_action = 'ACT';
          exsr do_pp_actv;
          exsr get_order;
          panel       = '#PP_SCR2  ';
          hscrn_next  = 'PP2';
       WHEN h_action = 'SND';
          exsr get_order;
          panel       = '#RESEND   ';
          hscrn_next  = 'SND';
       other;
          exsr get_order;
          panel       = '#PP_SCR2  ';
          hscrn_next  = 'PP2';
       endsl;

       h_action    = *blanks;
       exsr WrtPanel;

       // ------------------------------------------------------------------
       //     PAY - Processing for Payment - Parking and Meetings
       //                                    and golf
       // ------------------------------------------------------------------
       //                   WHEN      hscrn_type  = h_applid + 'P'
          when hscrn_type  = 'PAY';

             select;
                when h_action = 'SRH';
                   exsr $PP_Check;
                   //     If condition = 'not-found' - no mathces found
                   //     If condition = 'unique   ' - found 1 unique match
                   //     If condition = 'multiple ' - found multple records - NEVER
                   if condition   = 'not-found';
                      panel       = '#PYMNT    ';
                      //                   eval      hscrn_next  = h_applid + 'P'
                      hscrn_next  = 'PAY';
                   elseif condition   = 'unique   ';
                      exsr Get_Order;
                      panel       = '#PYMNT    ';
                      //                   eval      hscrn_next  = h_applid + 'P'
                      hscrn_next  = 'PAY';
                   elseif condition   = 'multiple ';
                      panel       = '#PYMNT    ';
                      //                   eval      hscrn_next  = h_applid + 'P'
                      hscrn_next  = 'PAY';
                   endif;

                   //   Show Detail of Item clicked
                when h_action = 'DTL';
                   exsr get_order;
                   //                   exsr      Move_PP
                   condition   = 'unique   ';
                   panel       = '#PYMNT    ';
                   //                   eval      hscrn_next  = h_applid + 'P'
                   hscrn_next  = 'PAY';

                   //   Show PAID List
                when h_action = 'PAL';
                   show_paid   = #TRUE;
                   panel       = '#PYMNT    ';
                   //                   eval      hscrn_next  = h_applid + 'P'
                   hscrn_next  = 'PAY';
                   hpaid_date  = '  ' + hyear4 + hmonth2 +
                                     hdays2;

       WHEN h_action = 'PAI';
         exsr Do_Paid_RT;
         exsr get_order;
         condition   = 'unique';
         panel       = '#PYMNT    ';
         hscrn_next  = 'PAY';
         //                  eval      hscrn_next  = h_applid + 'P'

       //  Mark as 3rd party payment
       WHEN h_action = '3PA';
         exsr do_pp_3pty;
         exsr get_order;
         condition   = 'unique   ';
         panel       = '#PYMNT    ';
         hscrn_next  = 'PAY';

                other;
                   exsr get_order;
                   //                   exsr      Move_PP
                   condition   = 'unique   ';
                   panel       = '#PYMNT    ';
                   hscrn_next  = 'PAY';
                   //                   eval      hscrn_next  = h_applid + 'P'
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     PST - Processing for Parking Permits - Statistics
             // ------------------------------------------------------------------
          when hscrn_type = 'PST';

             select;
                when h_action = 'VEW';
                   show_stats  = #TRUE;
                   panel       = '#PP_STATS ';

                other;
                   panel       = '#PP_STATS ';
             endsl;

             hscrn_next  = 'PST';
             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     OTC - Processing for Parking Permits - Over the Counter
             // ------------------------------------------------------------------
          when hscrn_type = 'OTC';

             select;
                when h_action = 'RFR';
                   //   Refresh the page

                   hscrn_next  = 'OTC';
                   panel       = '#PP_OTC   ';
                other;

                   //    Process OTC input screen

                   exsr PP_OTC;

       if hship <> 'U';
          exsr scan_POBox;
       endif;

                   if condition   = *blanks;
                      //    Move to Summary page

                      hscrn_next  = 'OCS';
                      panel       = '#PP_OTCS  ';

                   else;

                      exsr shift_err;

                      hscrn_next  = 'OTC';
                      panel       = '#PP_OTC   ';
                   endif;
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     OCS - Parking Permits - Over the Counter Summary
             // ------------------------------------------------------------------
          when hscrn_type = 'OCS';

             if h_action    = 'SBM';

                //    Write control record to order file (for billing)

                exsr Do_OTCctrl;

                //    Send e-mails notifying Mark and Terry and the requestor

                exsr snd_email;

                //    Write out confirmation msg to user

                ei += 1;
                %subst(errs(ei):1:8) = '#2585NTO';

                //    Submit job to gapp_free to print the permits

                command     = 'SBMJOB CMD(call GAPP_FREE ' +
                                  'PARM(''' + hfice + ''' ''' +
                                  horder#  + ''' ''' +
                                  h_applid + ''' ''' +
                                  hrecid   + ''' ''' +
                                  hproduct + ''' ''' +
                                  %trim(hnumpmits) + ''' ''' +
                                  husrtype + ''' ''' +
                                  hrush + ''' ''' +
                                  %trim(huserid) + ''' ''' +
                                  hdel_attn + ''')) ' +
                                  'JOBQ(JQSINGLE_1) ' +
                                  'INLLIBL(*JOBD) ' +
                                  'JOBPTY(8) USER(PPOPER)';
                cmdlen      = %len(%trimr(command));

                qcmdexc(command : cmdlen);


                hscrn_next  = 'CLS';
                panel       = '#PP_OTCCLS';
             else;

                hscrn_next  = 'OTC';
                panel       = '#PP_OTC   ';
             endif;
             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     3RD - Processing for 3rd Party Receivable Maintenance
             // ------------------------------------------------------------------
          when hscrn_type = '3RD';

             select;
                when h_action = 'EDT';
                   panel       = '#PP_3RCV2 ';
                   hscrn_next  = '3RD';

                when h_action = 'UPD';
                   exsr pp_3rd_upd;
                   if condition  <> *blanks;
                      exsr shift_err;
                      panel       = '#PP_3RCV2 ';
                      hscrn_next  = '3RD';
                   else;
                      panel       = '#PP_3RCV  ';
                      hscrn_next  = '3RD';
                   endif;

                when h_action = 'DEL';
                   exsr pp_3rd_del;
                   if condition  <> *blanks;
                      exsr shift_err;
                   endif;

                   panel       = '#PP_3RCV  ';
                   hscrn_next  = '3RD';

                other;
                   panel       = '#PP_3RCV  ';
                   hscrn_next  = '3RD';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     EXT - Processing for File Extract Panel
             // ------------------------------------------------------------------
          when hscrn_type = 'EXT';

             select;
                when h_action = 'EXT';

                   //    Process an extraction

                   $pgm_name   = 'GA_' + hfice + 'C';

                   Pgm_$PGM_NAME();

                   if condition  <> *blanks;
                      exsr shift_err;
                   endif;
                   panel       = '#PP_EXT   ';
                   hscrn_next  = 'EXT';

                other;
                   panel       = '#PP_EXT   ';
                   hscrn_next  = 'EXT';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     PHL - Processing for Parking Permit Hot List
             // ------------------------------------------------------------------
          when hscrn_type = 'PHL';

             select;
                when h_action = 'DTL';
                   exsr get_order;
                   panel       = '#PP_SCR2  ';
                   hscrn_next  = 'PP2';

                other;
                   panel       = '#PP_HLIST ';
                   hscrn_next  = 'PHL';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     DP1 - Processing for Diploma Orders - Screen 1
             // ------------------------------------------------------------------
          when hscrn_type = 'DP1';

             select;
                when h_action = 'ALL';
                   hsrch_type  = 'STG';
                   exsr $GA_Check;
                   //     If condition = 'not-found' - no mathces found
                   //     If condition = 'unique   ' - found 1 unique match
                   //     If condition = 'multiple ' - found multple records
                   if condition   = 'not-found';
                      panel       = '#DP_SCR1  ';
                      hscrn_next  = 'DP1';
                   elseif condition   = 'unique   ';
                      panel       = '#DP_SCR2  ';
                      hscrn_next  = 'DP2';
                   elseif condition   = 'multiple ';
                      panel       = '#DP_SCR1  ';
                      hscrn_next  = 'DP1';
                   endif;

                when h_action = 'SRH';
                   hsrchInd = 'N';
                   exsr $PP_Check;
                   //     If condition = 'not-found' - no mathces found
                   //     If condition = 'unique   ' - found 1 unique match
                   //     If condition = 'multiple ' - found multple records
                   if condition   = 'not-found';
                      panel       = '#DP_SCR1  ';
                      hscrn_next  = 'DP1';
                   elseif condition   = 'unique   ';
                      exsr Move_PP;
                      panel       = '#DP_SCR2  ';
                      hscrn_next  = 'DP2';
                   elseif condition   = 'multiple ';
                      panel       = '#DP_SCR1  ';
                      hscrn_next  = 'DP1';
                   endif;

                when h_action = 'SRD';
                   hsrchInd = 'D';
                   srchByDate = #true;
                   panel       = '#DP_SCR1  ';
                   hscrn_next  = 'DP1';

                when h_action = 'DTL';
                   exsr get_order;
                   panel       = '#DP_SCR2  ';
                   hscrn_next  = 'DP2';

                when h_action = 'FIN';
                   exsr get_order;
                   chain horder# garec_#;
                   if %found(gaorder1#);
                      exsr next_stage;
                      update garec_#;
                   endif;
                   if hcntr_dp    = 'O';
                      hsrch_type  = 'STG';
                      exsr $GA_Check;
                   endif;
                   panel       = '#DP_SCR1  ';
                   hscrn_next  = 'DP1';

                   //   Switched View - Open / Closed

                other;
                   h_applid    = 'DP';
                   if hcntr_dp    = 'O';
                      hsrch_type  = 'STG';
                      exsr $GA_Check;
                   endif;
                   panel       = '#DP_SCR1  ';
                   hscrn_next  = 'DP1';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     DP2 - Processing for Diploma Orders - Screen 2
             // ------------------------------------------------------------------
          when hscrn_type = 'DP2';

             select;
             when h_action = 'BCK';
                if hcntr_dp    = 'O';
                   hsrch_type  = 'STG';
                   exsr $GA_Check;
                endif;
                panel       = '#DP_SCR1  ';
                hscrn_next  = 'DP1';

             when h_action = 'UPD';
                exsr pp_dp_upd;
                hsrch_type  = 'STG';
                exsr $GA_Check;
                panel       = '#DP_SCR1  ';
                hscrn_next  = 'DP1';

             when h_action = 'CXL';
                exsr pp_dp_cxl;
                hsrch_type  = 'STG';
                exsr $GA_Check;
                panel       = '#DP_SCR1  ';
                hscrn_next  = 'DP1';

             when h_action = 'RAU';

                exsr resendAuth;
                hsrch_type = 'STG';
                exsr $GA_Check;
                panel = '#DP_SCR1  ';
                hscrn_next = 'DP1';

             other;
                panel       = '#DP_SCR2  ';
                hscrn_next  = 'DP2';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     CE1 - Processing for Certification Orders - Screen 1
             // ------------------------------------------------------------------
          when hscrn_type = 'CE1';

             select;
                when h_action = 'ALL';
                   hsrch_type  = 'STG';
                   exsr $GA_Check;
                   //     If condition = 'not-found' - no mathces found
                   //     If condition = 'unique   ' - found 1 unique match
                   //     If condition = 'multiple ' - found multple records
                   if condition   = 'not-found';
                      panel       = '#CE_SCR1  ';
                      hscrn_next  = 'CE1';
                   elseif condition   = 'unique   ';
                      panel       = '#CE_SCR2  ';
                      hscrn_next  = 'CE2';
                   elseif condition   = 'multiple ';
                      panel       = '#CE_SCR1  ';
                      hscrn_next  = 'CE1';
                   endif;

                when h_action = 'SRH';
                   exsr $GA_Check;
                   //     If condition = 'not-found' - no mathces found
                   //     If condition = 'unique   ' - found 1 unique match
                   //     If condition = 'multiple ' - found multple records
                   if condition   = 'not-found';
                      panel       = '#CE_SCR1  ';
                      hscrn_next  = 'CE1';
                   elseif condition   = 'unique   ';
                      exsr Move_PP;
                      panel       = '#CE_SCR2  ';
                      hscrn_next  = 'CE2';
                   elseif condition   = 'multiple ';
                      panel       = '#CE_SCR1  ';
                      hscrn_next  = 'CE1';
                   endif;

                when h_action = 'DTL';
                   exsr get_order;
                   panel       = '#CE_SCR2  ';
                   hscrn_next  = 'CE2';

                   //   Switched View - Open / Closed

                other;
                   h_applid    = 'CE';
                   if hcntr_dp    = 'O';
                      hsrch_type  = 'STG';
                      exsr $GA_Check;
                   endif;
                   panel       = '#CE_SCR1  ';
                   hscrn_next  = 'CE1';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     CE2 - Processing for Certification Orders - Screen 2
             // ------------------------------------------------------------------
          when hscrn_type = 'CE2';

             select;
                when h_action = 'BCK';
                   if hcntr_dp    = 'O';
                      hsrch_type  = 'STG';
                      exsr $GA_Check;
                   elseif hcntr_dp    = 'C';
                      exsr $GA_Check;
                      condition   = 'multiple ';
                   endif;
                   panel       = '#CE_SCR1  ';
                   hscrn_next  = 'CE1';

                when h_action = 'UPD';
                   exsr pp_ce_upd;
                   hsrch_type  = 'STG';
                   exsr $GA_Check;
                   panel       = '#CE_SCR1  ';
                   hscrn_next  = 'CE1';

                when h_action = 'CXL';
                   exsr pp_ce_cxl;
                   hsrch_type  = 'STG';
                   exsr $GA_Check;
                   panel       = '#CE_SCR1  ';
                   hscrn_next  = 'CE1';

                when h_action = 'RMP';
                   exsr pp_ce_rmvp;
                   hsrch_type  = 'STG';
                   exsr $GA_Check;
                   panel       = '#CE_SCR1  ';
                   hscrn_next  = 'CE1';

                other;
                   panel       = '#CE_SCR2  ';
                   hscrn_next  = 'CE2';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     SND panel processing
             // ---------------------------------------------------------------------
          when hscrn_type = 'SND';

             select;
                when h_action = 'BCK';
                   exsr get_order;
                   panel       = '#PP_SCR2  ';
                   hscrn_next  = 'PP2';
                   h_action    = *blanks;
                   exsr WrtPanel;

                other;
                   //    Verify E-mail Address is in Valid Format
                   clear byte2;

                   if not valid_email(hemail:statusDs);
                      ei += 1;
                      %subst(errs(ei):1:5) = '#2795';
                      %subst(condition:1:8) = 'parm-bad';

                      exsr get_order;
                      panel       = '#RESEND   ';
                      hscrn_next  = 'SND';

                   elseif hsend_type  = *blanks;
                      ei += 1;
                      %subst(errs(ei):1:5) = '#2796';
                      %subst(condition:1:8) = 'parm-bad';

                      exsr get_order;
                      panel       = '#RESEND   ';
                      hscrn_next  = 'SND';
                   else;

                      // --Create new router

                      exsr pp_snd_ga;
                      ei          = ei + 1;
                      errs(ei)    = %trim(comp_msg);

                      exsr get_order;
                      panel       = '#PP_SCR2  ';
                      hscrn_next  = 'PP2';
                   endif;

                   h_action    = *blanks;
                   exsr WrtPanel;

             endsl;

             // ------------------------------------------------------------------
             //     MSS - Processing for Street Maint
             // ------------------------------------------------------------------
          when hscrn_type = 'MSS';

             select;
                when h_action = 'EDT';
                   if h_key      <> *blanks;
                      if not %open(gam_str1);
                         open gam_str1;
                      endif;

                      //    Use the Key value to chain to the record then update

                      key_strds = h_key;
                      chain (hfice : skey_name : skey_type)
                             ga_strrec;

                      hstr_name   = sstr_name;
                      hstr_type   = sstr_type;
                      hstr_postd  = sstr_postd;
                      vald_addr1 = svaldaddr1;
                      hvald_dir1  = vald_dir1;
                      hvald_str1  = vald_str1;
                      hvald_end1  = vald_end1;
                      vald_addr2 = svaldaddr2;
                      hvald_dir2  = vald_dir2;
                      hvald_str2  = vald_str2;
                      hvald_end2  = vald_end2;
                   endif;

                   panel       = '#MS_STEDT ';
                   hscrn_next  = 'MSS';
                when h_action = 'UPD';
                   exsr do_ms_str;
                   if condition   = *blanks;
                      panel       = '#MS_STR   ';
                      hscrn_next  = 'MSS';
                   else;
                      exsr shift_err;
                      panel       = '#MS_STR   ';
                      hscrn_next  = 'MSS';
                   endif;
                when h_action = 'DEL';
                   exsr do_msstdel;
                   if condition  <> *blanks;
                      exsr shift_err;
                   endif;
                   panel       = '#MS_STR   ';
                   hscrn_next  = 'MSS';
                other;
                   panel       = '#MS_STR   ';
                   hscrn_next  = 'MSS';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     MSB - Processing for Business Maintenance
             // ------------------------------------------------------------------
          when hscrn_type = 'MSB';

             select;
                when h_action = 'ADD';
                   exsr pp_busadd;
                   if condition   = *blanks;
                      panel       = '#MS_BUS   ';
                      hscrn_next  = 'MSB';
                   else;
                      exsr shift_err;
                      panel       = '#MS_BSEDT ';
                      hscrn_next  = 'MSB';
                   endif;
                when h_action = 'DEL';
                   hidcode     = cvt2num(h_key);
                   exsr pp_busdel;
                   if condition  <> *blanks;
                      exsr shift_err;
                   endif;
                   panel       = '#MS_BUS   ';
                   hscrn_next  = 'MSB';
                when h_action = 'EDT';

                   if h_key      <> *blanks;
                      hidcode     = cvt2num(h_key);
                      exsr get_bus1;
                   endif;

                   panel       = '#MS_BSEDT ';
                   hscrn_next  = 'MSB';
                when h_action = 'LSD';
                   //   List deleted records

                   match_code  = 'D';
                   show_del    = #true;
                   panel       = '#MS_BUS   ';
                   hscrn_next  = 'MSB';
                when h_action = 'PDL';
                   //   Permanently Delete Record

                   hidcode     = cvt2num(h_key);
                   exsr pp_buspdel;
                   match_code  = 'D';
                   show_del    = #true;
                   panel       = '#MS_BUS   ';
                   hscrn_next  = 'MSB';
                when h_action = 'RSP';
                   //   Reset users Pin

                   hidcode     = cvt2num(h_key);
                   exsr pp_buspin;
                   panel       = '#MS_BSEDT ';
                   hscrn_next  = 'MSB';
                when h_action = 'UPD';
                   hidcode     = cvt2num(h_key);
                   exsr pp_busupd;
                   if condition   = *blanks;
                      panel       = '#MS_BUS   ';
                      hscrn_next  = 'MSB';
                   else;
                      exsr shift_err;
                      exsr get_bus1;
                      panel       = '#MS_BSEDT ';
                      hscrn_next  = 'MSB';
                   endif;
                other;
                   panel       = '#MS_BUS   ';
                   hscrn_next  = 'MSB';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     MS1 - Processing for Muncipal Search - Screen 1
             // ------------------------------------------------------------------
          when hscrn_type = 'MS1';

             select;
                when h_action = 'SRH';
                   exsr $PP_Check;
                   //     If condition = 'not-found' - no mathces found
                   //     If condition = 'unique   ' - found 1 unique match
                   //     If condition = 'multiple ' - found multple records
                   if condition   = 'not-found';
                      panel       = '#MS_SCR1  ';
                      hscrn_next  = 'MS1';
                   elseif condition   = 'unique   ';
                      exsr get_order;
                      //                   exsr      Move_PP
                      panel       = '#MS_SCR2  ';
                      hscrn_next  = 'MS2';
                   elseif condition   = 'multiple ';
                      panel       = '#MS_SCR1  ';
                      hscrn_next  = 'MS1';
                   endif;

                when h_action = 'DTL';
                   exsr get_order;
                   panel       = '#MS_SCR2  ';
                   hscrn_next  = 'MS2';

                when h_action = 'RES';
                   exsr get_resU;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';
                other;
                   panel       = '#MS_SCR1  ';
                   hscrn_next  = 'MS1';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     MS2 - Processing for Municipal Search - Screen 2
             // ------------------------------------------------------------------
       WHEN hscrn_type = 'MS2';

       select;
       WHEN h_action = 'BCK';
          exsr $PP_Check;
          condition   = 'multiple ';
          panel       = '#MS_SCR1  ';
          hscrn_next  = 'MS1';
       WHEN h_action = 'MRT';
          exsr do_pp_mrt;
          exsr get_order;
          panel       = '#MS_SCR2  ';
          hscrn_next  = 'MS2';
       WHEN h_action = 'PAI';
          exsr Do_Paid_RT;
          exsr get_order;
          panel       = '#MS_SCR2  ';
          hscrn_next  = 'MS2';
       WHEN h_action = 'ACT';
          exsr do_pp_actv;
          exsr get_order;
          panel       = '#MS_SCR2  ';
          hscrn_next  = 'MS2';
       WHEN h_action = 'SND';
          exsr get_order;
          panel       = '#RESEND   ';
          hscrn_next  = 'SND';
       other;
          exsr get_order;
          panel       = '#MS_SCR2  ';
          hscrn_next  = 'MS2';
       endsl;

       h_action    = *blanks;
       exsr WrtPanel;

       // ------------------------------------------------------------------
       //     MLR - Processing for Muncipal Mail Returned
       // ------------------------------------------------------------------
          when hscrn_type = 'MLR';
             skipMail =  #FALSE;
             select;
                when h_action = 'SRH'
                   or h_action = '   ';
                   //   Validate fice from barcode
                   if hscan_fice <> *blanks and
                          hscan_user <> *blanks;
                      if hfice      <> hscan_fice;
                         //  error
                         condition   = 'bad input';
                         ei += 1;
                         errs(ei) = 'Fice does not match';
                         skipMail =  #TRUE;
                      else;
                         %subst(h_key:1:8) = hscan_user;
                      endif;
                   else;
                      //  error
                      condition   = 'bad input';
                      ei += 1;
                      errs(ei) = 'Invalid Barcode Entry';
                      skipMail = #TRUE;
                   endif;

                   if skipMail = #FALSE;
                      //     Retrieve the resident record by userid
                      have_res    = #FALSE;
                      exsr get_resu;

                      if have_res    = #TRUE;
                         exsr do_mailrtn;
                      else;
                         ei += 1;
                         %subst(errs(ei):1:5) = '#6083';
                      endif;
                   endif;

                   if condition  <> *blanks;
                      clear hmailtype;
                      exsr shift_err;
                   endif;

                   //     h_action      wheneq    'MOV'
                   //     Parse FICEINST and call appropriate ga_transfr command

                   //                   if        'CRT' = %subst(hficeinst:1:3)
                   //                   eval      fr_fice     = %subst(hficeinst:4:6)
                   //                   eval      byte11      = %subst(hficeinst:10:11)
                   //                   eval      fr_instnc#  = cvt2num(byte11)
                   //                   eval      function    = 'CRTNEWSUB'

                   //                   elseif    'NEW' = %subst(hficeinst:1:3)
                   //                   eval      fr_fice     = %subst(hficeinst:4:6)
                   //                   eval      fr_addr1    = %subst(hficeinst:10:35)
                   //                   eval      function    = 'MOVALL2NEW'

                   //                   else
                   //                   eval      hfice       = %subst(hficeinst:1:6)
                   //                   eval      byte11      = %subst(hficeinst:7:11)
                   //                   eval      hinstance#  = cvt2num(byte11)
                   //                   endif

                   //                   movel     huserid       byte10
                   //                   movel     '$'           byte10
                   //                   clear                   rc

                   //                   call      'GA_TRNSFR'
                   //                   parm                    function
                   //                   parm                    parms_fr
                   //                   parm                    parms_to
                   //                   parm                    byte10
                   //                   parm                    rc
                   //                   if        rc          = #TRUE
                   //                   add       1             ei
                   //                   movel     '#    '       errs(ei)
                   //                   else
                   //                   add       1             ei
                   //                   movel     '#    '       errs(ei)
                   //                   endif


                when h_action = 'RFH';
                   //     Clear key on refresh

                   clear h_key;
             endsl;

             if panel       = *blanks;
                panel       = '#MS_RETND ';
                hscrn_next  = 'MLR';
             endif;
             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     REP panel processing for Monthly Reports
             // ---------------------------------------------------------------------
          when hscrn_type = 'REP';

             //   Routine for each Applid to Create/Email Custom PDF Reports
             select;
                when h_applid    = 'PP' or
                       h_applid    = 'MS' or
                       h_applid    = 'DP' or
                       h_applid    = 'CE';
                   exsr pdf_pprpt;
             endsl;

             if condition   = *blanks;
                ei          = ei + 1;
                errs(ei)    = 'The report has been +
                                  sent to: ' +
                                  %trimr(cemail);

                panel       = '#MENU     ';
                hscrn_next  = 'MNU';
             else;
                exsr shift_err;
                panel       = '#REPORTS  ';
                hscrn_next  = 'REP';
             endif;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     MSR - Processing for Residence Maintenance
             // ------------------------------------------------------------------
          when hscrn_type = 'MSR';

             select;
                   //   Search by any of the parameters
                when h_action = 'SRH';

                   exsr srh_resveh;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //   List out addresses that require action
                when h_action = 'LST';
                   res_errors  = 'Y';
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //   Display the Vehicle/Pet Data when - from error lists
                when h_action = 'DSP';
                   exsr srh_resveh;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //   Add/Edit a Residence Name/Address
                when h_action = 'EDT';
                   if h_key      <> *blanks;
                      have_res    = #false;
                      exsr fill_resd;
                   else;
                      hcity = icity;
                      hstate = istate;
                      //                   movel     ipostcd       hpostcd
                   endif;
                   panel       = '#RES_EDIT ';
                   hscrn_next  = 'MSR';

                   //   Display a Move Res screen input to enter a new address (Moved)
                when h_action = 'MOV';
                   hscrn_seq   = 0;
                   button_txt  = 'Confirm Move';
                   have_res    = #false;
                   exsr fill_resd;
                   panel       = '#RES_MOVE ';
                   hscrn_next  = 'MSR';

                   //   Transfer a Resident/Vehicles/Pets - to the New address given
                when h_action = 'TRF';
                   exsr pp_trfedt;
                   if condition   = *blanks;
                      if hscrn_seq   > 0;
                         exsr pp_trnsfr;

                         if hmailtype  <> *blanks;
                            clear h_key;
                            panel       = '#MS_RETND ';
                            hscrn_next  = 'MLR';
                         else;

                            //          set search to new address 1
                            if haddr1     <> *blanks;
                               haddr1      = waddr1;
                            endif;
                            exsr srh_resveh;

                            panel       = '#MS_RVP   ';
                            hscrn_next  = 'MSR';
                         endif;

                      else;
                         if have_suba   = 'Y';
                            hscrn_seq   = 0;
                            button_txt  = 'Confirm Move';
                            ei += 1;
                            %subst(errs(ei):1:5) = '#5747';
                         else;
                            hscrn_seq   = hscrn_seq + 1;
                            button_txt  = 'Complete Move';
                            ei += 1;
                            %subst(errs(ei):1:5) = '#5748';
                         endif;

                         //  06/19/09 MRB Display override bad address message throughout move

                         if hav_ovride  = 'Y';
                            ei += 1;
                            errs(ei)    = '#55885';
                         endif;

                         panel       = '#RES_MOVE ';
                         hscrn_next  = 'MSR';
                      endif;

                   else;
                      hscrn_seq   = 0;
                      button_txt  = 'Confirm Move';

                      have_res    = #false;
                      exsr fill_resd;

                      exsr shift_err;
                      panel       = '#RES_MOVE ';
                      hscrn_next  = 'MSR';
                   endif;

                   //   Call GA_TRNSFR to Create New Sub Account - then Display It
                when h_action = 'CRT';
                   exsr pp_crtsub;
                   %subst(h_key:1:10) = to_pinuser;

                   exsr srh_resveh;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //   Delete a Residence Name/Address
                when h_action = 'DEL';
                   exsr pp_resdel;
                   if condition  <> *blanks;
                      exsr shift_err;
                   endif;
                   clear h_key;
                   clear hsrch_tarea;
                   clear hsrch_tnum;
                   clear hsrch_nam;
                   clear hsrch_dta5;
                   clear hsrch_dta6;
                   clear haddr1;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //   Update a Resident - "Vacant" (Removes Pets/Vehs/Subs)
                when h_action = 'VAC';
                   exsr pp_resvac;

                   //       Now that residence is vacant, clear h_key and search again
                   clear h_key;
                   exsr srh_resveh;

                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //  Cancel an Add or Update - Go back to Search screen
                when h_action = 'CXL';
                   if hmailtype  <> *blanks;
                      panel       = '#MS_RETND ';
                      hscrn_next  = 'MLR';
                   else;
                      exsr srh_resveh;
                      panel       = '#MS_RVP   ';
                      hscrn_next  = 'MSR';
                   endif;

                   //  Add New Residence Information
                when h_action = 'ADD';
                   exsr pp_resedt;
                   if condition   = *blanks;
                      exsr pp_resadd;

                      exsr srh_resveh;
                      panel       = '#MS_RVP   ';
                      hscrn_next  = 'MSR';
                   else;
                      exsr shift_err;
                      panel       = '#RES_EDIT ';
                      hscrn_next  = 'MSR';
                   endif;

                   //  Update Residence Information
                when h_action = 'UPD';
                   exsr pp_resedt;
                   if condition   = *blanks;
                      exsr pp_resupd;

                      exsr srh_resveh;
                      panel       = '#MS_RVP   ';
                      hscrn_next  = 'MSR';
                   else;
                      exsr shift_err;
                      panel       = '#RES_EDIT ';
                      hscrn_next  = 'MSR';
                   endif;

                   //  Send resident an e-mail with their mailer attached
                when h_action = 'SNM';
                   exsr pp_ressnm;
                   if condition   = *blanks;
                      ei          = ei + 1;
                      errs(ei)    = 'The mailer as been +
                                        sent to: ' +
                                        %trimr(remail);
                   endif;

                   exsr srh_resveh;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //  Send resident an e-mail with their pin
                when h_action = 'SNP';
                   exsr pp_ressnp;
                   ei          = ei + 1;
                   errs(ei)    = 'The pin as been +
                                     sent to: ' +
                                     %trimr(remail);

                   exsr srh_resveh;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //  Enable resident and set sign on count to 0
                when h_action = 'ENA';
                   exsr pp_resena;

                   exsr srh_resveh;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //  View detail for an order
                when h_action = 'DTL';
                   exsr get_order;
                   clear hsrch_ssne;
                   clear hsrch_sid;
                   clear hsrch_nam;
                   hsrch_ord = horder#;
                   clear hsrch_dta5;
                   clear hsrch_dta6;
                   clear hsrch_dta8;
                   clear hsrch_tag;
                   clear hsrch_type;
                   hsrch_type  = 'ORD';

                   exsr $PP_Check;
                   //     If condition = 'not-found' - no mathces found
                   //     If condition = 'unique   ' - found 1 unique match
                   //     If condition = 'multiple ' - found multple records
                   if condition   = 'not-found';
                      panel       = '#MS_SCR1  ';
                      hscrn_next  = 'MS1';
                   elseif condition   = 'unique   ';
                      exsr get_order;
                      //                   exsr      Move_PP
                      panel       = '#MS_SCR2  ';
                      hscrn_next  = 'MS2';
                   elseif condition   = 'multiple ';
                      panel       = '#MS_SCR1  ';
                      hscrn_next  = 'MS1';
                   endif;

                   //   Refresh the page
                when h_action = 'RFR';
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //   Switch to RES2 (Deleted) Processing Mode
                when h_action = 'MR2';
                   hres2mode   = 'Y';
                   panel       = '#MS_RES2  ';
                   hscrn_next  = 'MR2';
                other;

                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     MR2 - Processing for DELETED Residence Maintenance
             // ------------------------------------------------------------------
          when hscrn_type = 'MR2';

             select;
                   //   Search by any of the parameters
                when h_action = 'SRH';

                   exsr srh_res2;
                   panel       = '#MS_RES2  ';
                   hscrn_next  = 'MR2';

                   //   Display a Move Res screen input to enter a new address (Moved)
                when h_action = 'MOV';
                   hscrn_seq   = 0;
                   button_txt  = 'Confirm Move';
                   have_res2   = #false;
                   exsr fill_res2d;
                   panel       = '#RES_MOV2 ';
                   hscrn_next  = 'MR2';

                   //   Transfer a Resident/Vehicles/Pets - to the New address given
                when h_action = 'TRF';
                   exsr pp_trfedt2;
                   if condition   = *blanks;
                      if hscrn_seq   > 0;
                         exsr pp_trnsfr2;

                         panel       = '#MS_RES2  ';
                         hscrn_next  = 'MR2';

                      else;
                         if have_suba   = 'Y';
                            hscrn_seq   = 0;
                            button_txt  = 'Confirm Move';
                            ei += 1;
                            %subst(errs(ei):1:5) = '#5747';
                         else;
                            hscrn_seq   = hscrn_seq + 1;
                            button_txt  = 'Complete Move';
                            ei += 1;
                            %subst(errs(ei):1:5) = '#5748';
                         endif;
                         panel       = '#RES_MOV2 ';
                         hscrn_next  = 'MR2';
                      endif;

                   else;
                      hscrn_seq   = 0;
                      button_txt  = 'Confirm Move';

                      have_res2   = #false;
                      exsr fill_res2d;

                      exsr shift_err;
                      panel       = '#RES_MOV2 ';
                      hscrn_next  = 'MR2';
                   endif;

                   //   Refresh the page
                when h_action = 'RFR';
                   panel       = '#MS_RES2  ';
                   hscrn_next  = 'MR2';

                   //   Switch to RES1 (Normal) Processing Mode
                when h_action = 'MSR';
                   hres2mode   = 'N';
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';
                other;

                   panel       = '#MS_RES2  ';
                   hscrn_next  = 'MR2';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     MSQ - Processing for Muni - Quick Order Screen  (Scanning)
             // ------------------------------------------------------------------
          when hscrn_type = 'MSQ';

             select;
                   //  User is closing their batch and requesting report
                when h_action = 'CBT';

                   exsr pdf_msbat;
                   ei += 1;
                   errs(ei) = 'Please print the report';

                   //  User is requesting their check report
                when h_action = 'RPT';

                   exsr pdf_mschk;
                   ei += 1;
                   errs(ei) = 'Report sent to: ' +
                                  cemail;

                when h_action = 'RFR';

                   //   Refresh the page - do nothing

                   //  All other processing assumes a search was done
                other;
                   //   Run a search


                   exsr srh_resveh;
                   if use_namsrh  = *blanks and
                          use_telsrh  = *blanks and
                          use_vehsrh  = *blanks and
                          use_adrsrh  = *blanks;
                      have_res    = #false;
                      exsr get_resu;
                   endif;
             endsl;

             panel       = '#MS_QUICK ';
             hscrn_next  = 'MSQ';
             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     VEH - Processing for Municipal Vehicle Maintenance
             // ------------------------------------------------------------------
          when hscrn_type = 'VEH';

             select;
                   //  Add a new Vehicle
                when h_action = 'ADD';
                   exsr pp_vehedt;
                   if condition   = *blanks;
                      exsr pp_vehadd;

                      exsr srh_resveh;
                      panel       = '#MS_RVP   ';
                      hscrn_next  = 'MSR';
                   else;
                      exsr shift_err;
                      panel       = '#VEH_EDIT ';
                      hscrn_next  = 'VEH';
                   endif;

                   //  Display the screen for Adding/Editing Vehicle Detail
                when h_action = 'EDT';
                   if h_kplate   <> *blanks;
                      exsr fill_vehd;
                   else;
                      //   take resident name if new vehicle
                      exsr get_resU;
                      hvfrstname  = rfrstname;
                      hvmidlname  = rmidlname;
                      hvlastname  = rlastname;
                   endif;
                   panel       = '#VEH_EDIT ';
                   hscrn_next  = 'VEH';

                   //  Update Vehicle Information
                when h_action = 'UPD';
                   exsr pp_vehedt;
                   if condition   = *blanks;
                      exsr pp_vehupd;

                      exsr srh_resveh;
                      panel       = '#MS_RVP   ';
                      hscrn_next  = 'MSR';
                   else;
                      exsr shift_err;
                      panel       = '#VEH_EDIT ';
                      hscrn_next  = 'VEH';
                   endif;

                   //  Toggle Delete this Vehicle from the Residents Address
                when h_action = 'DEL'
                   or h_action = 'ACT';
                   exsr pp_vehdel;
                   if condition  <> *blanks;
                      exsr shift_err;
                   endif;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //  Cancel an Add or Update - Go back to Search screen
                when h_action = 'CXL';
                   exsr srh_resveh;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                other;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;

             // ------------------------------------------------------------------
             //     PET - Processing for Municipal Pet Maintenance
             // ------------------------------------------------------------------
          when hscrn_type = 'PET';

             select;

                   //  Add a new Pet Information
                when h_action = 'ADD';
                   exsr pp_petedt;
                   if condition   = *blanks;
                      exsr pp_petadd;

                      exsr srh_resveh;
                      panel       = '#MS_RVP   ';
                      hscrn_next  = 'MSR';
                   else;
                      exsr shift_err;
                      panel       = '#PET_EDIT ';
                      hscrn_next  = 'PET';
                   endif;

                   //  Display the screen for Adding/Editing Pet Detail
                when h_action = 'EDT';
                   if h_kname    <> *blanks;
                      exsr fill_petd;
                   endif;
                   panel       = '#PET_EDIT ';
                   hscrn_next  = 'PET';

                   //  Update Pet Information
                when h_action = 'UPD';
                   exsr pp_petedt;
                   if condition   = *blanks;
                      exsr pp_petupd;

                      exsr srh_resveh;
                      panel       = '#MS_RVP   ';
                      hscrn_next  = 'MSR';
                   else;
                      exsr shift_err;
                      panel       = '#PET_EDIT ';
                      hscrn_next  = 'PET';
                   endif;

                   //  Delete this Pet from the Residents Address
                when h_action = 'DEL'
                   or h_action = 'ACT';
                   exsr pp_petdel;
                   if condition  <> *blanks;
                      exsr shift_err;
                   endif;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                   //  Cancel an Add or Update - Go back to Search screen
                when h_action = 'CXL';
                   exsr srh_resveh;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';

                other;
                   panel       = '#MS_RVP   ';
                   hscrn_next  = 'MSR';
             endsl;

             h_action    = *blanks;
             exsr WrtPanel;


       endsl;

       endsr;

       // **********************************************************************
       //     *INZSR:   Program initialization Routine
       // **********************************************************************
       begsr *inzsr;

          in dvdtaara;

          ItemLen = 120;
          BufrTrip = 2500;

          msg_defalt  = 'GAS';
          Msg_File   = ('GAMSGS_ENG*LIBL     ');

          // set environment variable for java classpath
          /copy rpgcopy,putenvcall

          //                   kfld                    hrecid
          clear lgemaddr;

          // ---Open Files
          open dvclientf1;

          //   clear the array of TD elements
          clear td_ary;
          clear td_i;

          clear rchgdate;

          //   BELOW ARE VARIABLES TO BE ADDED TO MASTER OR OPTION RECORDS


       endsr;
       /copy rpgcopy,$PSSR_SR
       /copy rpgcopy,messagesr
       /copy rpgcopy,$SRVRGT_SR
       /copy rpgcopy,$rss_cntsr
       /copy rpgcopy,$SRVRAV_SR
       /copy rpgcopy,$SRVRED_SR
       /copy rpgcopy,$srvrem_sp
       /copy rpgcopy,$SRVRMF_SR
       /copy rpgcopy,$SRVRM2_SP
       /copy rpgcopy,$airbil_sr

       // **************************************************************
       //    $GA_Check:   Check Logical Files in Order to decide if
       //                 we have 1 record, no records, or multiple
       //                 records.
       //
       //   *IN50 = SSN Logical GAORDER1S
       //   *IN51 = SID Logical GAORDER1I
       //   *IN52 = NAM Logical GAORDER1N
       //   *IN53 = ORD Logical GAORDER1#
       //   *IN54 = PLT Logical GAORDER1A
       //   *IN55 = STK Logical GAORDER1L8
       //   *IN56 = HTL Logical GAORDER1H
       //   *IN57 = STG Logical GAORDER1D
       //   *IN58 = LST Logical GAORDER1  - List by Order#
       // **************************************************************
       begsr $GA_Check;

          condition   = *blanks;
          *in50       = *off;
          *in51       = *off;
          *in52       = *off;
          *in53       = *off;
          *in54       = *off;
          *in55       = *off;
          *in56       = *off;
          *in57       = *off;
          *in58       = *off;

          select;
             when hsrch_type = 'SSN';
                *in50       = *on;
             when hsrch_type = 'SID';
                *in51       = *on;
             when hsrch_type = 'NAM';
                *in52       = *on;
                comma_pos   = %scan(',':hsrch_nam:1);
                if comma_pos   = 0;
                   hsrch_lsn   = %trim(hsrch_nam);
                   LENLN       = %len(%trim(hsrch_lsn));
                else;
                   hsrch_frn   =
                       %trim(%subst(hsrch_nam:comma_pos+1));
                   LENFN       = %len(%trim(hsrch_frn));
                   hsrch_lsn   = %subst(hsrch_nam:1:comma_pos-1);
                   LENLN       = %len(%trim(hsrch_lsn));
                endif;
             when hsrch_type = 'ORD';
                *in53       = *on;
             when hsrch_type = 'DT5';
                *in54       = *on;
             when hsrch_type = 'DT8';
                *in55       = *on;
             when hsrch_type = 'PHL';
                *in56       = *on;
             when hsrch_type = 'STG';
                *in57       = *on;
             when hsrch_type = 'LST';
                *in58       = *on;
             other;
                *in53       = *on;
          endsl;

          // ----------OPEN FILE BEG--------------------------------
          if *in50;
             if NOT %open(gaorder1s);
                open gaorder1s;
             endif;
          endif;
          if *in51;
             if NOT %open(gaorder1i);
                open gaorder1i;
             endif;
          endif;
          if *in52;
             if NOT %open(gaorder1n);
                open gaorder1n;
             endif;
          endif;
          if *in53;
             if NOT %open(gaorder1#);
                open gaorder1#;
             endif;
          endif;
          if *in54;
             if NOT %open(gaorder1a);
                open gaorder1a;
             endif;
          endif;
          if *in55;
             if NOT %open(gaorder1l8);
                open gaorder1l8;
             endif;
          endif;
          if *in56;
             if NOT %open(gaorder1h);
                open gaorder1h;
             endif;
          endif;
          if *in57;
             if NOT %open(gaorder1d);
                open gaorder1d;
             endif;
          endif;
          if *in58;
             if NOT %open(gaorder1);
                open gaorder1;
             endif;
          endif;
          // ----------OPEN FILE END---------------------------------

          // ----------SETLL FILE BEG--------------------------------
          if *in50;
             setll (hfice : h_applid : hsrch_ssne)
                    gaorder1s;
          endif;
          if *in51;
             setll (hfice : h_applid : hsrch_sid) gaorder1i;
          endif;
          if *in52;
             setll (hfice : h_applid : hsrch_lsn :
                   hsrch_frn) gaorder1n;
          endif;
          if *in53;
             setll hsrch_ord gaorder1#;
          endif;
          if *in54;
             setll (hfice : h_applid : hsrch_dta5)
                    gaorder1a;
          endif;
          if *in55;
             setll (hfice : h_applid : hsrch_dta8)
                    gaorder1l8;
          endif;
          if *in56;
             setll (hfice : h_applid) gaorder1h;
          endif;
          if *in57;
             setll (hfice : h_applid) gaorder1d;
          endif;
          if *in58;
             setll (hfice : h_applid) gaorder1;
          endif;
          if NOT %equal;
          endif;
          // ----------SETLL FILE END-------------------------------

          // ----------CHECK SSN BEG--------------------------------
          if *in50       = *on;
             reade (hfice : h_applid : hsrch_ssne) garec_s;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade (hfice : h_applid : hsrch_ssne) garec_s;
                *in97 = %eof;
                if *in97       = *off;
                   condition   = 'multiple ';
                   clear horder#;
                endif;
             endif;
          endif;
          // ----------CHECK SSN END--------------------------------

          // ----------CHECK SID BEG--------------------------------
          if *in51       = *on;
             reade (hfice : h_applid : hsrch_sid) garec_i;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade (hfice : h_applid : hsrch_sid) garec_i;
                *in97 = %eof;
                if *in97       = *off;
                   condition   = 'multiple ';
                   clear horder#;
                endif;
             endif;
          endif;
          // ----------CHECK SID END--------------------------------

          // ----------CHECK NAM BEG--------------------------------
          if *in52       = *on;
             reade (hfice : h_applid) garec_n;
             *in96 = %eof;
             if *in96       = *on or
                    %subst(tslastn:1:LENLN) <> hsrch_lsn or
                    (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
                     hsrch_frn <> *blanks);
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade (hfice : h_applid) garec_n;
                *in97 = %eof;
                if *in97       = *off and
                       %subst(tslastn:1:LENLN) = hsrch_lsn or
                       (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
                        hsrch_frn <> *blanks);
                   condition   = 'multiple ';
                   clear horder#;
                endif;
             endif;
          endif;
          // ----------CHECK NAM END-------------------------------

          // ----------CHECK ORD BEG--------------------------------
          if *in53       = *on;
             reade(n) hsrch_ord garec_#;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             elseif hfice      <> tfice;
                //   Don't display order for another school
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade(n) hsrch_ord garec_#;
                *in97 = %eof;
                if *in97       = *off;
                   condition   = 'multiple ';
                   clear horder#;
                endif;
             endif;
          endif;
          // ----------CHECK ORD END--------------------------------

          // ----------CHECK PLT BEG--------------------------------
          if *in54       = *on;
             reade (hfice : h_applid : hsrch_dta5) garec_a;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade (hfice : h_applid : hsrch_dta5) garec_a;
                *in97 = %eof;
                if *in97       = *off;
                   condition   = 'multiple ';
                   clear horder#;
                endif;
             endif;
          endif;
          // ----------CHECK PLT END--------------------------------

          // ----------CHECK STK BEG--------------------------------
          if *in55       = *on;
             reade (hfice : h_applid : hsrch_dta8) garec_l8;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade (hfice : h_applid : hsrch_dta8) garec_l8;
                *in97 = %eof;
                if *in97       = *off;
                   condition   = 'multiple ';
                   clear horder#;
                endif;
             endif;
          endif;
          // ----------CHECK STK END--------------------------------

          // ----------CHECK HTL BEG--------------------------------
          if *in56       = *on;
             condition   = 'multiple ';
          endif;
          // ----------CHECK HTL END-------------------------------

          // ----------CHECK STG BEG--------------------------------
          if *in57       = *on;
             condition   = 'multiple ';
          endif;
          // ----------CHECK STG END-------------------------------

          // ----------CHECK LST BEG--------------------------------
          if *in58       = *on;
             reade (hfice : h_applid) gaorder;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             else;
                condition   = 'multiple ';
                clear horder#;
             endif;
          endif;
          // ----------CHECK LST END----------------------------

       endsr;

       // **************************************************************
       //    $GA_Row:    Write the Generic Application ROWS to Screen
       // **************************************************************
       begsr $GA_Row;

          //  TD-1 contains Order Number

       SELECT;
       WHEN h_applid    = 'MS';
          td_cell1    = '<td aria-labelledby="TH1">' + torder# +
              '</td>';

       WHEN h_applid    = 'PP' or
              h_applid    = 'DP' or
              h_applid    = 'CE';
          td_cell1    = '<td aria-labelledby="TH1"><a href="' +
              'javascript:setsubmitORD(document.form1'+
              '.ORDERNO, ' + '''' + torder# + '''' +
              ')">' + torder# + '</a></td>';

       OTHER;
          td_cell1    = '<td aria-labelledby="TH1"><a href="' +
              'javascript:setsubmitORD(document.form1'+
              '.ORDERNO, ' + '''' + torder# + '''' +
              ')">' + torder# + '</a></td>';
       ENDSL;

       // TD-2 Contains the Date and Time
        if srchByDate;
           td_cell2 = '<td aria-labelledby="TH2">' +
                      %trim(dspTmStamp(tga_fin_dt:tga_fin_tm:itime_zone:'*WEB'))
                      + '</td>';
        else;
           td_cell2 = '<td aria-labelledby="TH2">' +
                     %trim(dspTmStamp(tdate:ttime:itime_zone:'*WEB')) + '</td>';
        endif;
        clear td_cell3;

       // TD-4 contains the Parking Permit Type
       SELECT;
       WHEN h_applid    = 'PP' or h_applid    = 'MS';
          if tqty        > 1;
             td_cell4    = '<td aria-labelledby="TH3">' + %trim(%char(tqty)) +
                 ' ' + %trim(tapp_data9) + '</td>';
          else;
             td_cell4    = '<td aria-labelledby="TH3">' + %trim(tapp_data9) +
                           '</td>';
          endif;

       WHEN (h_applid = 'DP' or h_applid = 'CE');
          td_cell4    = '<td aria-labelledby="TH3">' +
              %trim(tapp_data1) + '</td>';
       ENDSL;

       // TD-5 contains the Parking Permit No
       SELECT;
       WHEN h_applid    = 'PP' or h_applid    = 'MS';
          td_cell5    = '<td aria-labelledby="TH4">' +
              %trim(tapp_data8) + '</td>';

       WHEN h_applid    = 'DP' or h_applid    = 'CE';
          td_cell5    = '<td aria-labelledby="TH4">' + tonline +
              '&nbsp;</td>';

       OTHER;
          td_cell5    = '<td aria-labelledby="TH4">&nbsp;</td>';
       ENDSL;

       // TD-6 contains Current Status
       SELECT;
       WHEN h_applid    = 'PP' or h_applid    = 'MS';
          IF hscrn_type  =  'PAY';
                  byte30 = GAORD_paystat(orderds);
          ELSE;
                  byte30 = GAORD_orderstat(orderds:huserid);
          endif;
          td_cell6    = '<td aria-labelledby="TH5">' + %trim(byte30) +
              '</td>';

       WHEN h_applid    = 'DP' or h_applid    = 'CE';
          exsr get_statDP;
          td_cell6    = '<td aria-labelledby="TH5">' + %trim(byte300) +
              '</td>';
       OTHER;
          td_cell6    = '<td aria-labelledby="TH5">&nbsp;</td>';
       ENDSL;

       // TD-7 contains the Name of Student
       clear wkfullname;
       wkfullname  = %trim(tsfrstn) + ' ' + %trim(tslastn);

       td_cell7    = '<td aria-labelledby="TH6">' +
           %trim(wkfullname) + '</td>';

       // TD-8 contains the ID # of Student
       clear wk_idnum;
       if tstudnt_id <> *blanks;
          wk_idnum    = tstudnt_id;
       elseif tssn_enc   <> *blanks;
          clear #ED_dqin;
          clear #ED_dqout;
          #ED_doss_i  = '4';
          #ED_fice_i  = tfice;
          #ED_ess_i   = tssn_enc;
          exsr $get_ED;
          ssn_last4   = #ED_uss_o;

          wk_idnum    = ' ...' +
              ssn_last4;
       endif;

       td_cell8    = '<td aria-labelledby="TH7">' +
           %trim(wk_idnum) + '&nbsp;</td>';

       // TD-9 Number of Diplomas
       if %scan('Q':gscreens:1) > 0;
          td_cell8b = '<td aria-labelledby="TH8b">' +
              %trim(%char(tqty)) + '&nbsp;</td>';
       endif;

       // TD-10 Shipping Option
       if %scan('M':gscreens:1) > 0;
          exsr getShipMethod;
          td_cell9 = '<td aria-labelledby="TH8">' +
              %trim(shipOptionDs.ga_rpt2dsc) + '&nbsp;</td>';
       endif;

       // TD-11 Comments or Spl Instruction
       if (%scan('I':gdipl_flds:1) > 0 or gdipl_flds = *blanks);
          if tapp_data8 = *blanks;
             commentInd = *blanks;
          else;
             commentInd = 'Y';
          endif;

          td_cell10 = '<td aria-labelledby="TH9" style="text-align:center">' +
              %trim(commentInd) + '&nbsp;</td>';
       endif;

       tr_cell1    = '<tr valign=top>';

       // Build the actual ROW - tr_cell1 + tdcell1 - 7
       row  = %trim(tr_cell1) +
           %trim(td_cell1) +
           %trim(td_cell2) +
           %trim(td_cell3) +
           %trim(td_cell4) +
           %trim(td_cell5) +
           %trim(td_cell6) +
           %trim(td_cell7) +
           %trim(td_cell8) +
           %trim(td_cell8b) +
           %trim(td_cell9) +
           %trim(td_cell10) +
           '</tr>' +
           linefeed;


       // ---------------------------------------------------------------
       //     add the row to the buffer

          BufOut = %trimr(BufOut) + row;

          bytesize = bytesize +
              %len(%trimr(row)) + 1;
          exsr checkbufr;

       endsr;

       // **************************************************************
       //    $GA_Search:  ORDERBY Logical Files for GA Applications
       //                 This routine is a BIG SELECT statement
       //                 that depends on the indicator that was turned
       //                 on in the $GA_CHECK Routine.
       //
       //   *IN50 = SSN Logical
       //   *IN51 = SID Logical
       //   *IN52 = NAM Logical
       //   *IN53 = ORD Logical
       //   *IN54 = PLT Logical
       //   *IN55 = STK Logical
       //   *IN56 = HTL Logical
       //   *IN57 = STG Logical
       //   *IN58 = LST Logical - List by Order#
       // **************************************************************
       begsr $GA_Search;

          // ----------OPEN FILE BEG--------------------------------
          if *in50;
             if NOT %open(gaorder1s);
                open gaorder1s;
             endif;
          endif;
          if *in51;
             if NOT %open(gaorder1i);
                open gaorder1i;
             endif;
          endif;
          if *in52;
             if NOT %open(gaorder1n);
                open gaorder1n;
             endif;
          endif;
          if *in53;
             if NOT %open(gaorder1#);
                open gaorder1#;
             endif;
          endif;
          if *in54;
             if NOT %open(gaorder1a);
                open gaorder1a;
             endif;
          endif;
          if *in55;
             if NOT %open(gaorder1l8);
                open gaorder1l8;
             endif;
          endif;
          if *in56;
             if NOT %open(gaorder1h);
                open gaorder1h;
             endif;
          endif;
          if *in57;
             if NOT %open(gaorder1d);
                open gaorder1d;
             endif;
          endif;
          if *in58;
             if NOT %open(gaorder1);
                open gaorder1;
             endif;
          endif;
          // ----------OPEN FILE END----------------------------

          element_fl  = '2141';
          element_wd  = 'MSG';
          element_p1  = ' ';

          if h_applid = 'DP' or h_applid = 'CE';
             exsr rtnDpoh;
          else;
             exsr wrtpanlmsg;
          endif;

          // ----------SETLL FILE BEG--------------------------------
          if *in50;
             setll (hfice : h_applid : hsrch_ssne)
                    gaorder1s;
          endif;
          if *in51;
             setll (hfice : h_applid : hsrch_sid) gaorder1i;
          endif;
          if *in52;
             setll (hfice : h_applid : hsrch_lsn :
                   hsrch_frn) gaorder1n;
          endif;
          if *in53;
             setll hsrch_ord gaorder1#;
          endif;
          if *in54;
             setll (hfice : h_applid : hsrch_dta5)
                    gaorder1a;
          endif;
          if *in55;
             setll (hfice : h_applid : hsrch_dta8)
                    gaorder1l8;
          endif;
          if *in56;
             setll (hfice : h_applid) gaorder1h;
          endif;
          if *in57;
             setll (hfice : h_applid) gaorder1d;
          endif;
          if *in58;
             setll (hfice : h_applid) gaorder1;
          endif;
          if NOT %equal;
          endif;
          // ----------SETLL FILE END----------------------------

          dow *in96 <> *on;
             // ----------CHECK SSN BEG--------------------------------
             if *in50       = *on;
                reade (hfice : h_applid : hsrch_ssne) garec_s;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK SSN END----------------------------

             // ----------CHECK SID BEG--------------------------------
             if *in51       = *on;
                reade (hfice : h_applid : hsrch_sid) garec_i;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK SID END----------------------------

             // ----------CHECK NAM BEG--------------------------------
             if *in52       = *on;
                reade (hfice : h_applid) garec_n;
                *in96 = %eof;
                if *in96       = *on or
                       %subst(tslastn:1:LENLN) <> hsrch_lsn or
                       (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
                        hsrch_frn <> *blanks);
                   leave;
                endif;
             endif;
             // ----------CHECK NAM END----------------------------

             // ----------CHECK ORD BEG--------------------------------
             if *in53       = *on;
                reade hsrch_ord garec_#;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK ORD END----------------------------

             // ----------CHECK PLT BEG--------------------------------
             if *in54       = *on;
                reade (hfice : h_applid : hsrch_dta5) garec_a;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK PLT END----------------------------

             // ----------CHECK STK BEG--------------------------------
             if *in55       = *on;
                reade (hfice : h_applid : hsrch_dta8) garec_l8;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK STK END----------------------------

             // ----------CHECK HTL BEG--------------------------------
             if *in56       = *on;
                reade (hfice : h_applid) garec_h;
                *in96 = %eof;

             if *in96 = *on;
                leave;
             elseif tstat_e_dt < cutoff;
                // The hot list is currently sorted by permit # then end
                // date, since this currently leaves once the date is wrong
                // the hotlist will break when the permit # rolls over for
                // a school
                leave;
             endif;

             endif;
             // ----------CHECK HTL END----------------------------

             // ----------CHECK STG BEG--------------------------------
             if *in57       = *on;
                reade (hfice : h_applid) garec_d;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;

                //   Output Row Header Type Information
                if stage_last <> tstage;
                   stage_last  = tstage;
                   if tstage      = 'A';
                      row_text    =
                          'ORDERS NOT YET APPROVED';
                   elseif tstage      = 'B';
                      if icert_optn  = 'Y';
                         row_text    =
                             'CERTIFICATION INFORMATION TO BE BUILT';
                      else;
                         row_text    =
                             'DIPLOMA INFORMATION TO BE BUILT';
                      endif;
                   elseif tstage      = 'N';
                      row_text    =
                          'ORDERS WAITING FOR NAME LOOKUP';
                   elseif tstage      = 'O';
                      if icert_optn  = 'Y';
                         row_text    =
                             'ORDERS REQUIRING YOUR ATTENTION';
                      else;
                         row_text    =
                             'ORDERS TO BE AUTHORIZED, APPROVED' +
                             ' AND PAID';
                      endif;
                   elseif tstage      = 'R';
                      if icert_optn  = 'Y';
                         row_text    =
                             'CERTIFICATION INFORMATION TO BE REVIEWED';
                      else;
                         row_text    =
                             'DIPLOMA INFORMATION TO BE REVIEWED';
                      endif;
                   elseif tstage      = '7';
                      row_text    =
                          'ORDERS WAITING TO BE PRINTED';
                   else;
                      row_text    = 'NOT DEFINED';
                   endif;

                   if h_applid = 'DP' or h_applid = 'CE';
                      row         = '<tr>' +
                          '<td colspan=' +%char(maxDpCols)+ ' align=center><b>'+
                          %trim(row_text) +
                          '</b></td></tr>' + linefeed;
                   else;
                      row         = '<tr>' +
                          '<td colspan=7 align=center><b>' +
                          %trim(row_text) +
                          '</b></td></tr>' + linefeed;
                   endif;

                   BufOut = %trimr(BufOut) + row;
                   bytesize = bytesize +
                       %len(%trimr(row)) + 1;
                   exsr checkbufr;

                endif;

             endif;
             // ----------CHECK STG END----------------------------

             // ----------CHECK LST BEG--------------------------------
             if *in58       = *on;
                reade (hfice : h_applid) gaorder;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK LST END----------------------------


             exsr $GA_Row;
          enddo;

          //  Close Table
          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '<p>';

       endsr;

       // **************************************************************
       //    $PP_Check:   Check Logical Files in Order to decide if
       //                 we have 1 record, no records, or multiple
       //                 records.
       //
       //   *IN50 = SSN Logical GAORDER1S
       //   *IN51 = SID Logical GAORDER1I
       //   *IN52 = NAM Logical GAORDER1N
       //   *IN53 = ORD Logical GAORDER1#
       //   *IN54 = PLT Logical GAORDER1A
       //   *IN55 = STK Logical GAORDER1L8
       //   *IN56 = ULN Logical GAORDER1U - Unpaid by Last Name
       //   *IN57 = PHL Logical GAORDER1H
       //   *IN58 = UNP Logical GAORDER1U - All Unpaid
       //   *IN59 = TAG Logical GAORDER1L8
       // **************************************************************
       begsr $PP_Check;

          alt_pmt#    = *blanks;
          condition   = *blanks;
          *in50       = *off;
          *in51       = *off;
          *in52       = *off;
          *in53       = *off;
          *in54       = *off;
          *in55       = *off;
          *in56       = *off;
          *in57       = *off;
          *in58       = *off;
          *in59       = *off;

          select;
             when hsrch_type = 'SSN';
                *in50       = *on;
             when hsrch_type = 'SID';
                *in51       = *on;
             when hsrch_type = 'NAM';
                *in52       = *on;
                comma_pos   = %scan(',':hsrch_nam:1);
                if comma_pos   = 0;
                   hsrch_lsn   = %trim(hsrch_nam);
                   LENLN       = %len(%trim(hsrch_lsn));
                else;
                   hsrch_frn   =
                       %trim(%subst(hsrch_nam:comma_pos+1));
                   LENFN       = %len(%trim(hsrch_frn));
                   hsrch_lsn   = %subst(hsrch_nam:1:comma_pos-1);
                   LENLN       = %len(%trim(hsrch_lsn));
                endif;
             when hsrch_type = 'ORD';
                *in53       = *on;
             when hsrch_type = 'DT5';
                *in54       = *on;
             when hsrch_type = 'DT8';
                *in55       = *on;
             when hsrch_type = 'ULN';
                *in56       = *on;
                comma_pos   = %scan(',':hsrch_nam:1);
                if comma_pos   = 0;
                   hsrch_lsn   = %trim(hsrch_nam);
                   LENLN       = %len(%trim(hsrch_lsn));
                else;
                   hsrch_frn   =
                       %trim(%subst(hsrch_nam:comma_pos+1));
                   LENFN       = %len(%trim(hsrch_frn));
                   hsrch_lsn   = %subst(hsrch_nam:1:comma_pos-1);
                   LENLN       = %len(%trim(hsrch_lsn));
                endif;
             when hsrch_type = 'PHL';
                *in57       = *on;
             when hsrch_type = 'UNP';
                //   Show all unpaid button only shows last 15 days
                *in58       = *on;

                //   Calculate cuttoff date

                $date = cycle_dt_a;
                $value      = %dec(hlastdays:2:0);
                $unit       = 'D';
                $result = dateminus($date:$value:$unit);
                cutoff = %dec(%subst(%editc(cutoff:'X'):1:1)
                      + %xlate(' ':'0':
                        $result) :9:0);

             when hsrch_type = 'TAG';
                *in59       = *on;
             other;
          endsl;

       // If superuser check over multiple fices
       if hsuperuser <> *blanks and h_applid = 'PP' and
          (*in51 = *on or *in52 = *on or *in53 = *on or
           *in54 = *on or *in55 = *on);
          exsr $PP_CheckSU;
          leavesr;
       endif;

       // ----------OPEN FILE BEG--------------------------------
          if *in50;
             if NOT %open(gaorder1s);
                open gaorder1s;
             endif;
          endif;
          if *in51;
             if NOT %open(gaorder1i);
                open gaorder1i;
             endif;
          endif;
          if *in52;
             if NOT %open(gaorder1n);
                open gaorder1n;
             endif;
          endif;
          if *in53;
             if NOT %open(gaorder1#);
                open gaorder1#;
             endif;
          endif;
          if *in54;
             if NOT %open(gaorder1a);
                open gaorder1a;
             endif;
          endif;
          if *in55;
             if NOT %open(gaorder1l8);
                open gaorder1l8;
             endif;
          endif;
          if *in56;
             if NOT %open(gaorder1u);
                open gaorder1u;
             endif;
          endif;
          if *in57;
             if NOT %open(gaorder1h);
                open gaorder1h;
             endif;
          endif;
          if *in58;
             if NOT %open(gaorder1u);
                open gaorder1u;
             endif;
          endif;
          if *in59;
             if NOT %open(gaorder1l8);
                open gaorder1l8;
             endif;
          endif;
          // ----------OPEN FILE END----------------------------

          // ----------SETLL FILE BEG--------------------------------
          if *in50;
             setll (hfice : h_applid : hsrch_ssne)
                    gaorder1s;
          endif;
          if *in51;
             setll (hfice : h_applid : hsrch_sid) gaorder1i;
          endif;
          if *in52;
             setll (hfice : h_applid : hsrch_lsn :
                   hsrch_frn) gaorder1n;
          endif;
          if *in53;
             setll hsrch_ord gaorder1#;
          endif;
          if *in54;
             setll (hfice : h_applid : hsrch_dta5)
                    gaorder1a;
          endif;
          if *in55;
             setll (hfice : h_applid : hsrch_dta8)
                    gaorder1l8;
          endif;
          if *in56;
             setll (hfice : h_applid : hsrch_lsn :
                   hsrch_frn) gaorder1u;
          endif;
          if *in57;
             setll (hfice : h_applid) gaorder1h;
          endif;
          if *in58;
             setll (hfice : h_applid) gaorder1u;
          endif;
          if *in59;
             setll (hfice : h_applid : hsrch_tag)
                    gaorder1l8;
          endif;
          if NOT %equal;
          endif;
          // ----------SETLL FILE END----------------------------

          // ----------CHECK SSN BEG--------------------------------
          if *in50       = *on;
             reade (hfice : h_applid : hsrch_ssne) garec_s;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade (hfice : h_applid : hsrch_ssne) garec_s;
                *in97 = %eof;
                if *in97       = *off;
                   condition   = 'multiple ';
                   clear horder#;
                endif;
             endif;
          endif;
          // ----------CHECK SSN END----------------------------

          // ----------CHECK SID BEG--------------------------------
          if *in51       = *on;
             reade (hfice : h_applid : hsrch_sid) garec_i;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade (hfice : h_applid : hsrch_sid) garec_i;
                *in97 = %eof;
                if *in97       = *off;
                   condition   = 'multiple ';
                   clear horder#;
                endif;
             endif;
          endif;
          // ----------CHECK SID END----------------------------

          // ----------CHECK NAM BEG--------------------------------
          if *in52       = *on;
             dow 1 = 1;
                reade (hfice : h_applid) garec_n;
                if %eof(gaorder1N) or
                   %subst(tslastn:1:LENLN) <> hsrch_lsn or
                   (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
                    hsrch_frn <> *blanks);
                   condition = 'not-found';
                else;
                   condition = 'unique   ';
                   horder# = torder#;
                   reade (hfice : h_applid) garec_n;
                   if not %eof(gaorder1N) and
                      %subst(tslastn:1:LENLN) = hsrch_lsn or
                      (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
                       hsrch_frn <> *blanks);
                      condition = 'multiple ';
                      clear horder#;
                   endif;
                endif;
                leave;
             enddo;

          endif;
          // ----------CHECK NAM END----------------------------

          // ----------CHECK ORD BEG--------------------------------
          if *in53       = *on;
             reade(n) hsrch_ord garec_#;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             elseif hfice      <> tfice;
                //   Don't display order for another school
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade(n) hsrch_ord garec_#;
                *in97 = %eof;
                if (*in97      = *off or
                       troot_pmt# <> *blanks) and
                       hscrn_next <> 'PAY';
                   condition   = 'multiple ';
                   clear horder#;
                   if troot_pmt# <> *blanks;
                      alt_pmt#    = troot_pmt#;
                   endif;
                endif;
             endif;
          endif;
          // ----------CHECK ORD END----------------------------

          // ----------CHECK PLT BEG--------------------------------
          if *in54       = *on;
             reade (hfice : h_applid : hsrch_dta5) garec_a;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade (hfice : h_applid : hsrch_dta5) garec_a;
                *in97 = %eof;
                //  05/02/13 MRB updated this to only set alt permit # if multiple
                //               records are not found
                if *in97       = *off and
                       hscrn_next <> 'PAY';
                   condition   = 'multiple ';
                   clear horder#;
                elseif troot_pmt# <> *blanks and
                       hscrn_next <> 'PAY';
                   condition   = 'multiple ';
                   clear horder#;
                   alt_pmt#    = troot_pmt#;
                endif;
             endif;
          endif;
          // ----------CHECK PLT END----------------------------

          // ----------CHECK STK BEG--------------------------------
          if *in55       = *on;
             reade (hfice : h_applid : hsrch_dta8) garec_l8;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade (hfice : h_applid : hsrch_dta8) garec_l8;
                *in97 = %eof;
                //  05/02/13 MRB updated this to only set alt permit # if multiple
                //               records are not found
                if *in97       = *off and
                       hscrn_next <> 'PAY';
                   condition   = 'multiple ';
                   clear horder#;
                elseif troot_pmt# <> *blanks and
                       hscrn_next <> 'PAY';
                   condition   = 'multiple ';
                   clear horder#;
                   alt_pmt#    = troot_pmt#;
                endif;
             endif;
          endif;
          // ----------CHECK STK END----------------------------

          // ----------CHECK ULN BEG--------------------------------
          if *in56       = *on;
     c*    ppchk_56      tag
             //reade (hfice : h_applid) garec_u;
             //*in96 = %eof;
             //if *in96       = *on or
             //       %subst(tslastn:1:LENLN) <> hsrch_lsn or
             //       (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
             //        hsrch_frn <> *blanks);
             //   condition   = 'not-found';
                //  04/28/09 MRB added a check here to make sure the Fiscal year
                //               matches if it is set (for MS, MT, GT) this is to
                //               suppress prior year unpaid orders
             //elseif gfiscalyr  <> *blanks and
             //       gfiscalyr  <> tfiscalyb;
     c*                  goto      ppchk_56
             //else;
             //   condition   = 'unique   ';
             //   horder#     = torder#;
             //   reade (hfice : h_applid) garec_u;
             //   *in97 = %eof;
             //   if *in97       = *off and
             //          %subst(tslastn:1:LENLN) = hsrch_lsn or
             //          (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
             //           hsrch_frn <> *blanks);
             //      condition   = 'multiple ';
             //      clear horder#;
             //   endif;
             //endif;

             dow 1=1;
                reade (hfice : h_applid) garec_u;
                if %eof(gaorder1U) or
                   %subst(tslastn:1:LENLN) <> hsrch_lsn or
                   (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
                   hsrch_frn <> *blanks);
                   condition = 'not-found';
                elseif gfiscalyr <> *blanks and
                       gfiscalyr <> tfiscalyb;
                   iter;
                else;
                   condition = 'unique   ';
                   horder# = torder#;
                   reade (hfice : h_applid) garec_u;
                   if not %eof(gaorder1U) and
                      %subst(tslastn:1:LENLN) = hsrch_lsn or
                      (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
                      hsrch_frn <> *blanks);
                      condition = 'multiple ';
                      clear horder#;
                   endif;
                endif;
                leave;
             enddo;

          endif;
          // ----------CHECK ULN END----------------------------

          // ----------CHECK HTL BEG--------------------------------
          if *in57       = *on;
             condition   = 'multiple ';
             *in96       = *on;
          endif;
          // ----------CHECK HTL END----------------------------

          // ----------CHECK UPD BEG--------------------------------
          if *in58       = *on;
             //     ficapp_key    reade     garec_u                                96
             //                   if        *in96       = *on or
             //                             tdate       < cutoff
             //                   eval      condition   = 'not-found'
             //                   else
             //                   eval      condition   = 'unique   '
             //                   eval      horder#     = torder#
             //     ficapp_key    reade     garec_u                                97
             //                   if        *in97       = *off and
             //                             tdate      >= cutoff
             //   UNTILL WE HAVE LOGICAL SPECIFIC TO SHOW UNPAID, ALWAYS SET MULTIPLE
             condition   = 'multiple ';
             clear horder#;
             //                   endif
             //                   endif
          endif;
          // ----------CHECK UPD END----------------------------

          // ----------CHECK STK BEG--------------------------------
          if *in59       = *on;
             reade (hfice : h_applid : hsrch_tag) garec_l8;
             *in96 = %eof;
             if *in96       = *on;
                condition   = 'not-found';
             else;
                condition   = 'unique   ';
                horder#     = torder#;
                reade (hfice : h_applid : hsrch_tag) garec_l8;
                *in97 = %eof;
                //  05/02/13 MRB updated this to only set alt permit # if multiple
                //               records are not found
                if *in97       = *off and
                       hscrn_next <> 'PAY';
                   condition   = 'multiple ';
                   clear horder#;
                elseif troot_pmt# <> *blanks and
                       hscrn_next <> 'PAY';
                   condition   = 'multiple ';
                   clear horder#;
                   alt_pmt#    = troot_pmt#;
                endif;
             endif;
          endif;
          // ----------CHECK STK END----------------------------

       endsr;

        //***************************************************************
        //  $PP_CheckSU: Check Logical Files in Order to decide if
        //               we have 1 record, no records, or multiple
        //               records.
        //***************************************************************
       begsr $PP_CheckSU;

       select;
       // Check Student ID
       when *in51 = *on;
          exec sql select count(*) into :srch_count
             from gaorder1
             where tapplid = :h_applid
               and tstudnt_id = :hsrch_sid
               and tfice in (
                  select ffice from dvinstitl7
                   where fficegroup = :hsuperuser);

       if srch_count = 1;
             condition = 'unique   ';
             exec sql SELECT torder# into :horder#
                FROM gaorder1
                WHERE tapplid = :h_applid
                  and tstudnt_id = :hsrch_sid
                  and tfice IN (
                     select ffice from dvinstitl7
                      where fficegroup = :hsuperuser);
          elseif srch_count > 1;
             condition = 'multiple ';
          elseif srch_count = 0;
             condition = 'not-found';
          endif;

       // Check Name
       when *in52 = *on;
          lnLike = '%' + %trim(hsrch_lsn );
          lnLike = %xlate(' ':'%':lnLike);

          fnLike = '%' + %trim(hsrch_frn );
          fnLike = %xlate(' ':'%':fnLike);

          exec sql SELECT count(*) into :srch_count
             FROM gaorder1
             WHERE tapplid = :h_applid
               and tslastn like :lnLike
               and tsfrstn like :fnLike
               and tfice IN (
                  select ffice from dvinstitl7
                   where fficegroup = :hsuperuser);

          if srch_count = 1;
             condition = 'unique   ';
             exec sql SELECT torder# into :horder#
                FROM gaorder1
                WHERE tapplid = :h_applid
                  and tslastn like :lnLike
                  and tsfrstn like :fnLike
                  and tfice IN (
                     select ffice from dvinstitl7
                      where fficegroup = :hsuperuser);
          elseif srch_count > 1;
             condition = 'multiple ';
          elseif srch_count = 0;
             condition = 'not-found';
          endif;

       // Check Order #
       when *in53 = *on;
          exec sql SELECT count(*) into :srch_count
             FROM gaorder1
             WHERE tapplid = :h_applid
               and torder# = :hsrch_ord
               and tfice IN (
                  select ffice from dvinstitl7
                   where fficegroup = :hsuperuser);
          if srch_count = 1;
             condition = 'unique   ';
             exec sql SELECT torder# into :horder#
                FROM gaorder1
                WHERE tapplid = :h_applid
                  and torder# = :hsrch_ord
                  and tfice IN (
                     select ffice from dvinstitl7
                      where fficegroup = :hsuperuser);

          elseif srch_count > 1;
             condition = 'multiple ';
          else;
             condition = 'not-found';
          endif;

       // Check Plate
       when *in54 = *on;
          exec sql SELECT count(*) into :srch_count
             FROM gaorder1
             WHERE tapplid = :h_applid
               and tapp_data5 = :hsrch_dta5
               and tfice IN (
                  select ffice from dvinstitl7
                   where fficegroup = :hsuperuser);

          if srch_count = 1;
             condition = 'unique   ';
             exec sql SELECT torder# into :horder#
                FROM gaorder1
                WHERE tapplid = :h_applid
                  and tapp_data5 = :hsrch_dta5
                  and tfice IN (
                     select ffice from dvinstitl7
                      where fficegroup = :hsuperuser);
          elseif srch_count > 1;
             condition = 'multiple ';
          elseif srch_count = 0;
             condition = 'not-found';
          endif;

       // Check Permit
       when *in55 = *on;
          exec sql SELECT count(*) into :srch_count
             FROM gaorder1
             WHERE tapplid = :h_applid
               and tapp_data8 = :hsrch_dta8
               and tfice IN (
                  select ffice from dvinstitl7
                   where fficegroup = :hsuperuser);

          if srch_count = 1;
             condition = 'unique   ';
             exec sql SELECT torder# into :horder#
                FROM gaorder1
                WHERE tapplid = :h_applid
                  and tapp_data8 = :hsrch_dta8
                  and tfice IN (
                     select ffice from dvinstitl7
                      where fficegroup = :hsuperuser);
          elseif srch_count > 1;
             condition = 'multiple ';
          elseif srch_count = 0;
             condition = 'not-found';
          endif;

       endsl;

       endsr;

       // **************************************************************
       //    $PP_Row:    Write the Parking Permit ROWS to the Screen
       // **************************************************************
       begsr $PP_Row;

       row_count += 1;
       // TD-1 contains Order Number
       if tinuseby <> *blanks and tinuseby <> huserid;
          td_cell1 = '<td aria-labelledby="TH1">* +
                      <a href="javascript:inuseby(''' +
                      %trim(tinuseby) + ''')">' + torder# +
                     '<noscript>Disabled</noscript></a>*</td>';
       else;
          td_cell1 = '<td aria-labelledby="TH1 TD' + %char(row_count) + '1" +
                      id="TD' + %char(row_count) + '1">+
                      <a href="javascript:setsubmitORD( +
                      document.form1.ORDERNO, ''' + torder# +
                      ''')">' + torder# + '</a></td>';
       endif;

       // TD-2 Contains the Date and Time
       td_cell2 = '<td aria-labelledby="TH2 TD' + %char(row_count) +'2" +
                  id="TD' + %char(row_count) + '2">' +
                  %trim(dspTmStamp(tdate:ttime:itime_zone:'*WEB')) +
                  '</td>';
       clear td_cell3;

       // TD-4 contains the Parking Permit Type
       IF h_applid    = 'PP' or h_applid    = 'MS';
          if tqty        > 1;
             td_cell4    = '<td aria-labelledby="TH3 TD' + %char(row_count) +
                 '3" id="TD' + %char(row_count) + '3">' +
                 %trim(%char(tqty)) + ' ' +
                 %trim(tapp_data9) + '</td>';
          else;
             td_cell4    = '<td aria-labelledby="TH3 TD' + %char(row_count) +
                 '3" id="TD' + %char(row_count) + '3">' +
                 %trim(tapp_data9) + '</td>';
          endif;
       ELSE;
          exsr get_option;
          if tqty        > 1;
             td_cell4    = '<td aria-labelledby="TH3 TD' + %char(row_count) +
                 '3" id="TD' + %char(row_count) + '3">' +
                 %trim(%char(tqty)) + ' ' +
                 %trim(ga_rpt2dsc) + '</td>';
          else;
             td_cell4    = '<td aria-labelledby="TH3 TD' + %char(row_count) +
                 '3" id="TD' + %char(row_count) + '3">' +
                 %trim(ga_rpt2dsc) + '</td>';
          endif;
       ENDIF;

       // TD-5 contains the Parking Permit No
       td_cell5    = '<td aria-labelledby="TH4 TD' + %char(row_count) + '4"' +
           'id="TD' + %char(row_count) + '4">' +
           %trim(tapp_data8) + '</td>';

       IF h_applid    = 'MS';
          if trecid      = 'VE';
             // TD-6 contains the Vehicle Plate
             td_cell6    = '<td aria-labelledby="TH5 TD' + %char(row_count) +
                 '5" id="TD' + %char(row_count) + '5">&nbsp;' +
                 %trim(tapp_data5) + '</td>';
          else;
       // TD-6 does NOT contain the Vehicle Plate
       td_cell6    = '<td aria-labelledby="TH5 TD' + %char(row_count) +
                     '5" id="TD' + %char(row_count) + '5">&nbsp;</td>';
       endif;
       ELSE;
       // TD-6 contains Current Status
       if hscrn_type  = 'PAY';
             byte30 = GAORD_paystat(orderds);
       else;
             byte30 = GAORD_orderstat(orderds:huserid);
       endif;
       td_cell6    = '<td aria-labelledby="TH5 TD' + %char(row_count) +
                     '5" id="TD' + %char(row_count) + '5">' + %trim(byte30) +
                     '</td>';
       ENDIF;

       IF h_applid    = 'MS';
          // TD-7 contains Current Status
          if hscrn_type  = 'PAY';
             byte30 = GAORD_paystat(orderds);
          else;
             byte30 = GAORD_orderstat(orderds:huserid);
          endif;
          td_cell7 = '<td aria-labelledby="TH6 TD' + %char(row_count) +
                     '6" id="TD' + %char(row_count) + '6">' + %trim(byte30) +
                     '</td>';
       ELSE;
          // TD-7 contains the Name of Student
          clear wkfullname;
          wkfullname  = %trim(tsfrstn) + ' ' +
              %trim(tslastn);
          if tpin_user  <> *blanks and
                 hviewonly   = #false;
             td_cell7    = '<td aria-labelledby="TH6 TD' + %char(row_count) +
                 '6" id="TD' + %char(row_count) + '6"><a href="javascript:' +
                 'change(document.form1.KEY,''' + tpin_user +
                 ''');setsubmit(document.form1.ACTION,''RES'');">' +
                 %trim(wkfullname) + '&nbsp;</a></td>';
          else;
             td_cell7    = '<td aria-labelledby="TH6 TD' + %char(row_count) +
                 '6" id="TD' + %char(row_count) + '6">' +
                 %trim(wkfullname) + '&nbsp;</td>';
          endif;
       ENDIF;

       IF h_applid    = 'MS';
          // TD-8 contains the Name of Student
          clear wkfullname;
          wkfullname  = %trim(tsfrstn) + ' ' +
              %trim(tslastn);
          if tpin_user  <> *blanks and
                 hviewonly   = #false;
             td_cell8    = '<td aria-labelledby="TH7 TD' + %char(row_count) +
                 '7" id="TD' + %char(row_count) + '7"><a href="javascript:' +
                 'change(document.form1.KEY,''' +
                 tpin_user + ''');setsubmit(' +
                 'document.form1.ACTION,''RES'');">' +
                 %trim(wkfullname) + '&nbsp;</a></td>';
          else;
             td_cell8    = '<td aria-labelledby="TH7 TD' + %char(row_count) +
                 '7" id="TD' + %char(row_count) + '7">' +
                 %trim(wkfullname) + '&nbsp;</td>';
          endif;
       ELSE;
          // TD-8 contains the ID # of Student
          clear wk_idnum;
          if tstudnt_id <> *blanks;
             wk_idnum    = tstudnt_id;
          elseif tssn_enc   <> *blanks;
             clear #ED_dqin;
             clear #ED_dqout;
             #ED_doss_i  = '4';
             #ED_fice_i  = tfice;
             #ED_ess_i   = tssn_enc;
             exsr $get_ED;
             ssn_last4   = #ED_uss_o;

             wk_idnum    = ' ...' +
                 ssn_last4;
          endif;
          td_cell8    = '<td aria-labelledby="TH7 TD' + %char(row_count) +
              '7" id="TD' + %char(row_count) + '7">' +
              %trim(wk_idnum) + '&nbsp;</td>';
       ENDIF;

       tr_cell1    = '<tr valign=top>';

       //  Build the actual ROW - tr_cell1 + tdcell1 - 7
       row  = %trim(tr_cell1) + %trim(td_cell1) + %trim(td_cell2) +
              %trim(td_cell3) + %trim(td_cell4) + %trim(td_cell5) +
              %trim(td_cell6) + %trim(td_cell7) + %trim(td_cell8) +
              '</tr>' + linefeed;

          // ---------------------------------------------------------------
          //     add the row to the buffer

          BufOut = %trimr(BufOut) + row;

          bytesize = bytesize +
              %len(%trimr(row)) + 1;
          exsr checkbufr;

       endsr;

       // **************************************************************
       //    $PP_Search:  Search Logical Files for Parking Permits
       //                 This routine is a BIG SELECT statement
       //                 that depends on the indaictor that was turned
       //                 on in the $PP_CHECK Routine.
       //
       //   *IN50 = SSN Logical
       //   *IN51 = SID Logical
       //   *IN52 = NAM Logical
       //   *IN53 = ORD Logical
       //   *IN54 = PLT Logical
       //   *IN55 = STK Logical
       //   *IN56 = ULN Logical - UnPaid by LastName
       //   *IN57 = HTL Logical
       //   *IN58 = UNP Logical GAORDER1U - All Unpaid
       //   *IN59 = TAG Logicall8
       // **************************************************************
       begsr $PP_Search;

       if hsuperuser <> *blanks and h_applid = 'PP' and
          (*in51 = *on or *in52 = *on or *in53 = *on or
           *in54 = *on or *in55 = *on);
          exsr $PP_SearchSU;
          leavesr;
       endif;

       // ----------OPEN FILE BEG--------------------------------
          if *in50;
             if NOT %open(gaorder1s);
                open gaorder1s;
             endif;
          endif;
          if *in51;
             if NOT %open(gaorder1i);
                open gaorder1i;
             endif;
          endif;
          if *in52;
             if NOT %open(gaorder1n);
                open gaorder1n;
             endif;
          endif;
          if *in53;
             if NOT %open(gaorder1#);
                open gaorder1#;
             endif;
          endif;
          if *in54;
             if NOT %open(gaorder1a);
                open gaorder1a;
             endif;
          endif;
          if *in55;
             if NOT %open(gaorder1l8);
                open gaorder1l8;
             endif;
          endif;
          if *in56;
             if NOT %open(gaorder1u);
                open gaorder1u;
             endif;
          endif;
          if *in57;
             if NOT %open(gaorder1h);
                open gaorder1h;
             endif;
          endif;
          if *in58;
             if NOT %open(gaorder1u);
                open gaorder1u;
             endif;
          endif;
          if *in59;
             if NOT %open(gaorder1l8);
                open gaorder1l8;
             endif;
          endif;
          // ----------OPEN FILE END----------------------------

          //   Table Header
          if h_applid    = 'MS';
             element_fl  = '2145';
          else;
             element_fl  = '2141';
          endif;
          element_wd  = 'MSG';
          element_p1  = ' ';
          exsr wrtpanlmsg;

          // ----------SETLL FILE BEG--------------------------------
          if *in50;
             setll (hfice : h_applid : hsrch_ssne)
                    gaorder1s;
          endif;
          if *in51;
             setll (hfice : h_applid : hsrch_sid) gaorder1i;
          endif;
          if *in52;
             setll (hfice : h_applid : hsrch_lsn :
                   hsrch_frn) gaorder1n;
          endif;
          if *in53;
             setll hsrch_ord gaorder1#;
          endif;
          if *in54;
             setll (hfice : h_applid : hsrch_dta5)
                    gaorder1a;
          endif;
          if *in55;
             setll (hfice : h_applid : hsrch_dta8)
                    gaorder1l8;
          endif;
          if *in56;
             setll (hfice : h_applid : hsrch_lsn :
                   hsrch_frn) gaorder1u;
          endif;
          if *in57;
             setll (hfice : h_applid) gaorder1h;
          endif;
          if *in58;
             setll (hfice : h_applid) gaorder1u;
          endif;
          if *in59;
             setll (hfice : h_applid : hsrch_tag)
                    gaorder1l8;
          endif;
          if NOT %equal;
          endif;
          // ----------SETLL FILE END----------------------------

          dow *in96 <> *on;
             if *in50       = *off and
                    *in51       = *off and
                    *in52       = *off and
                    *in53       = *off and
                    *in54       = *off and
                    *in55       = *off and
                    *in56       = *off and
                    *in57       = *off and
                    *in58       = *off and
                    *in59       = *off;
                leave;
             endif;

             // ----------CHECK SSN BEG--------------------------------
             if *in50       = *on;
                reade (hfice : h_applid : hsrch_ssne) garec_s;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK SSN END----------------------------

             // ----------CHECK SID BEG--------------------------------
             if *in51       = *on;
                reade (hfice : h_applid : hsrch_sid) garec_i;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK SID END----------------------------

             // ----------CHECK NAM BEG--------------------------------
             if *in52       = *on;
                reade (hfice : h_applid) garec_n;
                *in96 = %eof;
                if *in96       = *on or
                       %subst(tslastn:1:LENLN) <> hsrch_lsn or
                       (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
                        hsrch_frn <> *blanks);
                   leave;
                endif;
             endif;
             // ----------CHECK NAM END----------------------------

             // ----------CHECK ORD BEG--------------------------------
             if *in53       = *on;
                reade hsrch_ord garec_#;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK ORD END----------------------------

             // ----------CHECK PLT BEG--------------------------------
             if *in54       = *on;
                reade (hfice : h_applid : hsrch_dta5) garec_a;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK PLT END----------------------------

             // ----------CHECK STK BEG--------------------------------
             if *in55       = *on;
                reade (hfice : h_applid : hsrch_dta8) garec_l8;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK STK END----------------------------

             // ----------CHECK ULN BEG--------------------------------
             if *in56       = *on;
                reade (hfice : h_applid) garec_u;
                *in96 = %eof;
                if *in96       = *on or
                       %subst(tslastn:1:LENLN) <> hsrch_lsn or
                       (%subst(tsfrstn:1:LENFN) <> hsrch_frn and
                        hsrch_frn <> *blanks);
                   leave;
                   //  04/28/09 MRB added a check here to make sure the Fiscal year
                   //               matches if it is set (for MS, MT, GT) this is to
                   //               suppress prior year unpaid orders
                elseif gfiscalyr  <> *blanks and
                       gfiscalyr  <> tfiscalyb;
                   iter;
                endif;
             endif;
             // ----------CHECK ULN END----------------------------

             // ----------CHECK HTL BEG--------------------------------
             if *in57       = *on;
                reade (hfice : h_applid) garec_h;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK HTL END----------------------------

             // ----------CHECK UPD BEG--------------------------------
             if *in58       = *on;
                reade (hfice : h_applid) garec_u;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                   //                   elseif    torder#    <> troot_ord# or
                   //                             tdate       < cutoff
                   //  06/15/09 MRB Allowed non root orders to display in case
                   //               root is canceled but other parts of the order
                   //               are unpaid
                elseif tdate       < cutoff;
                   iter;
                endif;
             endif;
             // ----------CHECK UPD END----------------------------

             // ----------CHECK STK BEG--------------------------------
             if *in59       = *on;
                reade (hfice : h_applid : hsrch_tag) garec_l8;
                *in96 = %eof;
                if *in96       = *on;
                   leave;
                endif;
             endif;
             // ----------CHECK STK END----------------------------

             // ----------WAIT TO WRITE OUT ROW IF WE HAVE A ALT PMT #
             if alt_pmt#    = *blanks;
                exsr $PP_Row;
             endif;
          enddo;

          //  If alt_pmt# has a value in it, we need to show these rows only
          if alt_pmt#   <> *blanks;
             if NOT %open(gaorder1M);
                open gaorder1m;
             endif;

             setll (hfice : alt_pmt#) garec_M;
             reade (hfice : alt_pmt#) garec_M;
             dow not %eof;
                exsr $PP_Row;

                reade (hfice : alt_pmt#) garec_M;
             enddo;
          endif;

          //  Close Table
          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '<p>';

       endsr;



       //*******************************************************************
       //  $PP_SearchSU:  Search Logical Files for Parking Permits
        //                 This routine is a BIG SELECT statement
        //  (SUPERUSER)    that depends on the indaictor that was turned
        //                 on in the $PP_CHECKSU Routine.
        //
        //  *IN51 = SID Logical
        //  *IN52 = NAM Logical
        //  *IN53 = ORD Logical
        //  *IN54 = PLT Logical
        //  *IN55 = STK Logical
       //*******************************************************************
       begsr $PP_SearchSU;

       // Put out the table header
       element_fl = '2141';
       element_wd = 'MSG';
       element_p1 = ' ';
       exsr wrtpanlmsg;

       select;
       when *in51 = *on;
          exec sql declare SID_cur cursor for
             SELECT * from gaorder1
              WHERE tapplid = :h_applid
                and tstudnt_id = :hsrch_sid
                and tfice IN (
                   select ffice from dvinstitl7
                    where fficegroup = :hsuperuser);

          exec sql open SID_cur;

          dow sqlcod = 0;
             exec sql fetch SID_cur for 50 rows into :order_ds;
             num_rows = sqler3;

             for row_idx = 1 to num_rows;
                orderds = order_ds(row_idx);
                exsr $PP_Row;
             endfor;

             if sqler5 > 100;
                leave;
             endif;
          enddo;

          exec sql close SID_cur;

       when *in52 = *on;
          exec sql declare NAM_cur cursor for
             SELECT * from gaorder1
              WHERE tapplid = :h_applid
               and tslastn like :lnLike
               and tsfrstn like :fnLike
               and tfice IN (
                  select ffice from dvinstitl7
                   where fficegroup = :hsuperuser)
              ORDER BY tslastn,
                       tsfrstn;

          exec sql open NAM_cur;

          dow sqlcod = 0;
             exec sql fetch NAM_cur for 50 rows into :order_ds;
             num_rows = sqler3;

             for row_idx = 1 to num_rows;
                orderds = order_ds(row_idx);
                exsr $PP_Row;
             endfor;

             if sqler5 > 100;
                leave;
             endif;
          enddo;

          exec sql close NAM_cur;

       when *in53 = *on;
          exec sql declare ORD_cur cursor for
             SELECT * from gaorder1
              WHERE tapplid = :h_applid
               and torder# = :hsrch_ord
               and tfice IN (
                  select ffice from dvinstitl7
                   where fficegroup = :hsuperuser);

          exec sql open ORD_cur;

          dow sqlcod = 0;
             exec sql fetch ORD_cur for 50 rows into :order_ds;
             num_rows = sqler3;

             for row_idx = 1 to num_rows;
                orderds = order_ds(row_idx);
                exsr $PP_Row;
             endfor;

             if sqler5 > 100;
                leave;
             endif;
          enddo;

          exec sql close ORD_cur;

       when *in54 = *on;
          exec sql declare PLT_cur cursor for
             SELECT * from gaorder1
              WHERE tapplid = :h_applid
                  and tapp_data5 = :hsrch_dta5
                  and tfice IN (
                     select ffice from dvinstitl7
                      where fficegroup = :hsuperuser);

          exec sql open PLT_cur;

          dow sqlcod = 0;
             exec sql fetch PLT_cur for 50 rows into :order_ds;
             num_rows = sqler3;

             for row_idx = 1 to num_rows;
                orderds = order_ds(row_idx);
                exsr $PP_Row;
             endfor;

             if sqler5 > 100;
                leave;
             endif;
          enddo;

          exec sql close PLT_cur;

       when *in55 = *on;
          exec sql declare PMT_cur cursor for
             SELECT * from gaorder1
              WHERE tapplid = :h_applid
               and tapp_data8 = :hsrch_dta8
               and tfice IN (
                  select ffice from dvinstitl7
                   where fficegroup = :hsuperuser);

          exec sql open PMT_cur;

          dow sqlcod = 0;
             exec sql fetch PMT_cur for 50 rows into :order_ds;
             num_rows = sqler3;

             for row_idx = 1 to num_rows;
                orderds = order_ds(row_idx);
                exsr $PP_Row;
             endfor;

             if sqler5 > 100;
                leave;
             endif;
          enddo;

          exec sql close PMT_cur;

       endsl;

       bufout = %trim(bufout) + '</table>' + linefeed;
       bufout = %trim(bufout) + '<p>' + linefeed;

       endsr;

       // *******************************************************************
       //    bld_exp_dt:  Routine to Get the next N number of days
       //                 date8 is initlized before routine is called
       // *******************************************************************
       begsr bld_exp_dt;

          if ga_tempdys  = 0;
             pk_3p0      = -1;
          else;
             pk_3p0 = ga_tempdys;
          endif;

          isoyyyy = adate8yyyy;
          isomm = adate8mm;
          isodd = adate8dd;
          iso_date = %date(isods);
          iso_date = iso_date + %days(pk_3p0);
          isods = %char(iso_date);
          exp_date = %dec(iso_date);

       endsr;

       // **************************************************************
       //    Bld_Row:   Loop through TD_ARY, and build an HTML ROW
       //               Place ROW in Buffer - Check Buffer Overflow
       //
       //               Formatting Options
       //               BOLD ONLY - B
       //               BOLD LEFT - BL
       //               BOLD RGHT - BR
       //               BOLD CENT - BC
       // **************************************************************
       begsr Bld_Row;

          clear row;
          row         = '<tr>';

          for td_i2 = 1 To td_i;
             td_line = td_ary(td_i2);

             //  Align Left
             idx         = %scan('L':td_frmt:1);
             if idx         > 0;
                row         = %trim(row) +
                    '<td align=left>';
             endif;

             //  Align Right
             idx         = %scan('R':td_frmt:1);
             if idx         > 0;
                row         = %trim(row) +
                    '<td align=right>';
             endif;

             //  Align Center
             idx         = %scan('C':td_frmt:1);
             if idx         > 0;
                row         = %trim(row) +
                    '<td align=center>';
             endif;

             //  Align NONE
             idx         = %scan('N':td_frmt:1);
             if idx         > 0;
                row         = %trim(row) + '<td>';
             endif;

             //  BOLD Text
             idx         = %scan('B':td_frmt:1);
             if idx         > 0;
                row         = %trim(row) + '<b>' +
                    %trim(td_data) + '</b></td>';
             else;
                row         = %trim(row) +
                    %trim(td_data) + '</td>';
             endif;

          endfor;

          row         = %trim(row) + '</tr>' +
                            linefeed;

          BufOut = %trimr(BufOut) + row;
          bytesize    = bytesize +
                            %len(%trimr(row)) + 1;
          exsr checkbufr;

          clear td_ary;
          clear td_i;

       endsr;

       //***********************************************************************
       // CHECKAUTH:   Get DVCLIENTF2 to get the authority
       //***********************************************************************
       begsr checkauth;

       if not %open(dvclientf2);
          open dvclientf2;
       endif;

       chain(n) (huserid) authority;

       endsr;

       // ************************************************************************
       //     CHECKBUFR:   Check to see if buffer is full and if so, send it
       // ***********************************************************************
       begsr checkbufr;

          if Bytesize   >= BufrTrip;
             exsr sendbufr;
          endif;

       endsr;

       // **************************************************************
       //     CheckSign:   Check the SIGNONKEY value vs. the dvclientf1
       // **************************************************************
       begsr checksign;

          if huserid     = *blanks;
             %subst(condition:1:8) = 'bad-sign';
             if ccntry = '   ';
                ccntry = 'USA';
             endif;
             leavesr;
          endif;

          chain huserid dvclientf1;
          *in90 = not %found;
          if *in90      = *on;
             %subst(csignonkey:1:10) = huserid;
             %subst(csignonkey:11:2) = '--';
          endif;

          //   if they are not the same and the csignonkey is blank, then
          //     the user was inactive for more than x minutes so give a
          //     different message for this than for a mismatch.

          if hsignonkey <> csignonkey and
                 csignonkey  = *blanks;
             ei = ei + 1;
             %subst(errs(ei):1:5) = '#7802';
             %subst(condition:1:8) = 'bad-sign';
             unlock dvclientf1;
             if ccntry = '   ';
                ccntry = 'USA';
             endif;
             leavesr;
          endif;

          //   if they are not the same and the csignonkey is not blank,
          //     then something else is going on.  Either the user has backed
          //     up into a prior session or someone else is trying to get on.

          if hsignonkey <> csignonkey;
             %subst(condition:1:8) = 'bad-sign';
             unlock dvclientf1;

             ei          = ei + 1;
             %subst(errs(ei):1:5) = '#7813';
             ei = ei + 1;
             %subst(errs(ei):1:5) = '#7807';
             ei = ei + 1;
             %subst(errs(ei):1:5) = '#7837';

             lgprogram   = pgm_name;
             lgerrno     = '88';
             lguserid    = huserid;
             lgmessag = %trimr('SignKey') + ' ' +
                 'Failure';
             lgmessag = %trimr(lgmessag) + '    ' +
                 'HKey=';
             lgmessag = %trimr(lgmessag) + hsignonkey;
             lgmessag = %trimr(lgmessag) + '    ' +
                 'CKey=';
             lgmessag = %trimr(lgmessag) + csignonkey;
             %subst(lgmessag:61:20) = CurRmtAddr;
             lgrmtaddr = CurRmtAddr;

             dvlogerror(lgprogram : lgerrno : lguserid :
                   lgmessag : lgrmtaddr : lgemaddr);

          else;

             clastactd   = cycle_date;
             clastactt   = cycle_time;


             exsr checkauth;

             // FICE switching not allowed for normal registrars
             select;
             when csuperuser <> *blanks and origin <> 'CLLC';
                if h_action = 'NUF' and hnufice <> cfreefice;
                   cfreefice  = hnufice;
                   cdel_duns  = 'F00' + hnufice;
                   cdel_dunss = '1';
                   crcv_dunss = '23456789';
                   hfice      = hnufice;
                endif;

             when origin = 'CLLC' or cau_grp_id = 'SAL';
                if (hnufice <> *blanks and h_action = 'NUF') or
                   (hscrn_type = 'MNU' and h_action = *blanks);
                   work_fice = hnufice;
                else;
                   work_fice = hfice;
                   if hfice = *blanks;
                      work_fice = cfreefice;
                   endif;
                endif;
                exsr check_fice;

                if (hnufice <> *blanks and h_action = 'NUF') or
                   (hscrn_type = 'MNU' and h_action = *blanks);
                   hfice     = hnufice;
                   cfreefice = hnufice;
                   cdel_duns  = 'F00' + hnufice;
                   cdel_dunss = '1';
                   crcv_dunss = '23456789';
                endif;
             endsl;

             hsuperuser = csuperuser;

             update client;

          endif;

          if ccntry      = '   ';
             ccntry      = 'USA';
          endif;

       endsr;

       //**********************************************************************
       //    Check_FICE:  Chain to the instition DBS to retrieve the
       //                 ichargeXX value. then verify the group id to
       //                 determine if that fice can be switched to
       //*********************************************************************
       begsr check_fice;

       if not %open(dvinstitf1);
          open dvinstitf1;
       endif;

       chain (work_fice) instrec;
       if not %found(dvinstitf1);
          ei += 1;
          errs(ei) = work_fice + ' is an invalid fice.';
          leavesr;
       endif;

       select;
       when (cau_grp_id = 'SAL' or
             (cau_grp_id = 'CCS' and (h_action   <> 'MSR' and
                                      hscrn_type <> 'MSR'))) and
            work_fice <> 'PPMRKT';
          if ichargece = 'Y' or ichargedp = 'Y' or
             ichargepp = 'Y' or ichargems = 'Y';
             ei += 1;
             errs(ei) = work_fice + ' is live, ' +
                        'cannot access this fice';

             work_fice = 'SALES1';
          endif;

       when csuperuser <> ' ';
       other;
       endsl;

       hnufice = work_fice;

       endsr;

       //**********************************************************************
       //  Check_Sha: Routine to check the SHA1
       //**********************************************************************
       begsr check_sha;

       clear sha_value;

       sha_value = %trim(hfice);


       if hsrch_dta5 = *blanks and hsrch_dta8 = *blanks;
          // Neither permit or plate not passed so cannot process sha hash.
          // dta5 = Plate, dta8 = Permit #
          leavesr;
       elseif hsrch_dta8 <> *blanks;
          sha_value = %trim(sha_value) + %trim(hsrch_dta8);
       elseif hsrch_dta5 <> *blanks;
          sha_value = %trim(sha_value) + %trim(hsrch_dta5);
       endif;

       // Create SHA value on Order # and write to Screen
       sha_salt  = %trim(isha_salt);
       sha_val   = %trim(sha_value);
       sha_bytes = sha_hashSha1(sha_val:sha_salt);
       sha_hash  = sha_bytes;

       if hsha_hash = *blanks;
          sha_valid = #false;
          condition = 'NOT_PRESENT';
       elseif hsha_hash <> sha_hash;
          sha_valid = #false;
          condition = 'NOT_VALID';
       else;
          sha_valid = #true;
       endif;

       endsr;


       // ************************************************************************
       //     CHK_4_SUBA:  Check/Set Flag if Sub Accounts Exists for Address
       // ***********************************************************************
       begsr chk_4_suba;

          subs_exist  = #FALSE;

          if rsubacct    = '  ';
             if not %open(gam_res1a);
                open gam_res1a;
             endif;

             setll (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt)
                    resrec_1a;
             *in90 = not %found;
             dow *in90 <> *on;
                reade(n) (hfice : rstr_dir : rstr_name :
                      rstr_hnum : rstr_prequ : rstr_type :
                      rstr_postD : rstr_postQ : rstr_apt)
                       resrec_1a;
                *in95 = %eof;
                if *in95;
                   leave;
                endif;
                if wsubacct    = *blanks;
                   iter;
                endif;
                subs_exist  = #TRUE;
                leave;
             enddo;
          else;
             subs_exist  = #TRUE;
          endif;

       endsr;

       // ************************************************************************
       //     CHK_4_SUB2:  Check/Set Flag if Sub Accounts Exists for Address
       // ***********************************************************************
       begsr chk_4_sub2;

          subs_exist  = #FALSE;

          if rsubacct    = '  ';
             if not %open(gam_res2a);
                open gam_res2a;
             endif;

             setll (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt)
                    resrec_2a;
             *in90 = not %found;
             dow *in90 <> *on;
                reade (hfice : rstr_dir : rstr_name :
                      rstr_hnum : rstr_prequ : rstr_type :
                      rstr_postD : rstr_postQ : rstr_apt)
                       resrec_2a;
                *in95 = %eof;
                if *in95;
                   leave;
                endif;
                if wsubacct    = *blanks;
                   iter;
                endif;
                subs_exist  = #TRUE;
                leave;
             enddo;
          else;
             subs_exist  = #TRUE;
          endif;

       endsr;

       // **************************************************************
       //    DO_A_MSG2:  Process a (((MSG)) in the htmlstmt
       //
       //    This routine gets messages that are inline in html
       //    statements in compile time arrays.  We use WrtPanlGet to
       //    retrieve all messages and do substitutions.
       //    This means all messages must be in the element_ds before
       //    this routine is executed.
       //
       //    ZGETMSG will retrieve the actual message and will look at
       //    three fields in the process:  element_mp, msg_defalt,
       //    and imsgprefix
       // **************************************************************
       begsr do_a_msg2;

          element_md = html_msgs;
          exsr WrtPanlGet;

          byte4 = msg_level1;
          if byte4       = '*OFF';
             clear msg_text;
          elseif byte4       = '*ON ';
          endif;

          BufOut = %trimr(BufOut) + msg_text;
          BufOut = %trimr(BufOut) + linefeed;
          nbytes      = 1 + %len(%trimr(msg_text));
          ByteSize += nbytes;

          exsr sendbufr;

       endsr;

       // **************************************************************
       //    Do_ChkVeh:     Scan all vehicles at resident address and
       //                   turn on flag if any are registered
       // **************************************************************
       begsr do_chkveh;

          have_vehs   = #FALSE;


          //     Use the Resident address to check for registered vehicles

          if not %open(gam_veh1);
             open gam_veh1;
          endif;

          setll (hfice : wstr_dir : wstr_name :
                wstr_hnum : wstr_prequ : wstr_type :
                wstr_postD : wstr_postQ : wstr_apt :
                wsubacct) ga_vehrec;
          *in90 = not %found;
          dow *in90 <> *on;
             reade (hfice : wstr_dir : wstr_name :
                   wstr_hnum : wstr_prequ : wstr_type :
                   wstr_postD : wstr_postQ : wstr_apt :
                   wsubacct) ga_vehrec;
             *in95 = %eof;
             if *in95;
                leave;
             endif;

             if vlastordr# <> *blanks;

                have_vehs   = #TRUE;
                leave;
             endif;
          enddo;

       endsr;

       // **************************************************************
       //    Do_FedEx:    Get the FedEx shipping rate for OTC order
       // **************************************************************
       begsr do_fedex;

          //    Lookup the shipping option

          wrk_numpmt  = cvt2num(%trim(hnumpmits));

          idx         = 1;
          if wrk_numpmt <= 50;
             byte5       = hship + '50';
          elseif wrk_numpmt <= 150;
             byte5       = hship + '150';
          elseif wrk_numpmt <= 300;
             byte5       = hship + '300';
          elseif wrk_numpmt <= 500;
             byte5       = hship + '500';
          else;
             byte5       = hship + '1000';
          endif;

          idx         = %lookup(byte5:shiparyk);
          if idx         = 0;
             ei += 1;
             errs(ei)    = 'Could not Find Shipping +
                                Option';
             condition   = 'SHIP NF';
             leavesr;
          else;
             ship_line   = shipary(idx);
          endif;


       // Calculate Shipping Weight
       // The postage weights have been moved to formid1 database

       if not %open(formid1);
          open formid1;
       endif;
       chain (ga_formid) formidrec;
       if %found(formid1);
          weight = mfrm_wght * wrk_numpmt;

          // 08/18/09 MRB For ground, max weight of 150 lbs
          // 07/06/12 MRB For envelopes, max weight of .5 lbs
          if weight > .5 and ship_pack = 'ENV';
             weight = .5;
          elseif weight > 150;
             weight = 150;
          elseif weight = 0;
             weight = .1;
          endif;

       else;
          // could not find the form type, send error
          ei += 1;
          errs(ei)  = 'Error locating form ' +
                      'weight with form id: ' + ga_formid;
       endif;


       //    Set up Default Options

          #AB_func    = 'RAT';
          #AB_cpny    = 'F';
          #AB_srvc    = hship;
          #AB_rt_fic  = 'CREDNT';

          //    Delivery Options

          #AB_rt_2st  = hdel_state;
          #AB_rt_2zc  = hdel_zip;
          #AB_rt_2cc  = 'US';
          #AB_rt_pck  = ship_pack;
          #AB_rt_wgt  = %editc(weight:'3');
          if weight      < 1;
             #AB_rt_wgt  = '0' + %trim(#AB_rt_wgt);
          endif;
          #AB_rt_lgt  = ship_len;
          #AB_rt_hgt  = ship_hght;
          #AB_rt_wdt  = ship_wdth;

          exsr $get_AIRB2;

          //    Did request return in error?

          if #AB_rc      = '9';
             ei += 1;
             errs(ei)    = 'Error getting shipping +
                                cost.';
             condition   = 'SHIP NF';
             leavesr;
          else;
             //    COST IS RETURNED AS #AB_cost

             //    For Ground, Charge is Net Cost + $13 fee to cover weekly
             //    weekly pickup fees (there is no discount)
             if hship       = 'G';
                otc_ship    = #AB_cost + 13;


                //    For all other shipping options, we charge 90% of the base
                //    charge plus all fees (we keep most of our discount)
             else;
                otc_ship    = (#AB_base$ * .9) +
                                  #AB_surc$;
             endif;
          endif;


       endsr;

       // **************************************************************
       //    Do_GAOPT:    Display the GAOPT1 Database description in
       //                 the CTDATA, the_recid, and the
       //                 the_value must be set as well.
       // **************************************************************
       begsr Do_GAOPT;

          clear byte160;
          clear byte300;

          select;
             when byte3 = 'GP ';
                the_value = hproduct;
             when byte3 = 'GS ';
                the_value = hship;
             other;
                the_value = ' ';
          endsl;

          the_recid   = %subst(byte3:1:2);

          if NOT %open(gaoption1);
             open gaoption1;
          endif;

          chain (hfice : h_applid : the_recid : husrtype :
                the_value) ga_parms;
          *in90 = not %found;
          if *in90       = *on;
             clear ga_text;
          endif;

          if ga_text     = *blanks;
             %subst(byte160:1:11) = 'Not Defined';
          else;
             byte160 = ga_text;
          endif;

          // Check for secondary products
          if (tsecprods <> *blanks and the_recid = 'GP');
             for i4 = 1 To 24;
                byte1 = %subst(tsecprods:i4:1);
                if (byte1 = *blanks);
                   leave;
                endif;

                chain (hfice:h_applid:the_recid:husrtype:byte1)
                   ga_parms secProdOptionDs;
                if %found;
                   byte160 = %trim(byte160) + '<br>&nbsp;' +
                             %trim(secProdOptionDs.ga_text);
                endif;
             endfor;
          endif;

          if h_applid = 'DP' and the_recid = 'GS' and
             (ga_es_type = 'PU' or ga_es_type = 'EP');
             byte50 = '<br>&nbsp;&nbsp;Pickup By: ' + %trim(tapp_dataA);
          else;
             clear byte50;
          endif;

       //    Add the quantity for GP

          if ga_recid    = 'GP' and
                 tqty        > 1;
             byte160     = %trim(%char(tqty)) +
                               ' ' + %trim(byte160);
          endif;

          byte300 = %trim(byte160) + %trim(byte50);

          BufOut = %trimr(BufOut) + '&nbsp;';
          BufOut = %trimr(BufOut) + byte300;
          ByteSize += 310;
          exsr checkBufr;

       endsr;

       // **************************************************************
       //    Do_InitOTC   Initalize delivery address screen for OTC order
       //                 Also init rush and shipping options
       // **************************************************************
       begsr do_initOTC;

          if not %open(dvinstitl4);
             open DVINSTITL4;
          endif;

          chain(n) (hfice : otc_code) contact;

          if not %found;
             //   Use client address
             if cfrstname  <> *blanks or
                    cmidlname  <> *blanks;
                NCatLen = %len(%trimr(cfrstname)) + %len(
                    cmidlname) + 1;
                if NCatLen < %len(hdel_attn);
                   %subst(hdel_attn:1:NCatLen) = %trimr(
                       cfrstname) + ' ' + cmidlname;
                else;
                   hdel_attn = %trimr(cfrstname) + ' ' +
                       cmidlname;
                endif;
                hdel_attn = %trimr(hdel_attn) + ' ' +
                    clastname;
             else;
                hdel_attn   = clastname;
             endif;

             if ccompany   <> *blanks;
                hdel_addr1 = ccompany;
                hdel_addr2 = caddr1;
                hdel_addr3 = caddr2;
             else;
                hdel_addr1 = caddr1;
                hdel_addr2 = caddr2;
                clear hdel_addr3;
             endif;
             hdel_city = ccity;
             hdel_state = cstate;
             hdel_zip = cpostcd;
             hdel_tel# = ctel#;
             hemail = cemail;
          else;
             //   Use contact address
             if mfrstname  <> *blanks or
                    mmidlname  <> *blanks;
                NCatLen = %len(%trimr(mfrstname)) + %len(
                    mmidlname) + 1;
                if NCatLen < %len(hdel_attn);
                   %subst(hdel_attn:1:NCatLen) = %trimr(
                       mfrstname) + ' ' + mmidlname;
                else;
                   hdel_attn = %trimr(mfrstname) + ' ' +
                       mmidlname;
                endif;
                hdel_attn = %trimr(hdel_attn) + ' ' +
                    mlastname;
             else;
                hdel_attn   = mlastname;
             endif;

             if mcompany   <> *blanks;
                hdel_addr1 = mcompany;
                hdel_addr2 = maddr1;
                hdel_addr3 = maddr2;
             else;
                hdel_addr1 = maddr1;
                hdel_addr2 = maddr2;
                clear hdel_addr3;
             endif;
             hdel_city = mcity;
             hdel_state = mstate;
             hdel_zip = mpostcd;
             %subst(hdel_tel#:1:12) = mtelnum;
             if mtelextn   <> *blanks;
                hdel_tel#   = %trimr(hdel_tel#) +
                                  '  x' + mtelextn;
             endif;
             hemail = memail;
          endif;

          //     Default Rush processing to No and shipping to Ground
          hrush       = 'N';
          hship       = 'G';

          //     Default Shipping to USPS First Class Mail (Free) for interal
          //     order for PPMRKT or PPDEMO

          if origin      = 'CLLC' and
                 (hfice      = 'PPMRKT' or
                  hfice      = 'PPDEMO');
             hship       = 'U';
          endif;

       endsr;

       // **************************************************************
       //    Do_MailRtn   Process Mail Returned orders
       // **************************************************************
       begsr do_mailrtn;

          //   Check if we have any 'from' NCOA records for this address

          if not %open(gam_coa1a);
             open gam_coa1a;
          endif;
          //     review this code for addition of SUBACCT to COA  ???????
          //   01/23/08 MRB switched to continue to scan until no valid recs
          setll (hfice : rstr_dir : rstr_name :
                rstr_hnum : rstr_prequ : rstr_type :
                rstr_postD : rstr_postQ : rstr_apt)
                 ga_coarec;
     c*    coa_read      tag
          dow 1=1;
             reade (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt)
                   ga_coarec;

             // If we do, cause error only if last names match and moved
             // within the city

             if %eof(gam_coa1a);
                clear ga_coarec;
             elseif %found(gam_coa1a);
                if clastname = rlastname;
                   if crec_type = 'O';
                      // Update NCOA if resident moved out of town
                      cstatus     = 'C';
                      cstatusmod  = 'R';
                      cvflg_rmlo  = 'Y';
                      cfin_user   = '*' + %subst(huserid:2:9);
                      cfin_date   = cycle_date;
                      cfin_time   = cycle_time;

                      update ga_coarec;

                   elseif hmailtype   = 'M';
                      // Update NCOA if resident moved within town
                      cstatus = 'C';
                      cstatusmod = 'R';
                      cvflg_rmlo  = 'Y';
                      cfin_user = '$' + %subst(huserid:2:9);
                      cfin_date = cycle_date;
                      cfin_time = cycle_time;

                      update ga_coarec;

                   else;
                      unlock gam_coa1a;
                      condition = 'parm-bad';
                      ei += 1;
                      %subst(errs(ei):1:5) = '#6082';
                      leavesr;
                   endif;
                elseif hmailtype = 'M';
                   // Output error that last names did not match NCOA recs
                   // 01/23/08 MRB Read again instead of error

     c*                  goto      coa_read
                   iter;
                   unlock gam_coa1a;
                   condition = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#6086';
                   leavesr;
                endif;
             endif;
             leave;
          enddo;

          //   Check if this address has registered vehicles

          if not %open(gam_veh1);
             open gam_veh1;
          endif;

          clear num_vehs;
          setll (hfice : rstr_dir : rstr_name :
                rstr_hnum : rstr_prequ : rstr_type :
                rstr_postD : rstr_postQ : rstr_apt :
                rsubacct) ga_vehrec;
          *in90 = not %found;
          dow *in90 <> *on;
             reade (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct) ga_vehrec;
             *in95 = %eof;
             if *in95;
                leave;
             endif;

             //   initalize vehicle checked array

             num_vehs += 1;
             har_veh(num_vehs) = vsequence;

             if vroot_ord# <> *blanks;
                //   If we do, cause an error
                //   01/23/08 MRB Switched this code to a warning from an error

                //                   eval      condition   = 'parm-bad'
                ei += 1;
                %subst(errs(ei):1:5) = '#6084';
                //                   goto      e_mailrtn
             endif;
          enddo;


          //     DETERMINE ACTION BASED ON TYPE OF PROCESSING
          //     HTML_MRTN-
          //     "M"          Resident Moved In-Town
          //     "V"          Vacate Resident Account

          select;
             when hmailtype   = 'V' or
                    (crec_type = 'O' and
                     hmailtype = 'M');

                //   Call GA_TRNSFR program with the Resident Instance to Vacate

                //   Delete if we have a bad address

                if ravstat     = 'E' or
                       (ravstat    = 'W' and
                        rerrcode   = 'H#I') or
                       (ravstat    = 'W' and
                        rerrcode   = 'A#N') or
                       (ravstat    = 'W' and
                        rerrcode   = 'A#B');
                   function    = 'DELALL';
                else;
                   function    = 'RESVAC';
                endif;
                fr_fice     = rfice;
                fr_instnc#  = rinstance#;
                clear rc;

                //   Set userid to start with '*'

                byte10      = huserid;
                %subst(byte10:1:1) = '*';

                ga_trnsfr(function : parms_fr : parms_to :
                      byte10 : rc);

                if rc          = #TRUE;
                   ei += 1;
                   %subst(errs(ei):1:5) = '#6080';
                else;
                   condition   = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#6081';
                endif;

             when hmailtype   = 'M';
                //     Cause Page to all move resident info

                exsr fill_resd;

                hscrn_seq   = 0;
                h_key       = rpin_user;
                hnew_addr1  = cnu_addr1;
                hmove_res   = 'Y';
                button_txt  = 'Confirm Move';

                panel       = '#RES_MOVE ';
                hscrn_next  = 'MSR';

             other;
          endsl;


       endsr;

       // **************************************************************
       //    Do_MS_Str    Street Editor Update
       // **************************************************************
       begsr do_ms_str;

          //    Only edit is if street name is present

          if hstr_name   = *blanks;
             condition   = 'No Street';
             ei += 1;
             %subst(errs(ei):1:5) = '#5440';
             leavesr;
          endif;

          if not %open(gam_str1);
             open gam_str1;
          endif;

          if h_key      <> *blanks;
             //    Use the Key value to chain to the record then update

             key_strds = h_key;
             chain (hfice : skey_name : skey_type)
                    ga_strrec;

             if %found;
                sstr_name   = hstr_name;
                sstr_type   = hstr_type;
                sstr_postd  = hstr_postd;

                svaldaddr1  = hvald_dir1 +
                                  hvald_str1 +
                                  hvald_end1;
                svaldaddr2  = hvald_dir2 +
                                  hvald_str2 +
                                  hvald_end2;

                update ga_strrec;
             else;
                condition   = 'NotFound';
                ei += 1;
                errs(ei)    = 'Record to update +
                                  not found.';
             endif;
          else;
             //    Write a new street (first check if street exists)
             chain(n) (hfice : hstr_name : hstr_type)
                    ga_strrec;
             if %found;
                condition   = 'Exists';
                ei += 1;
                errs(ei)    = 'Record Already +
                                  exists in database.';
             else;

                sfice       = hfice;
                sstr_name   = hstr_name;
                sstr_type   = hstr_type;
                sstr_postd  = hstr_postd;

                svaldaddr1  = hvald_dir1 +
                                  hvald_str1 +
                                  hvald_end1;
                svaldaddr2  = hvald_dir2 +
                                  hvald_str2 +
                                  hvald_end2;

                write ga_strrec;
             endif;
          endif;


       endsr;

       // **************************************************************
       //    Do_MSstdel   Street Editor Update
       // **************************************************************
       begsr do_msstdel;

          key_strds = h_key;
          hstr_name   = skey_name;
          hstr_type   = skey_type;
          hstr_postd  = skey_postd;

          if not %open(gam_str1);
             open gam_str1;
          endif;

          chain (hfice : hstr_name : hstr_type)
                 ga_strrec;
          if not %found;
             condition   = 'NotFound';

             ei += 1;
             errs(ei)    = 'ERROR: Cound not find: ' +
                               %trimr(hstr_name) + ' ' +
                               %trimr(hstr_type) + ' ' +
                               %trimr(hstr_postd);
          else;
             delete gam_str1;
             ei += 1;
             errs(ei)    = %trimr(hstr_name) + ' ' +
                               %trimr(hstr_type) + ' ' +
                               %trimr(hstr_postd) +
                               ' Deleted Successfully.';
          endif;

       endsr;

       // *******************************************************************
       //     Do_OTCctrl:  Write a control rec for OTC batch of permits
       // *******************************************************************
       begsr Do_OTCctrl;

          //    Get option and master record, calculate charge

          if NOT %open(gaoption1);
             open gaoption1;
          endif;

          chain (hfice : h_applid : hrecid : husrtype :
                hproduct) ga_parms;
          *in90 = not %found;

          exsr get_master;

          //    Calculate the rate

          //   Rate is .65 if we are > 7 days from start of sale, 1.00
          //   after that point
          //   PRICE IS ALWAYS .65 FOR SANTA MONICA

          $date = %editc(cycle_date:'X');
          $value      = 7;
          $unit       = 'D';
          byte8       = dateplus($date:$value:$unit);
          temp_date = %dec(%xlate(' ':'0':
                byte8):8:0);
          if temp_date   < ga_ef_datf;
             //                             hfice       = '001286'
             //                   eval      otc_rate    = .65
             if ga_mh_otc   > 0;
                otc_rate    = ga_mh_otc;
             else;
                otc_rate    = g_mh_otc;
             endif;
          else;
             //                   eval      otc_rate    = 1.00
             if ga_mh_otc2  > 0;
                otc_rate    = ga_mh_otc2;
             else;
                otc_rate    = g_mh_otc2;
             endif;
          endif;

          pk_7p0      = cvt2num(hnumpmits);
          otc_cost    = otc_rate * pk_7p0;


          //   Write out the record

          if NOT %open(gaorder1#);
             open gaorder1#;
          endif;

          clear garec_#;

          tfice       = hfice;
          tapplid     = h_applid;
          torder_yyy  = cycle_yyy;
          exsr make_bill;
          in *lock dvdtaara;
          if ga_seqnum = 99999;
             ga_seqnum = 1;
          else;
             ga_seqnum += 1;
          endif;
          out dvdtaara;
          byte5 = %editc(ga_seqnum:'X');
          torder#     = billcycle + '8' + byte5;
          horder#     = torder#;
          tusrtype    = husrtype;
          tdate       = cycle_date;
          ttime       = cycle_time;
          if glive_appl <> 'Y';
             ttestcode = 'D';
          endif;
          tlanguage   = 'E';
          tcategry    = ga_categry;
          //  03/27/09 MRB Stopped writing tapp_data9 with counts
          tapp_data9  = ga_rpt2dsc;
          troot_ord#  = horder#;
          tqty        = pk_7p0;
          trecid      = hrecid;
          tproduct    = hproduct;
          tship       = hship;
          tfiscalyb   = ga_fis_yb;
          tfiscaltrm  = ga_fis_trm;
          //  01/16/09 MRB Started setting form id for counts
          tformid     = ga_formid;
          tlabelid    = ga_labelid;
          tvalidfr    = ga_validfr;
          tvalidto    = ga_validto;
          tcardtype   = 'COD ';
          tbill_yyy   = cycle_yyy;
          tbillcycle  = billcycle;
          tamt_memoh  = otc_cost;
          tamt_cship  = otc_ship;
          if hrush       = 'Y';
             tamt_cship  = tamt_cship + RUSH_FEE;
             tttype      = 'R';
          endif;
          tamt_totm   = tamt_memoh;
          tamt_credt  = tamt_totm +
                            tamt_cship;
          tsource     = 'OTC';
          //  05/05/09 MRB Stopped setting stat ini to F for the control record
          tstat_ini   = ' ';
          tga_paid    = 'Y';
          tga_paiddt  = cycle_date;
          tga_paidtm  = cycle_time;
          tga_paidus  = huserid;
          if origin      = 'CLLC';
             tga_paidby  = '1';
          else;
             tga_paidby  = '2';
          endif;
          tsfrstn     = cfrstname;
          tsmidln     = cmidlname;
          tslastn     = clastname;
          tcompany    = ccompany;
          taddr1      = caddr1;
          taddr2      = caddr2;
          tcity       = ccity;
          tstate      = cstate;
          tpostcd     = cpostcd;
          tcntry      = ccntry;
          tdel_attn   = hdel_attn;
          tdel_addr1  = hdel_addr1;
          tdel_addr2  = hdel_addr2;
          tdel_addr3  = hdel_addr3;
          tdel_city   = hdel_city;
          tdel_zip    = hdel_zip;
          tdel_state  = hdel_state;
          tdel_cntry  = hdel_cntry;
          tdel_tel#   = hdel_tel#;
          trpymethod  = 'E';
          temail      = hemail;

          write garec_#;

       endsr;

       // *******************************************************************
       //     Do_PP_Actv:  Mark Parking Permit Order as ACTIVE/VALID
       // *******************************************************************
       begsr Do_PP_Actv;

          // ---------------------------------------
          //   1. Update the GAORDER1 record
          // ---------------------------------------
          if NOT %open(gaorder1#);
             open(e) gaorder1#;
             *in97 = %error;
          endif;

          chain horder# garec_#;
          *in90 = not %found;
          if *in90       = *on;
             leavesr;
          endif;

          tstat_end   = ' ';
          clear tstat_e_us;
          clear tstat_e_dt;
          clear tstat_e_tm;

          update garec_#;

          // ---------------------------------------
          //   2. Write GAORDER3 record for the mail/returned - Actiavted
          // ---------------------------------------
          #GT_func = 'GA';
          #GT_fice = tfice;
          #GT_ord# = torder#;
          #GT_applid = tapplid;
          #GT_rectyp = 'A';
          #GT_ob8     = *blanks;
          #GT_ob24    = *blanks;
          #GT_textv   = 'Order Activated';
          #GT_entby   = huserid;
          exsr $get_GT;
          if #GT_status <> 'OK';
             // --error record not written
          endif;



       endsr;

       // *******************************************************************
       //     Do_PP_MRT:   Mail Returned for Parking Permit Order
       //                  Write GAORDER3  Record
       //                  Write GAOUTERF1 Record
       // *******************************************************************
       begsr Do_PP_MRT;

          // ---------------------------------------
          //   1. Update the GAORDER1 record
          // ---------------------------------------
          if NOT %open(gaorder1#);
             open(e) gaorder1#;
             *in97 = %error;
          endif;

          chain horder# garec_#;
          *in90 = not %found;
          if *in90       = *on;
             leavesr;
          endif;

          tstat_end   = 'M';
          tstat_e_us  = huserid;
          tstat_e_dt  = cycle_date;
          tstat_e_tm  = cycle_time;

          trobo_cond = %xlate('TW':'XX':trobo_cond);

          update garec_#;

          // ---------------------------------------
          //   2. Write GAORDER3 record for the mail/returned
          // ---------------------------------------
          #GT_func = 'GA';
          #GT_fice = tfice;
          #GT_ord# = torder#;
          #GT_applid = tapplid;
          #GT_rectyp = 'M';
          #GT_ob8     = *blanks;
          #GT_ob24    = *blanks;
          #GT_textv   = htextarea;
          #GT_entby   = huserid;
          exsr $get_GT;
          if #GT_status <> 'OK';
             // --error record not written
          endif;

          // ---------------------------------------
          //   3. Write router record to notify the user of mail returned
          // ---------------------------------------
          rtr_action  = 'M';
          clear rtr_data;
          exsr pp_ga_rtr;


       endsr;


       // ************************************************************************
       //     Do_RES_Tbl   Write out the RES Table and Action Buttons
       // ***********************************************************************
       begsr Do_RES_Tbl;

          //   Table Header
          html_msgs   = '5541         ';
          exsr do_a_msg2;

          //   Retrieve the resident record by userid
          have_res    = #false;
          exsr get_resu;
          if %found(gam_res1u);

             //   Check if we have sub accounts at this address (FIELD=SUBS_EXIST)
             exsr chk_4_suba;

             //   First ROW - put out a table of action buttons
             //   Do not show Create Sub, Delete Res, Vacate Res to CCS
             if %subst(huserid:4:3) <> 'CCS';
                row  = '<tr><td>' +
                           '<table border=0 width=100%>' +
                           '<tr>' +
                           '<td valign=top align=center>';
                if ravstat    <> 'E';
                   row   = %trim(row) + '&nbsp;&nbsp;' +
                              '<input type="button" ' +
                              'value="Vacate Resident" onClick="'+
                              'javascript:setsubmitRES(''' +
                              rpin_user + ''',''VAC'');">';
                endif;
                //   Allow Deletion of a Sub Account  - ALWAYS
                //   Allow Deletion of a Base Address - ONLY IF SUB ACCOUNTS EXISTS!
                //                                      or AV error
                if rsubacct   <> '  '  or
                       (rsubacct   = '  ' and
                        subs_exist = #TRUE) or
                       ravstat    <> ' ';
                   row   = %trim(row) + '&nbsp;&nbsp;' +
                              '<input type="button" ' +
                              'value="Delete Residence" onClick="'+
                              'javascript:setsubmitRES(''' +
                              rpin_user + ''',''DEL'');">';
                endif;
                if raction    <> 'V';
                   row   = %trim(row) + '&nbsp;&nbsp;' +
                              '<input type="button" ' +
                              'value="Move Resident" onClick="'+
                              'javascript:setsubmitRES(''' +
                              rpin_user + ''',''MOV'');">';
                endif;
                if rsubacct    = '  ' and
                       raction    <> 'V';
                   row   = %trim(row) + '&nbsp;&nbsp;' +
                              '<input type="button" ' +
                              'value="Create SubAccnt" onClick="'+
                              'javascript:setsubmitRES(''' +
                              rpin_user + ''',''CRT'');">';
                endif;
                row   = %trim(row) +
                            '</td></tr></table>' +
                            linefeed + '</td></tr>';

                BufOut = %trimr(BufOut) + row;
                bytesize    = bytesize +
                                  %len(%trimr(row)) + 1;
                exsr sendbufr;
             endif;

             //   Second ROW - (Left TD) put out a Resident Information
             %subst(byte80:1:50) = remail;
             disab_eml   = '>';
             if remail      = *blanks;
                byte80      = 'no email address';
                disab_eml   = ' DISABLED>';
             elseif rem_optin   = 'B';
                byte80      = %trim(byte80) + '<br>' +
                                  '**Email Address Bounced**';
                disab_eml   = ' DISABLED>';
             endif;

             //   get the SHA for the rpin_user
             sha_ssn   = %trim(rpin_user);
             sha_salt  = %trim(isha_salt);
             sha_bytes   =
                    sha_hashSha1(sha_ssn:sha_salt);

             //  12/18/08 MRB Add business or corporate text if not normal usertype

             clear wrk_usrtyp;
             if rusrtype    = 'B';
                wrk_usrtyp  = 'Business Account:<br>';
             elseif rusrtype    = 'C';
                wrk_usrtyp  = 'Corporate Account:<br>';
             endif;

             //  03/13/09 JJG Add vacant and AV error code info

             clear string65;

             if raction     = 'V';
                string65    = %trim(string65) +
                                  ' Vacant';
             endif;

             if ravstat    <> ' ';
                string65    = %trim(string65) + ' ' +
                                  ravstat + '-' +
                                  rerrcode;
             endif;

             if rin_out     = 'O';
                string65    = %trim(string65) +
                                  ' *Out*';
             endif;

             if rem_optin   = 'Y';
                string65    = %trim(string65) +
                                  ' Opt in';
             elseif rem_optin   = 'N';
                string65    = %trim(string65) +
                                  ' Opt out';
             endif;

             if string65   <> *blanks;
                wrk_usrtyp  = %trim(string65) + '<p>' +
                                  %trim(wrk_usrtyp);
                clear string65;
             endif;

             clear row;
             row  = '<tr><td>' +
                        '<table border=1 width=100%>' +
                        '<tr bgcolor="silver">' +
                        '<td valign=top align=center><b>'+
                        %trim(wrk_usrtyp) +
                        %trim(rfrstname) + ' ' +
                        %trim(rmidlname) + ' ' +
                        %trim(rlastname) + ' ' +
                        %trim(rsuffix) + '<br>';
             if hfice = 'MSTEST';
                row  = %trim(row) +
                           '<a href="javascript:' +
                           'AnyWin(''ADDRWIN'',''' +
                           'http://zip4.usps.com/zip4/' +
                           'welcome.jsp?' +
                           'address2=' + %trim(raddr1) +
                           '&city=' + %trim(rcity) +
                           '&state=' + %trim(rstate) +
                           '&zip5=' + %trim(rpostcd) +
                           ''');">' +
                           %trim(raddr1) + '</a>' +
                           '<br>';
             else;
                row  = %trim(row) +
                           %trim(raddr1) + '<br>';
             endif;
             row  = %trim(row) +
                        %trim(rcity) + ', ' +
                        %trim(rstate) + '  ' +
                        %trim(rpostcd) + '<br>' +
                        %trim(rtel#) + '<br>' +
                        %trim(byte80) + '<br>' +
                        '<input type="button" ' +
                        'value="Edit Resident" onClick="'+
                        'javascript:setsubmitRES(''' +
                        rpin_user + ''',''EDT'');">' +
                        '<br>' +
                        '<input type="button" ' +
                        'value="Print Mailer" onClick="'+
                        'javascript:prt_mailer(''' +
                        rfice + ''',''' + rpin_user + ''','''+
                        sha_bytes + ''');">' + linefeed;
       if remail <> *blanks;
          row  = %trim(row) + '&nbsp;&nbsp;&nbsp;&nbsp;' +
              '<input type="button" value="Email Mailer" onClick="'+
              'javascript:confirmEmail(''SNM'');">' +
              linefeed;
       endif;
             row  = %trim(row) +
                        '<input type="hidden" ' +
                        'name="HPINUSR" value="' +
                        rpin_user + '">' + linefeed +
                        '<input type="hidden" ' +
                        'name="HPINNUM" value="' +
                        rpin# + '">' + linefeed +
                        '<input type="hidden" ' +
                        'name="OVRRATE" value="1">' +
                        '</td>' + linefeed;

             BufOut = %trimr(BufOut) + row;
             bytesize    = bytesize +
                               %len(%trimr(row)) + 1;
             exsr checkbufr;

             //   Second ROW - (Right TD) User/Pin/Enabled/Send Pin/Enable Info
             disab_ena   = '>';
             if renabled    = 'Y';
                disab_ena   = ' DISABLED>';
             endif;

             clear row;
             row  = '<td valign=top align=right>' +
                        '<table border=1 width=100%>' +
                      '<tr><td align="right">' +
                        '<b>User ID:</b></td>' +
                       '<td align="left"><b>&nbsp;' +
                        rpin_user + '</b></td>' +
                       '<td align=right>' +
                       %trim(dspTmStamp(rlastactd:
                                        0:0:
                                        '*DATE')) +
                       '</td></tr>' +
                      '<tr><td align="right"> +
                        <b>Pin #:</b></td> +
                       <td align="left"> +
                        <b>&nbsp;' + rpin# + '</b>' +
                       '</td><td align=right>' +
                       '<input type="button" value=' +
                       '"E-mail Pin" onClick="javascript:' +
                       'confirmEmail(''SNP'');"' +
                       %trimr(disab_eml) +
                       '</td></tr>' +
                      '<tr><td align="right"> +
                        <b>Enabled:</b></td> +
                       <td align="left"> +
                        <b>&nbsp;' + renabled + '</b>' +
                       '</td><td align=right>' +
                       '<input type="button" +
                        value="Enable" onClick="javascript:' +
                        'setsubmit(document.form1.ACTION,' +
                        '''ENA'');"' + %trimr(disab_ena) +
                       '</td></tr>' +
                     '<tr><td align="center" colspan=2>';
             if rin_out    <> 'O';
                row = %trim(row) +
                        '<input type="button" value=' +
                        '"Purchase" onClick="javascript:' +
                        'newOrd2();">';
             endif;
             row = %trim(row) +
                     '&nbsp;</td>';

             BufOut = %trimr(BufOut) + row;
             bytesize    = bytesize +
                               %len(%trimr(row)) + 1;
             exsr checkbufr;
             clear row;

             if (grate2dt  <= cycle_date and
                     grate2dt  <> 0) or
                    (grate3dt  <= cycle_date and
                     grate3dt  <> 0) or
                    grateOtxt  <> *blanks or
                    grateO2txt <> *blanks;

                //    Put out the standard radio box
                work_20     = grate1txt;
                if work_20     = *blanks;
                   work_20     = 'STD Rates';
                endif;

                row = %trim(row) + '<td align="left"> +
                          <input type="radio" +
                          name="OVR" value="1" CHECKED +
                        onClick="change(document.form1.OVRRATE, +
                          ''1'');">&nbsp;' +
                          %trim(work_20) + '<br>';

                //   Check rate 2 and rate 3

                if grate2dt   <> 0  and
                       grate2dt   <= cycle_date;
                   work_20     = grate2txt;
                   if work_20     = *blanks;
                      work_20     = 'OVR Rate 1';
                   endif;

                   row = %trim(row) + '<input type="radio" +
                             name="OVR" value="2" +
                           onClick="change(document.form1.OVRRATE, +
                             ''2'');">&nbsp;' +
                             %trim(work_20) + '<br>';
                endif;
                if grate3dt   <> 0  and
                       grate3dt   <= cycle_date;
                   work_20     = grate3txt;
                   if work_20     = *blanks;
                      work_20     = 'OVR Rate 2';
                   endif;

                   row = %trim(row) + '<input type="radio" +
                             name="OVR" value="3" +
                           onClick="change(document.form1.OVRRATE, +
                             ''3'');">&nbsp;' +
                             %trim(work_20) + '<br>';
                endif;

                //   Check the Online Override Rates

                if grateOtxt  <> *blanks;
                   work_20     = grateOtxt;

                   row = %trim(row) + '<input type="radio" +
                             name="OVR" value="O" +
                           onClick="change(document.form1.OVRRATE, +
                             ''O'');">&nbsp;' +
                             %trim(work_20) + '<br>';
                endif;

                if grateO2txt <> *blanks and
                       grate2dt   <> 0  and
                       grate2dt   <= cycle_date;
                   work_20     = grateO2txt;

                   row = %trim(row) + '<input type="radio" +
                             name="OVR" value="N" +
                           onClick="change(document.form1.OVRRATE, +
                             ''N'');">&nbsp;' +
                             %trim(work_20) + '<br>';
                endif;
                row = %trim(row) + '</td>';
             else;
                //    Put out the override rate as a hidden variable

                row = %trim(row) +
                          '<td>&nbsp;</td>';
             endif;

             row = %trim(row) +
                     '</tr></table>' +
                     '</td></tr></table>' +
                     '</td></tr>' + linefeed;

          else;
             row  = '<tr><td>' +
                        '<table border=0 width=100%>' +
                        '<tr align=center ' +
                        'bgcolor="silver"><td><b>' +
                        'No Resident Information Found' +
                        '</b></td></tr></table>' +
                        '</td></tr></table>' +
                        '</td></tr>' + linefeed;
             use_lookup  = 'Y';
          endif;

          BufOut = %trimr(BufOut) + row;
          bytesize    = bytesize +
                            %len(%trimr(row)) + 1;
          exsr checkbufr;

       endsr;

       // ************************************************************************
       //     Do_RES2Tbl: Write out the RES2 Table and Action Buttons
       // ***********************************************************************
       begsr Do_RES2Tbl;

          //   Table Header
          html_msgs   = '5541         ';
          exsr do_a_msg2;

          //   Retrieve the resident2 record by instance#
          have_res2   = #false;
          exsr get_res2;
          if %found(gam_res2);

             //   Check if we have sub accounts at this address (FIELD=SUBS_EXIST)
             exsr chk_4_sub2;

             //   First ROW - put out a table of action buttons
             row  = '<tr><td>' +
                        '<table border=0 width=100%>' +
                        '<tr>' +
                        '<td valign=top align=center>' +
                        '<input type="button" ' +
                        'value="Move Resident" onClick="'+
                        'javascript:setsubmitKEY(''' +
                        %trim(%char(rinstance#)) +
                        ''',''MOV'');">' +
                        '</td></tr></table>' +
                        linefeed + '</td></tr>';

             BufOut = %trimr(BufOut) + row;
             bytesize    = bytesize +
                               %len(%trimr(row)) + 1;
             exsr sendbufr;

             //   Second ROW - (Left TD) put out a Resident Information
             byte50 = remail;
             if remail      = *blanks;
                byte50      = 'no email address';
             endif;

             clear row;
             row  = '<tr><td>' +
                        '<table border=1 width=100%>' +
                        '<tr bgcolor="silver">' +
                        '<td valign=top align=center><b>'+
                        %trim(rfrstname) + ' ' +
                        %trim(rmidlname) + ' ' +
                        %trim(rlastname) + ' ' +
                        %trim(rsuffix) + '<br>' +
                        %trim(raddr1) + '<br>' +
                        %trim(rcity) + ', ' +
                        %trim(rstate) + '  ' +
                        %trim(rpostcd) + '<br>' +
                        %trim(rtel#) + '<br>' +
                        %trim(byte50) +
                        '</td></tr></table>' +
                     '</td></tr>' + linefeed;

          else;
             row  = '<tr><td>' +
                        '<table border=0 width=100%>' +
                        '<tr align=center ' +
                        'bgcolor="silver"><td><b>' +
                        'No Resident Information Found' +
                        '</b></td></tr></table>' +
                        '</td></tr></table>' +
                        '</td></tr>' + linefeed;
             use_lookup  = 'Y';
          endif;

          BufOut = %trimr(BufOut) + row;
          bytesize    = bytesize +
                            %len(%trimr(row)) + 1;
          exsr checkbufr;

       endsr;

       //******************************************************************
       //  Do_SumVeh:  subroutine to output the multiple vehicles summary
       //              and receipt section
       //******************************************************************
       begsr do_sumveh;

       byte900 = '<tr><td style="width: 150; vertical-align: top;">' +
                 '<b>Vehicle Data:</b>';

       if %scan('V':gscreens) > 0 and tstat_end   = ' ' and tstat_ini <> 'F' and
          hviewonly = #false;

          byte900 = %trim(byte900) +
                    '<p>&nbsp;&nbsp;&nbsp;&nbsp;<b><input type="button" ' +
                    'value="Edit/Update" ' +
                    'onClick="PPwin(''PP_EDV'',650,450);"></p>';

          if glive_lpr <> *blanks;
             byte900 = %trim(byte900) +
                       '<p>&nbsp;&nbsp;&nbsp;&nbsp;<input ' +
                       'type="button" value="View Change History"' +
                       'onClick="viewHistory();"></p>';

          endif;

       endif;

       byte900 = %trim(byte900) + '</td><td width=400>';

       if tapp_data8 <> *blanks;
          byte900 = %trim(byte900) +  'Permit #: ' +
             %trim(tapp_data8) + '<br><hr>';
       endif;

       if not %open(lprplate1c);
          open lprplate1c;
       endif;

       clear idx;
       setll (hfice:horder#) platerec_c;
       dow not %eof(lprplate1c);
          reade (hfice:horder#) platerec_c;
          if %eof(lprplate1c);
             leave;
          endif;

          idx += 1;
          if idx > 1;
             byte900 = %trim(byte900) + '<hr>';
          endif;
          byte900 = %trim(byte900) + '<span style="font-weight: bold;">' +
                    'Vehicle ' + %char(idx) + ':</span><br>';
          if pvehplate <> *blanks;
            byte900     = %trim(byte900) + 'Plate: ' +
             %trim(pvehplate) + '<br>';
          endif;
          if pvehpliss <> *blanks;
             byte900     = %trim(byte900) + 'State: ' +
                %trim(pvehpliss) + '<br>';
          endif;
          if pvehmake  <> *blanks;
             byte900     = %trim(byte900) + 'Make: ' +
                %trim(pvehmake) + '<br>';
          endif;
          if pvehmodel <> *blanks;
             byte900     = %trim(byte900) + 'Model: ' +
                %trim(pvehmodel) + '<br>';
          endif;
          if pvehyear  <> *blanks;
             byte900     = %trim(byte900) + 'Year: ' +
                %trim(pvehyear) + '<br>';
          endif;
          if pvehbody  <> *blanks;
             byte900     = %trim(byte900) + 'Type: ' +
                %trim(pvehbody) + '<br>';
          endif;
          if pvehcolor <> *blanks;
             byte900 = %trim(byte900) +  'Color: ' +
                %trim(pvehcolor) + '<br>';
          endif;
          if pvehregnm <> *blanks;
             byte900 = %trim(byte900) + 'Registration Name: ' +
                %trim(pvehregnm) + '<br>';
          endif;

          BufOut = %trim(BufOut) + %trim(byte900) + linefeed;
          exsr checkbufr;
          clear byte900;
       enddo;
       BufOut = %trim(BufOut) + %trim(byte900) + linefeed;
       exsr checkbufr;

       endsr;


       // **************************************************************
       //    Dsp_ResNew:    Display the Name and resident address of the
       //                   NEW addresses
       // **************************************************************
       begsr dsp_resnew;

          have_newr   = #FALSE;

          //     Start the table for new addresses

          BufOut      = %trimr(BufOut) +
                            '<b>Accounts at New ' +
                            'Address:<br>' +
                            '<table border=1>';
          BufOut = %trimr(BufOut) + linefeed;
          bytesize    = bytesize + 44;

          //     Use the NCOA TO address to check for subaccounts etc

          if not %open(gam_res1a);
             open gam_res1a;
          endif;

          setll (CNU_FICE : CNU_DIR : CNU_NAME :
                CNU_HNUM : CNU_PREQU : CNU_TYPE :
                CNU_POSTD : CNU_POSTQ : CNU_APT)
                 resrec_1a;
          dow not %eof;
             reade(n) (CNU_FICE : CNU_DIR : CNU_NAME :
                   CNU_HNUM : CNU_PREQU : CNU_TYPE :
                   CNU_POSTD : CNU_POSTQ : CNU_APT)
                    resrec_1a;
             *in95 = %eof;
             if *in95;
                leave;
             endif;

             clear byte300;
             have_newr   = #TRUE;

             //     Check for registered vehicles at this address

             have_vehs   = #FALSE;
             exsr do_chkveh;

             //     Display the radio button

             if have_vehs   = #FALSE;
                byte300     = '<tr><td width=50>' +
                             '<input type="radio" value="' +
                             wfice + %trim(%char(winstance#)) +
                             '" name="FICEINST">' +
                             '</td><td>';
             else;
                byte300     = '<tr><td width=50>' +
                             '<input type="radio" DISABLED>' +
                             '</td><td>';
             endif;

             //     Display the New Res Name

             byte300     = %trimr(byte300) +
                               %trimr(wfullname) + '<br>';

             if have_vehs   = #TRUE;
                byte300     = %trimr(byte300) +
                                  '<font color="RED">' +
                                  'Registered vehicles found.' +
                                  '</font>';
             endif;

             byte300     = %trimr(byte300) +
                               '</td></tr>';

             BufOut = %trimr(BufOut) + byte300;
             BufOut = %trimr(BufOut) + linefeed;
             bytesize    = 1 + bytesize +
                               %len(%trimr(byte300));
             exsr checkBufr;
          enddo;


          if have_newr   = #TRUE;
             //   write out line for new subaccount

             clear byte300;
             byte300     = '<tr><td width=50>' +
                          '<input type="radio" value="CRT' +
                          wfice + %trim(%char(winstance#)) +
                          '" name="FICEINST">' +
                          '</td><td>' +
                          'Create New Sub Account' +
                          '</td></tr>';
          else;
             //   write out line for Create Address

             clear byte300;
             byte300     = '<tr><td width=50>' +
                          '<input type="radio" value="NEW' +
                          cnu_fice + %trim(cnu_addr1) +
                          '" name="FICEINST">' +
                          '</td><td>' +
                          'Create New Address' +
                          '</td></tr>';
          endif;

          //     End the table for new addresses

          byte300     = %trimr(byte300) +
                            '</table>';

          BufOut = %trimr(BufOut) + byte300;
          BufOut = %trimr(BufOut) + linefeed;
          bytesize    = 1 + bytesize +
                            %len(%trimr(byte300));
          exsr checkBufr;

       endsr;

       // **************************************************************
       //    Dsp_ResOld:    Display the Name and resident address of the
       //                   OLD address
       // **************************************************************
       begsr dsp_resold;

          clear byte300;

          //     Display the Old Res Name

          byte300     = %trimr(rfullname) + '<br>';

          //     Display the Old Address

          byte300     = %trimr(byte300) +
                            %trimr(raddr1) + '<br>';

          byte300 = %trimr(byte300) + rcity;
          byte300 = %trimr(byte300) + ',';
          byte300 = %trimr(byte300) + ' ' + rstate;
          byte300 = %trimr(byte300) + ' ' + rpostcd;
          byte300 = %trimr(byte300) + '<br>';

          //     Display the New Address

          byte300     = %trimr(byte300) +
                            '<p><b>New Address:</b><br>' +
                            %trimr(cnu_addr1) + '<br>';

          byte300 = %trimr(byte300) + cnu_city;
          byte300 = %trimr(byte300) + ',';
          byte300 = %trimr(byte300) + ' ' + cnu_state;
          byte300 = %trimr(byte300) + ' ' + cnu_zipcd;
          byte300 = %trimr(byte300) + '<br>';


          BufOut = %trimr(BufOut) + byte300;
          BufOut = %trimr(BufOut) + linefeed;
          bytesize    = 1 + bytesize +
                            %len(%trimr(byte300));
          exsr checkBufr;

       endsr;


       //********************************************************************
       //  Eml_Error     Send email that there was an error to Mark
       //                and Brian for now
       //                MsgText is set before calling this
       //********************************************************************
       begsr eml_error;

       #EM_func   = 'EM';
       #EM_dist   = onlydst;
       #EM_subjct = %trim(pgm_name) + ' Error';
       #EM_short  = msgtext;
       #EM_long   = '';

       exsr $put_em;

       endsr;


       // **************************************************************
       //    init_batch   Initalize batch processing fields
       // **************************************************************
       begsr init_batch;

          //    Set up the batch ID field for mail processing users

          if origin      = 'CLLC' and
                 %subst(huserid:2:6) = '009998';

             //   First get the client's batch id (from f2 file)
             if NOT %open(dvclientf2);
                open(e) dvclientf2;
                *in97 = %error;
             endif;
             chain huserid authority;
             *in90 = not %found;

             //   Second get today's bill cycle
             exsr make_bill;

             //   Check if bill cycles match

             if billcycle <> %subst(cbatchid:1:3);
                //   set the new bill cycle and clear the count

                clear cbatchid;
                clear cbatchrec#;

                //   Batch ID Format: 7ATMRB01 (billcycle)(initals)(sequence)
                //                    initals pulled from userid: F009998MRB

                cbatchid = billcycle +
                               %subst(huserid:8:3) +
                               '01';

                //   Update the client f2 record

                update authority;
             else;
                unlock dvclientf2;
             endif;
          endif;

       endsr;

       // *******************************************************************
       //     pad_to_X:  pad student ID to X characters (pad_num)
       // *******************************************************************
       begsr pad_to_X;

     c*    pad_top       tag
          //if %len(%trim(byte15)) < pad_num;
             //byte15      = '0' + %trim(byte15);
     c*                  goto      pad_top
          //endif;

          dow %len(%trim(byte15)) < pad_num;
              byte15 = '0' + %trim(byte15);
          enddo;

       endsr;

       // *********************************************************************
       //     PP_petadd     Panel Processing to Add a New Pet
       // *********************************************************************
       begsr PP_petadd;

          //   Retrieve the resident record by userid
          exsr get_resu;

          if not %open(gam_pet1);
             open gam_pet1;
          endif;

          //   Add the new Pet with unique sequence
          pfice = hfice;
          psequence   = dtara_seq#('NEW');
          pinstance#  = rinstance#;
          ppettype = hpet_type;
          ppetbreed = hpet_breed;
          ppetcolor = hpet_color;
          pname       = %trim(hpet_name);
          psex = hpet_sex;
          prabies     = hrabies_y4 + hrabies_m2;
          ppetstatus = 'C';
          ppetactive = 'A';
          psource = 'ADA';

          ptel# = rtel#;
          pstr_dir = rstr_dir;
          pstr_name = rstr_name;
          pstr_hnum = rstr_hnum;
          pstr_prequ = rstr_prequ;
          pstr_type = rstr_type;
          pstr_postD = rstr_postD;
          pstr_postQ = rstr_postQ;
          pstr_apt = rstr_apt;
          psubacct = rsubacct;

          pchgdate    = cycle_date;
          pchgtime    = cycle_time;
          pchguser    = huserid;

          write ga_petrec;

       endsr;

       // *********************************************************************
       //     PP_petdel     Panel Processing to Delete a Pet
       // *********************************************************************
       begsr PP_petdel;

          //   Retrieve the resident record by userid
          exsr get_resu;

          //   Retrieve the pet data by Raddress and Pet Name
          if not %open(gam_pet1);
             open gam_pet1;
          endif;

          chain (hfice : rstr_dir : rstr_name :
                rstr_hnum : rstr_prequ : rstr_type :
                rstr_postD : rstr_postQ : rstr_apt :
                rsubacct : h_ktype : h_kname) ga_petrec;

          //   First write this record into the GAM_PET2 file, then delete it
          //   NO LONGER (AS OF 2/5/08)
          //   Simply update the active status to 'D' = deleted
          if %found(gam_pet1);
             //                   if        not %OPEN(gam_pet2)
             //                   open      gam_pet2
             //                   endif
             //                   eval      dfice       = pfice
             //                   eval      dsequence   = dtara_seq#('DEL')
             //                   eval      dpettype    = ppettype
             //                   eval      dname       = pname
             //                   eval      dpetbreed   = ppetbreed
             //                   eval      dpetcolor   = ppetcolor
             //                   eval      dsex        = psex
             //                   eval      drabies     = prabies
             //                   eval      dpettag#    = ppettag#
             //                   eval      dlastordr#  = plastordr#
             //                   eval      droot_ord#  = proot_ord#
             //                   eval      dlicexdate  = plicexdate
             //                   eval      dpetactive  = ppetactive
             //                   eval      dstr_dir    = pstr_dir
             //                   eval      dstr_name   = pstr_name
             //                   eval      dstr_hnum   = pstr_hnum
             //                   eval      dstr_prequ  = pstr_prequ
             //                   eval      dstr_type   = pstr_type
             //                   eval      dstr_postD  = pstr_postD
             //                   eval      dstr_postQ  = pstr_postQ
             //                   eval      dstr_apt    = pstr_apt
             //                   eval      dsubacct    = psubacct
             //                   eval      dusrtype    = pusrtype
             //                   eval      dfrstname   = pfrstname
             //                   eval      dmidlname   = pmidlname
             //                   eval      dlastname   = plastname
             //                   eval      dsuffix     = psuffix
             //                   eval      dchgdate    = cycle_date
             //                   eval      dchgtime    = cycle_time
             //                   eval      dchguser    = huserid
             //                   write     ga_delpet
             //                   delete    ga_petrec

             if ppetactive  = 'D';
                ppetstatus  = 'C';
                ppetactive  = 'A';
             else;
                ppetactive  = 'D';
             endif;

             pchgdate    = cycle_date;
             pchgtime    = cycle_time;
             pchguser    = huserid;

             update ga_petrec;
          endif;

       endsr;

       // *********************************************************************
       //     PP_petedt     Panel Processing to Edit a New Pet
       // *********************************************************************
       begsr PP_petedt;

          clear condition;

          //     Check pet type is selected

          if hpet_type   = *blanks;
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#5880';
          endif;

          //     Check pet name is not blank

          if hpet_name   = *blanks;
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#5880';
          endif;

          //     If the pet name does not equal the key pet name
          //     Check that this new pet name does not already exist

          if hpet_name  <> h_kname or
                 hpet_type  <> h_ktype;

             //   Retrieve the resident record by userid
             exsr get_resu;

             if not %open(gam_pet1);
                open gam_pet1;
             endif;

             //   If Found we have error cause this pet name already exists
             //   for this Raddress
             chain(n) (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct : hpet_type : hpet_name)
                    ga_petrec;
             if %found(gam_pet1);
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5886';
             endif;
          endif;

          //     Rabies YYYY must be 4 digits and all numeric

          //                   IF        hrabies_y4 <> *blanks
          //     xdig:blnk10   xlate     hrabies_y4    byte4
          //                   if        byte4      <> *blanks or
          //                             %len(%trim(hrabies_y4)) <> 4
          //                   movel     'parm-bad'    condition
          //                   add       1             ei
          //                   movel     '#5885'       errs(ei)
          //                   endif
          //                   ENDIF

          // *********** BELOW HERE IS NOT CHECKED FOR ADMIN USERS ****
          leavesr;

          //     Check the pet color is entered
          if hpet_color  = *blanks;
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#5881';
          endif;

          //     Check the pet breed is entered

          if hpet_breed  = *blanks;
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#5882';
          endif;

          //     Check that gender has been selected

          if hpet_sex    = *blanks;
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#5883';
          endif;

       endsr;

       // *********************************************************************
       //     PP_petupd     Panel Processing to Update a Pet
       // *********************************************************************
       begsr PP_petupd;

          //   Retrieve the resident record by userid
          exsr get_resu;

          //   Retrieve the pet data by address and pet name
          if not %open(gam_pet1);
             open gam_pet1;
          endif;

          chain (hfice : rstr_dir : rstr_name :
                rstr_hnum : rstr_prequ : rstr_type :
                rstr_postD : rstr_postQ : rstr_apt :
                rsubacct : h_ktype : h_kname) ga_petrec;

          //   Found the Pet, Update with New Information from screen
          if %found(gam_pet1);

             ppettype = hpet_type;
             ppetbreed = hpet_breed;
             ppetcolor = hpet_color;
             pname       = %trim(hpet_name);
             psex = hpet_sex;
             prabies     = hrabies_y4 + hrabies_m2;
             ppetstatus = 'C';
             psource = 'ADU';

             pchgdate    = cycle_date;
             pchgtime    = cycle_time;
             pchguser    = huserid;

             update ga_petrec;
          endif;

       endsr;

       // *********************************************************************
       //     PP_OTC        Panel Processing to Edit an OTC order
       // *********************************************************************
       begsr PP_OTC;

          //    Edit the input to check for errors

          exsr Edit_OTC;

          if condition   = *blanks;

             // -If user checked Update Info Box - then update the contact rec
             if hupd_info   = 'Y';
                exsr upd_cntct;
             endif;

             //    Get option and master record, calculate charge

             if NOT %open(gaoption1);
                open gaoption1;
             endif;
             chain (hfice : h_applid : hrecid : husrtype :
                   hproduct) ga_parms;
             *in90 = not %found;

             exsr get_master;

             //    Calculate the rate

             //   Rate is .65 if we are > 7 days from start of sale, 1.00
             //   after that point

             $date = %editc(cycle_date:'X');
             $value      = 7;
             $unit       = 'D';
             byte8       = dateplus($date:$value:$unit);
             temp_date = %dec(%xlate(' ':'0':
                   byte8):8:0);
             if temp_date   < ga_ef_datf;
                //                             hfice       = '001286'
                //                   eval      otc_rate    = .65
                if ga_mh_otc   > 0;
                   otc_rate    = ga_mh_otc;
                else;
                   otc_rate    = g_mh_otc;
                endif;
             else;
                //                   eval      otc_rate    = 1.00
                if ga_mh_otc2  > 0;
                   otc_rate    = ga_mh_otc2;
                else;
                   otc_rate    = g_mh_otc2;
                endif;
             endif;

             pk_7p0      = cvt2num(hnumpmits);
             otc_cost    = otc_rate * pk_7p0;


             //    Poll FedEx for shipping costs - (if not USPS)

             if condition   = *blanks and
                    hship      <> 'U';
                exsr do_fedex;
             endif;

             //    Calculate the total cost (do_fedex sets otc_ship)

             otc_total   = otc_cost + otc_ship;
             if hrush       = 'Y';
                otc_total   = otc_total + RUSH_FEE;
             endif;
          endif;

       endsr;

       // *******************************************************************
       //     Do_Paid_RT:  Mark Parking Permit Order as PAID for a COD
       //                  BASED ON ROOT ORD#
       // *******************************************************************
       begsr Do_Paid_RT;

       clear rtr_data;
       condition = GAORD_markPaid(horder#:hfice:huserid:origin:'ADM':hcheckno);

       endsr;

       // *******************************************************************
       //     do_pp_3pty:  Mark Parking Permit Order as a Receivable
       // *******************************************************************
       begsr Do_PP_3pty;

       clear rtr_data;
       condition = GAORD_mark3rdParty(horder#:hfice:huserid:'ADM':h3pp_user);

       endsr;

       // *******************************************************************
       //     Do_Select:   Write out a specifc SELECT Statement Data
       //                  PRESET the SLCT_TYPE
       // *******************************************************************
       begsr Do_Select;

          select;
                //                                         <SELECT>  1-31 Days
             when slct_type   = 'DAY';
                if hdays2      = *blanks;
                   hdays2      = adate8dd;
                endif;

                //                                         Put out a BLANK - DAY
                if slct_null   = 'Y';
                   field_150   = '<option value="99">';

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                endif;

                for s1 = 1 To 31;
                   clear field_150;
                   evalr byte2 = %editc(s1:'X');
                   if byte2       = hdays2;
                      field_150   = '<option value="' +
                                        byte2 +
                                        '" SELECTED>' + byte2;
                   else;
                      field_150   = '<option value="' +
                                        byte2 +
                                        '">' + byte2;
                   endif;

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                endfor;

       when slct_type = 'IPD';

          if hlastDays = *blanks;
             hlastDays = '15';
          endif;

          if hlastDays = '15';
             field_150 = '<option value="15" SELECTED>15';
          else;
             field_150 = '<option value="15">15';
          endif;
          BufOut = %trim(bufout) + field_150 + linefeed;
          bytesize = 1 + bytesize + %len(%trimr(field_150));
          exsr checkbufr;

          for s1 = 1 to 3;
             if hlastDays = %char(30*s1);
                field_150 = '<option value="' + %char(30*s1) + '" SELECTED>' +
                            %char(30*s1);
             else;
                field_150 = '<option value="' + %char(30*s1) + '">' +
                            %char(30*s1);
             endif;
             BufOut = %trim(bufout) + field_150 + linefeed;
             bytesize = 1 + bytesize + %len(%trimr(field_150));
             exsr checkbufr;
          endfor;

       //                                 List of <A HREF>  1-12 Months
             when slct_type   = 'MON';

                for s1 = 1 To 12;
                   clear field_150;
                   evalr byte2 = %editc(s1:'X');
                   field_150   = '<a href="javascript:' +
                       'setsubmitMNTH(''' + byte2 +
                       ''');">' + month(s1) + '</a>';

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                endfor;

                //                                          <SELECT> 1-12 Months
             when slct_type   = 'MTH';
                if hmonth2     = *blanks;
                   hmonth2     = adate8mm;
                endif;

                for s1 = 1 To 12;
                   clear field_150;
                   evalr byte2 = %editc(s1:'X');
                   if byte2       = hmonth2;
                      field_150   = '<option value="' +
                                        byte2 +
                                        '" SELECTED>' + month(s1);
                   else;
                      field_150   = '<option value="' +
                                        byte2 +
                                        '">' + month(s1);
                   endif;

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                endfor;

                //                                          <SELECT> 1-10 Years
       when slct_type = 'YEA';
          if hyear4 = *blanks;
             hyear4 = %subst(%char(today):1:4);
          endif;

          year = %dec(hyear4:4:0);
          for s1 = 1 to 4;
             byte4 = %char(year);
             if byte4 = hyear4;
                field_150 = '<option value="' + byte4 + '" SELECTED>' + byte4;
             else;
                field_150 = '<option value="' + byte4 + '">' + byte4;
             endif;

             BufOut = %trim(bufout) + field_150 + linefeed;
             bytesize = 1 + bytesize + %len(%trimr(field_150));
             exsr checkbufr;

             year -= 1;
          endfor;

       //                                                   Monthly Reports
          when slct_type   = 'RPT';

             // ---Open the <Table> and <SELECT>
             element_wd  = 'MSG';
             element_fl  = '5240';
             element_p1  = 'R';
             exsr wrtpanlmsg;

             visableYear = %subst(rr01_ym:3:2);
             visableMonth = %subst(rr01_ym:5:2);

             exec sql declare MonthlyRept_cursor cursor for
                      select mlfile, mlname, mlnrcd
                        from arch_nobu/reptmbrlst
                       where mllib = 'ARCH_NOBU'
                         and substring(mlname,2,6) = :ifice
                         and substring(mlname,1,1) = :rpt_hdr and not
                        (substring(mlfile,8,2) >= :visableYear and
                         substring(mlname,9,2) > :visableMonth)
                    order by mlfile desc, mlname desc;

             exec sql open MonthlyRept_cursor;

             exec sql fetch MonthlyRept_cursor for 12 rows into :reportData;
             exec sql get diagnostics :sql#rows = row_count,
                                      :sqlstatus = db2_return_status,
                                      :sqllastrow = db2_last_row;
             exec sql close MonthlyRept_cursor;

             for rptIndex = 1 to sql#rows;
                rpt_ds = reportData(rptIndex).mlname +
                         %subst(reportData(rptIndex).mlfile:8:2);

                if %int(rpt_mnth) <> 99;
                   wMonth = month(%int(rpt_mnth));
                else;
                   wMonth = '***';
                endif;

                wYear = '20' + rpt_Year;

                clear field_150;
                field_150 = '<option value="' + %trim(rpt_ds) +
                            '">&nbsp;&nbsp;' + %trim(wMonth) +
                            '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +
                            %trim(wYear) + '&nbsp;&nbsp;&nbsp;' +
                            '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +
                            %trim(%editc(%int(reportData(rptIndex).mlnrcd
                                               * 160):'3'));

                BufOut = %trimr(BufOut) + field_150;
                BufOut = %trimr(BufOut) + linefeed;
                bytesize    = 1 + bytesize +
                                  %len(%trimr(field_150));
                exsr checkbufr;
             endfor;

             when slct_type = 'YR4';
             year_beg = %int(%subst(%char(%date():*iso):1:4));
             year_end = %int(%subst(%char(%date()-%months(18):*iso):1:4));
             if hyear4b = *blanks;
                hyear4b = %subst(%char(%date():*iso):1:4);
             endif;

             bufout = %trim(bufout) + '<select id="YEAR4" name="YEAR4">' +
                   '<option value="">Year</option>';
             for s1=year_beg downto year_end;
                if %char(s1) = hyear4b;
                   field_150 = '<option value="' + %char(s1) + '" ' +
                             'selected>' + %char(s1) + '</option>';
                else;
                   field_150 = '<option value="' + %char(s1) + '">' +
                             %char(s1) + '</option>';
                endif;
                bufout = %trim(bufout) + %trim(field_150);
                exsr checkbufr;
             endfor;
             bufout = %trim(bufout) + '</select>' + linefeed;
             exsr sendbufr;

          when slct_type = 'MN2';
             if hmonth2b = *blanks;
                hmonth2b = %subst(%char(cycle_Date):5:2);
             endif;
             bufout = %trim(bufout) + '<select id="MONTH2" name="MONTH2">' +
                   '<option value="">Month</option>';
             for s2=1 to 12;
                if %editc(s2:'X') = hmonth2b;
                   field_150 = '<option value="' + %editc(s2:'X') + '" ' +
                             'selected="selected">' + %trim(month(s2)) +
                             '</option>';
                else;
                   field_150 = '<option value="' + %editc(s2:'X') + '">' +
                             %trim(month(s2)) + '</option>';
                endif;
                bufout = %trim(bufout) + %trim(field_150);
                exsr checkbufr;
             endfor;
             bufout = %trim(bufout) + '</select>' + linefeed;
             exsr sendbufr;

          when slct_type = 'DY2';
             if hday2b = *blanks;
                hday2b = %subst(%char(cycle_Date):7:2);
             endif;
             bufout = %trim(bufout) + '<select id="DAY2" name="DAY2">' +
                   '<option value="">Day</option>';
             for s2=1 to 31;
                if %editc(s2:'X') = hday2b;
                   field_150 = '<option value="' + %editc(s2:'X') + '" ' +
                             'selected="selected">' + %editc(s2:'X') +
                             '</option>';
                else;
                   field_150 = '<option value="' + %editc(s2:'X') + '">' +
                             %editc(s2:'X') + '</option>';
                endif;
                bufout = %trim(bufout) + %trim(field_150);
                exsr checkbufr;
             endfor;
             bufout = %trim(bufout) + '</select>' + linefeed;
             exsr sendbufr;

                //     Parking Product List
             when slct_type   = 'PRD';

                //   Setl and scan through options that are subheadings and valid

                if NOT %open(gaoption1);
                   open gaoption1;
                endif;

                setll (hfice : h_applid) gaoption1;
                *in95 = not %found;

                dow *in95 <> *on;
                   reade (hfice : h_applid) ga_parms;
                   *in95 = %eof;
                   if *in95;
                      leave;
                   endif;

                   if ga_recid   <> 'VE' and
                          ga_recid   <> 'PE' and
                          ga_recid   <> 'GP';
                      iter;
                   elseif ga_formid  =  'LPRPERMIT';
                      iter;
                   endif;

          if gbogutype <> *blanks and gbogutype = ga_usrtype;
             iter;
          endif;

                   if ga_hdrsub  <> 'S' or
                          ga_tempdwn  = 'Y';
                      iter;
                   endif;

                   //   Only display products not expired and within 35 days of
                   //   start of sale

                   $date = %editc(cycle_date:'X');
                   $value      = 35;
                   $unit       = 'D';
                   byte8       = dateplus($date:$value:$unit);
                   temp_date = %dec(%xlate(' ':'0':
                         byte8):8:0);

                   if ga_ef_datf <> 0   AND
                          (temp_date  < ga_ef_datf or
                          cycle_date  > ga_ef_datt);
                      iter;
                   endif;

                   //   Set selected product to first option if needed

                   if hproduct    = *blanks;
                      hrecid      = ga_recid;
                      husrtype    = ga_usrtype;
                      hproduct    = ga_value;
                   endif;

                   clear field_150;
                   if hrecid      = ga_recid and
                          hproduct    = ga_value and
                          husrtype    = ga_usrtype;
                      field_150   = '<option value="' +
                                        ga_recid +
                                        ga_value + ga_usrtype +
                                        '" SELECTED>' +
                                        %trim(ga_text_1);
                   else;
                      field_150   = '<option value="' +
                                        ga_recid +
                                        ga_value + ga_usrtype +
                                        '">' + %trim(ga_text_1);
                   endif;

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                enddo;

                //     Parking Number of Permits to order
             when slct_type   = 'NUM';

                //   First get the format record for the option selected so
                //   we know what permit numbers are allowed

                tapplid     = h_applid;
                trecid      = hrecid;
                tusrtype    = husrtype;
                tproduct    = hproduct;
                exsr get_option;

                if not %open(gapp_fmt1);
                   open gapp_fmt1;
                endif;
                chain ga_format gapp_frmat;
                *in90 = not %found;
                if *in90;
                   clear fpmit_type;
                endif;

                for i = 1 To size_nump;
                   htmlstmt = html_nump(i);

                   if html_1to8   = '((STOP))';
                      leave;
                   elseif html_1to8   = '((NOTR))';
                      //   R = Reverse Image (which means run through the press)
                      if fpmit_type  = 'R';
                         iter;
                      else;
                         evalr byte72 = htmlstmt;
                         htmlstmt = byte72;
                      endif;

                   elseif html_1to8   = '((MRKT))';
                      if hfice      <> 'PPMRKT';
                         iter;
                      else;
                         evalr byte72 = htmlstmt;
                         htmlstmt = byte72;
                      endif;

                   elseif html_1to8   = '((CLLC))';
                      if origin     <> 'CLLC';
                         iter;
                      else;
                         evalr byte72 = htmlstmt;
                         htmlstmt = byte72;
                      endif;
                   endif;

                   //   Only output some sizes for non 'R'everse image permits

                   if hnumpmits   = html_1to5;
                      clear field_150;
                      field_150   = '<option value="' +
                                        %trim(html_1to5) +
                                        '" SELECTED>' +
                                        %trim(html_1to10);
                   else;
                      field_150   = '<option value="' +
                                        %trim(html_1to5) +
                                        '">' + %trim(html_1to10);
                   endif;

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                endfor;

                //                                                    Directions
             when slct_type   = 'DIR';

                for s1 = 1 To 8;
                   clear field_150;
                   byte2       = ar_slctdir(s1);
                   if byte2       = the_dir;
                      field_150   = '<option value="' +
                                        byte2 + '" SELECTED>' +
                                        %trim(byte2);
                   else;
                      field_150   = '<option value="' +
                                        byte2 + '">' +
                                        %trim(byte2);
                   endif;

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                endfor;

                //                                                    Street Types
             when slct_type   = 'STY';

                for s1 = 1 To 22;
                   clear field_150;
                   byte4       = sel_strtyp(s1);
                   if byte4       = hstr_type;
                      field_150   = '<option value="' +
                                        byte4 + '" SELECTED>' +
                                        %trim(byte4);
                   else;
                      field_150   = '<option value="' +
                                        byte4 + '">' +
                                        %trim(byte4);
                   endif;

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                endfor;

                //     Parking 3rd Party Payment Options
             when slct_type   = '3RD';

                //   Setl and scan through records in GA_3RDPT1A

                if NOT %open(ga_3rdpt1a);
                   open ga_3rdpt1a;
                endif;

                //   Start with empty option
                clear field_150;
                field_150   = '<option value="' +
                                  '          ">' +
                                  'Select A Payee';
                BufOut = %trimr(BufOut) + field_150;
                BufOut = %trimr(BufOut) + linefeed;
                bytesize    = 1 + bytesize +
                                  %len(%trimr(field_150));
                exsr checkbufr;
                // ----

                setll hfice third_1a;
                *in95 = not %found;

                dow *in95 <> *on;
                   reade hfice third_1a;
                   *in95 = %eof;
                   if *in95;
                      leave;
                   endif;

                   clear field_150;
                   field_150   = '<option value="' +
                                     %trim(bbilluser) + '">' +
                                     %trim(bcompany);

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                enddo;

                //  Vehicle Make from GAMODELS1
             when slct_type   = 'VMK';

                //   Setl and scan through records in GAMODELS1 w/ RECID='1'

                if NOT %open(gamodels1);
                   open gamodels1;
                endif;

                //   Start with empty option
                clear field_150;
                field_150   = '<option value="' +
                                  '          ">' +
                                  'Select Make';
                BufOut = %trimr(BufOut) + field_150;
                BufOut = %trimr(BufOut) + linefeed;
                bytesize    = 1 + bytesize +
                                  %len(%trimr(field_150));
                exsr checkbufr;
                // ----

                setll '1' model_rec;
                *in95 = not %found;

                dow *in95 <> *on;
                   reade '1' model_rec;
                   *in95 = %eof;
                   if *in95;
                      leave;
                   endif;

                   clear field_150;
                   if hveh_make   = mvehmake;
                      field_150   = '<option value="' +
                                        %trim(mvehmake) +
                                        '" SELECTED>' +
                                        %trim(mvehmake);
                   else;
                      field_150   = '<option value="' +
                                        %trim(mvehmake) + '">' +
                                        %trim(mvehmake);
                   endif;

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                enddo;

                //  Vehicle Model from GAMODELS1
             when slct_type   = 'VMD';
                krecord_id  = '2';

                //   Setl and scan through records in GAMODELS1 w/ RECID='2'

                if NOT %open(gamodels1);
                   open gamodels1;
                endif;


                setll (krecord_id : hveh_make) model_rec;
                *in95 = not %found;
                if NOT %equal;
                   //   Start with empty option
                   clear field_150;
                   field_150   = '<option value="' +
                                     '          ">' +
                                     'Select Model First';
                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                   // ----
                else;

                   dow *in95 <> *on;
                      reade (krecord_id : hveh_make) model_rec;
                      *in95 = %eof;
                      if *in95;
                         leave;
                      endif;

                      clear field_150;
                      if hveh_model  = mvehmodel;
                         field_150   = '<option value="' +
                                           %trim(mvehmodel) +
                                           '" SELECTED>' +
                                           %trim(mvehmodel);
                      else;
                         field_150   = '<option value="' +
                                           %trim(mvehmodel) + '">' +
                                           %trim(mvehmodel);
                      endif;

                      BufOut = %trimr(BufOut) + field_150;
                      BufOut = %trimr(BufOut) + linefeed;
                      bytesize    = 1 + bytesize +
                                        %len(%trimr(field_150));
                      exsr checkbufr;
                   enddo;
                endif;

                //  States for State of Issuance
             when slct_type   = 'STA';
                krecord_id  = 'S';

                //   Setl and scan through records in CICCSTAT1 w/ RECID='S'

                if NOT %open(ciccstat1);
                   open ciccstat1;
                endif;

                //   Start with empty option
                clear field_150;
                field_150   = '<option value="' +
                                  '   ">' +
                                  'Select State of Issue';
                BufOut = %trimr(BufOut) + field_150;
                BufOut = %trimr(BufOut) + linefeed;
                bytesize    = 1 + bytesize +
                                  %len(%trimr(field_150));
                exsr checkbufr;
                // ----

                setll (krecord_id : kiso_cc) ciccstat1;
                *in95 = not %found;

                dow *in95 <> *on;
                   reade (krecord_id : kiso_cc) ccstate;
                   *in95 = %eof;
                   if *in95;
                      leave;
                   endif;

                   //   Skip if APO in the Name
                   if %scan('APO':eshrtname:1) > 0;
                      iter;
                   endif;

                   clear field_150;
                   if the_state   = estate;
                      field_150   = '<option value="' +
                                        estate +
                                        '" SELECTED>' +
                                        %trim(eshrtname);
                   else;
                      field_150   = '<option value="' +
                                        estate + '">' +
                                        %trim(eshrtname);
                   endif;

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                enddo;

                //                          Rabies Month    <SELECT> 1-12 Months
             when slct_type   = 'RMM';

                //   Start with empty option
                clear field_150;
                field_150   = '<option value="' +
                                  '  ">' +
                                  'Month';
                BufOut = %trimr(BufOut) + field_150;
                BufOut = %trimr(BufOut) + linefeed;
                bytesize    = 1 + bytesize +
                                  %len(%trimr(field_150));
                exsr checkbufr;

                for i1 = 1 To 12;
                   clear field_150;
                   evalr byte2 = %editc(i1:'X');
                   if byte2       = hrabies_m2;
                      field_150   = '<option value="' +
                                        byte2 +
                                        '" SELECTED>' + month(i1);
                   else;
                      field_150   = '<option value="' +
                                        byte2 +
                                        '">' + month(i1);
                   endif;

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                endfor;

                //                                          <SELECT> Salutations
             when slct_type   = 'SAL';

                for i1 = 1 To 5;
                   clear field_150;
                   if hsalut      = salut(i1);
                      field_150   = '<option value="' +
                                        salut(i1) +
                                        '" SELECTED>' + salut(i1);
                   else;
                      field_150   = '<option value="' +
                                        salut(i1) +
                                        '">' + salut(i1);
                   endif;

                   BufOut = %trimr(BufOut) + field_150;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = 1 + bytesize +
                                     %len(%trimr(field_150));
                   exsr checkbufr;
                endfor;


       when slct_type = 'SPR';
          if not %open(dvinstitl7);
             open dvinstitl7;
          endif;

          setll (csuperuser) ficegrprec;
          if not %equal(dvinstitl7);
             leavesr;
          endif;

          field_150 = '<p style="text-align:center">' +
                      '<select id="NUFICE" name="NUFICE" ' +
                      'title="Change School">';
          bufout = %trim(bufout) + %trim(field_150) + linefeed;
          exsr checkbufr;

          reade (csuperuser) ficegrprec;
          dow not %eof(dvinstitl7);
             if (%subst(gfice:1:2) = 'XX' or %subst(gfice:1:2) = 'SI') and
                gficegroup <> 'WV2' and gficegroup <> 'DPL';
                reade (csuperuser) ficegrprec;
                iter;
             endif;

             if cfreefice = gfice;
                field_150 = '<option value="' + gfice + '" ' +
                            'selected="selected">' +
                            %trim(gsch_sname) + '</option>';
             else;
                field_150 = '<option value="' + gfice + '">' +
                            %trim(gsch_sname) + '</option>';
             endif;
             bufout = %trim(bufout) + %trim(field_150) + linefeed;
             exsr checkbufr;
             reade (csuperuser) ficegrprec;
          enddo;
          field_150 = '</select><input type="button" value="Change" ' +
                  'onclick="setsubmit(document.form1.ACTION,''NUF'');" />' +
                  '</p>';

          bufout = %trim(bufout) + %trim(field_150) + linefeed;
          exsr checkbufr;
       other;
       endsl;


       endsr;

       // **************************************************************
       //    DO_STATUS:   Initlize wrk_status field with text explaining
       //                 the status code
       // **************************************************************
       begsr Do_Status;

          select;
             when bstatus     = ' ';
                wrk_status  = 'Active';

             when bstatus     = 'D';
                wrk_status  = 'Deleted';

             when bstatus     = 'I';
                wrk_status  = 'Temporarily Inactive';

             other;
                wrk_status  = 'UNDEFINED';
          endsl;

       endsr;

       // **************************************************************
       //    srh_resveh:  This routine is used to search the Resident/
       //                 /Vehicle/Pet Databases
       //
       //    For Resident this routine takes the address from the
       //    screen and gets the post office standard address and
       //    tries to find it in the Resident Database.
       //
       //    For Vehicles the hsrch_dta5 sould have a plate number,
       //    this routine chains to the GAM_VEH1 by the plate, uses
       //    the address in GAM_VEH1 to chain to the GAM_RES1A record.
       //
       //    For Pets the ---------- could have a pets name,
       //    this routine chains to the GAM_PET1 by the pet name, uses
       //    the address in GAM_PET1 to chain to the GAM_RES1A record.
       // **************************************************************
       begsr srh_resveh;

          clear use_lookup;
          clear use_namsrh;
          clear use_telsrh;
          clear use_vehsrh;
          clear use_adrsrh;

          //  IF we have a KEY already then use it
          if h_key      <> *blanks;
             leavesr;
          endif;

          clear h_key;

          //   If they scanned a barcode, simulate entering a PIN(hsrch_dta6)

          if hscan_fice <> *blanks and
                 hscan_user <> *blanks;
             if hfice      <> hscan_fice;
                //  error
             else;
                %subst(hsrch_dta6:1:8) = hscan_user;
             endif;
          endif;


          //   SEARCH by Resident/Vehicle Pinuser
          if hsrch_dta6 <> *blanks;
             user_id8 = hsrch_dta6;
             found_pin   = 'N';

             //   Pinuser entered, find the Resident record with this userpin
             if not %open(gam_res1u);
                open gam_res1u;
             endif;

             res1uFlag = *off;
             chain(n) (hfice : user_id8) resrec_1u;

             //   Found the pinuser, so set H-fields to use that address
             if %found(gam_res1u);
                hstr_dir    = rstr_dir;
                hstr_name   = rstr_name;
                hstr_hnum   = rstr_hnum;
                hstr_prequ  = rstr_prequ;
                hstr_type   = rstr_type;
                hstr_postD  = rstr_postD;
                hstr_postQ  = rstr_postQ;
                hstr_apt    = rstr_apt;
                hsubacct    = rsubacct;
                found_pin   = 'Y';
     c*                  goto      e_srch6
                res1uFlag = *on;
             endif;

             if res1uFlag = *off;
                //   Pinuser was NOT FOUND in the RESIDENT database
                //   Pinuser entered, find the vehicle record with this vehicle
                if not %open(gam_veh1u);
                   open gam_veh1u;
                endif;

                chain (hfice : user_id8) vehrec_1u;

                //   Found the pinuser, so set H-fields to use that address
                if %found(gam_veh1u);
                   hstr_dir    = vstr_dir;
                   hstr_name   = vstr_name;
                   hstr_hnum   = vstr_hnum;
                   hstr_prequ  = vstr_prequ;
                   hstr_type   = vstr_type;
                   hstr_postD  = vstr_postD;
                   hstr_postQ  = vstr_postQ;
                   hstr_apt    = vstr_apt;
                   hsubacct    = vsubacct;
                   found_pin   = 'Y';
     c*                  goto      e_srch6
                endif;
             endif;

     c*    e_srch6       tag
             if found_pin   = 'Y';
                //   set the H_KEY to WPIN_USER
                if not %open(gam_res1a);
                   open gam_res1a;
                endif;

                chain(n) (hfice : hstr_dir : hstr_name :
                      hstr_hnum : hstr_prequ : hstr_type :
                      hstr_postD : hstr_postQ : hstr_apt :
                      hsubacct) resrec_1a;
                if %found(gam_res1a);
                   %subst(h_key:1:8) = wpin_user;
                endif;

                clear hsrch_tnum;
                clear hsrch_nam;
                clear haddr1;
                clear hsrch_dta5;
                leavesr;
             endif;
          endif;


          //  SEARCH by Plate
          if hsrch_dta5 <> *blanks;

             //   License plate entered, does it exists?
             if not %open(gam_veh1p);
                open gam_veh1p;
             endif;

             setll (hfice : hstate : hsrch_dta5) vehrec_1p;
             reade (hfice : hstate : hsrch_dta5) vehrec_1p;

             //   Found the license plate, get the resident record
             if not %eof(gam_veh1p);
                instance#   = vinstance#;

                if not %open(gam_res1);
                   open gam_res1;
                endif;

                chain (hfice : instance#) ga_resrec;
                if %found(gam_res1);
                   %subst(h_key:1:8) = wpin_user;
                endif;

                //    Check if we have another vehicle with this plate

                reade (hfice : hstate : hsrch_dta5) vehrec_1p;

                if not %eof(gam_veh1p);
                   use_vehsrh  = 'Y';
                   clear h_key;
                endif;

                clear hsrch_tnum;
                clear hsrch_nam;
                clear haddr1;
                clear hsrch_dta6;
                leavesr;
             endif;
          endif;

          //  SEARCH by ADDR1
          if haddr1     <> *blanks;

             //    Submit address entered to address verification software
             //    to return the individual fields for the KEY to gam_res1a

             clear #AV_dqin;
             clear #AV_dqout;
             #AV_func = 'AV';
             #AV_adr1    = haddr1;
             #AV_adr2    = '';
             #AV_city    = icity;
             #AV_stat    = istate;
             //                   eval      #AV_zipc    = ipostcd
             //                   eval      #AV_zip4    = %subst(ipostcd:7:4)
             #AV_case    = 'U';
             #AV_adrl    = '35';
             exsr $get_AV;

             //  03/13/09 MRB started only calling parseaddr if AV cannot parse
             if #AV_status  = 'E' and
                    #av_stnm_o  = *blanks;
                //    Use jeff's address parser if AV software error
                addr_50     = haddr1;
                parsed_adr  = parseaddr(hfice:addr_50);

                #av_prdr_o  = str_dir;
                #av_stnm_o  = str_name;
                dow %len(%trim(str_hnum)) < %len(hstr_hnum);
                   str_hnum    = '0' + %trim(str_hnum);
                enddo;
                #av_stno_o = str_hnum;
                #av_stsf_o  = str_type;
                #av_psdr_o  = str_postD;
                #av_satp_o  = str_postQ;
                #av_sano_o  = str_apt;

                //     need to assemble addr line 1
                byte10      = %triml(str_hnum:'0');
                #AV_adr2_o = %trimr(byte10) + ' ' + str_name;
                #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                    str_prequ;
                #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                    str_type;
                #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                    str_postd;
                #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                    str_postq;
                #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                    str_apt;
                #AV_adr2_o  = %trim(#AV_adr2_o);
             endif;

             hstr_dir    = #av_prdr_o;
             hstr_name   = #av_stnm_o;
             hstr_hnum = #av_stno_o;
             hstr_prequ  = ' ';
             hstr_type   = #av_stsf_o;
             hstr_postD  = #av_psdr_o;
             hstr_postQ  = #av_satp_o;
             hstr_apt    = #av_sano_o;

             haddr1      = #AV_adr2_o;

             //   set the H_KEY to WPIN_USER
             if not %open(gam_res1a);
                open gam_res1a;
             endif;

             //   if we set HSACCT to '00' that means we have selected the FIRST
             //   address of a sub account, so we have to switch to '  ' for KEY
             //   but then have to ensure that we do NOT read the second address
             //   otherwise we find multiple and show the list instead of the one
             //   unique address that was selected.
             skip_sub    = 'N';
             if hsubacct   <> *blanks;
                skip_sub    = 'Y';
                if hsubacct    = '00';
                   clear hsubacct;
                endif;
             endif;

             setll (hfice : hstr_dir : hstr_name :
                   hstr_hnum : hstr_prequ : hstr_type :
                   hstr_postD : hstr_postQ : hstr_apt :
                   hsubacct) gam_res1a;
             *in97 = %equal;
             reade(n) (hfice : hstr_dir : hstr_name :
                   hstr_hnum : hstr_prequ : hstr_type :
                   hstr_postD : hstr_postQ : hstr_apt)
                    resrec_1a;
             *in96 = %eof;
             if *in96       = *on;
             else;
                %subst(h_key:1:8) = wpin_user;

                clear hsrch_tnum;
                clear hsrch_nam;
                clear hsrch_dta5;
                clear hsrch_dta6;

                if skip_sub   = 'Y';
                   leavesr;
                endif;

                //   Is there another address?
                reade(n) (hfice : hstr_dir : hstr_name :
                      hstr_hnum : hstr_prequ : hstr_type :
                      hstr_postD : hstr_postQ : hstr_apt)
                       resrec_1a;
                *in97 = %eof;
                if *in97       = *off;
                   use_adrsrh  = 'Y';
                   clear h_key;
                   leavesr;
                else;
                   leavesr;
                endif;
             endif;

             //   Set error that address is not in postal system and launch the
             //   address lookup window - only if Last Name is not blank
             if hsrch_nam   = *blanks;
                hstr_dir    = #av_prdr_o;
                hstr_name   = #av_stnm_o;


                use_lookup  = 'Y';
                ei += 1;
                errs(ei) = 'We were not able to +
                                match the address +
                                provided with a +
                                resident address.';
             endif;
          endif;

          //  SEARCH by Last Name
          if hsrch_nam  <> *blanks;
             LENLN       = %len(%trim(hsrch_nam));

             //   Last Name entered
             if not %open(gam_res1n);
                open gam_res1n;
             endif;

             setll (hfice : hsrch_nam) gam_res1n;
             reade hfice resrec_1n;
             *in96 = %eof;
             if *in96       = *on or
                    %subst(rlastname:1:LENLN) <> hsrch_nam;
             else;
                %subst(h_key:1:8) = rpin_user;

                clear hsrch_tnum;
                clear hsrch_dta5;
                clear hsrch_dta6;
                clear haddr1;

                reade hfice resrec_1n;
                *in97 = %eof;
                if *in97       = *off and
                       %subst(rlastname:1:LENLN) = hsrch_nam;
                   use_namsrh  = 'Y';
                   clear h_key;
                else;
                   leavesr;
                endif;
             endif;
          endif;

          //  SEARCH by Tel#
          if hsrch_tnum <> *blanks;
             ksrch_tel#  = hsrch_tarea + '-' +
                 %subst(hsrch_tnum:1:3) + '-' +
                 %subst(hsrch_tnum:4:4);

             //   Phone Number Entered
             if not %open(gam_res1t);
                open gam_res1t;
             endif;

             setll (hfice : ksrch_tel#) gam_res1t;
             *in97 = %equal;
             reade hfice resrec_1t;
             *in96 = %eof;
             if *in96       = *on or
                    rtel#      <> ksrch_tel#;
             else;
                %subst(h_key:1:8) = rpin_user;

                clear hsrch_dta5;
                clear hsrch_dta6;
                clear hsrch_nam;
                clear haddr1;

                reade hfice resrec_1t;
                *in97 = %eof;
                if *in97       = *off and
                       rtel#       = ksrch_tel#;
                   use_telsrh  = 'Y';
                   clear h_key;
                   leavesr;
                else;
                   leavesr;
                endif;
             endif;
          endif;


       endsr;

       // **************************************************************
       //    srh_res2:    This routine is used to search the DELETED
       //                 Resident/Vehicle/Pet Databases
       //
       //    For Resident this routine takes the address from the
       //    screen and gets the post office standard address and
       //    tries to find it in the Resident Database.
       //
       //    For Vehicles the hsrch_dta5 could have a plate number,
       //    this routine chains to the GAM_VEH2 by the plate, uses
       //    the address in GAM_VEH2 to chain to the GAM_RES2A record.
       // **************************************************************
       begsr srh_res2;

          clear use_lookup;
          clear use_namsrh;
          clear use_vehsrh;
          clear use_adrsrh;

          //  IF we have a KEY already then use it
          if h_key      <> *blanks;
             leavesr;
          endif;

          clear h_key;

          //  SEARCH by Plate
          if hsrch_dta5 <> *blanks;

             //   License plate entered, does it exists?
             if not %open(gam_veh2p);
                open gam_veh2p;
             endif;

             setll (hfice : hstate : hsrch_dta5) vehrec_2p;
             reade (hfice : hstate : hsrch_dta5) vehrec_2p;

             //   Found the license plate, so get resident record
             if not %eof(gam_veh2p);
                instance#   = vinstance#;

                //   set the H_KEY to RPIN_USER
                if not %open(gam_res2);
                   open gam_res2;
                endif;

                chain (hfice : instance#) resrec_2;
                if %found(gam_res2);
                   h_key = %editc(rinstance#:'X');
                endif;

                //    Check if we have another vehicle with this plate

                reade (hfice : hstate : hsrch_dta5) vehrec_2p;

                if not %eof(gam_veh2p);
                   use_vehsrh  = 'Y';
                   clear h_key;
                endif;

                clear hsrch_nam;
                clear haddr1;
                leavesr;
             endif;
          endif;

          //  SEARCH by ADDR1
          if haddr1     <> *blanks;

             //    Submit address entered to address verification software
             //    to return the individual fields for the KEY to gam_res1a

             clear #AV_dqin;
             clear #AV_dqout;
             #AV_func = 'AV';
             #AV_adr1    = haddr1;
             #AV_adr2    = '';
             #AV_city    = icity;
             #AV_stat    = istate;
             #AV_zipc    = '';
             #AV_zip4    = '';
             #AV_case    = 'U';
             #AV_adrl    = '35';
             exsr $get_AV;

             //  03/13/09 MRB started only calling parseaddr if AV cannot parse
             if #AV_status  = 'E' and
                    #av_stnm_o  = *blanks;
                //    Use jeff's address parser if AV software error
                addr_50     = haddr1;
                parsed_adr  = parseaddr(hfice:addr_50);

                #av_prdr_o  = str_dir;
                #av_stnm_o  = str_name;
                dow %len(%trim(str_hnum)) < %len(hstr_hnum);
                   str_hnum    = '0' + %trim(str_hnum);
                enddo;
                #av_stno_o = str_hnum;
                #av_stsf_o  = str_type;
                #av_psdr_o  = str_postD;
                #av_satp_o  = str_postQ;
                #av_sano_o  = str_apt;

                //     need to assemble addr line 1
                byte10      = %triml(str_hnum:'0');
                #AV_adr2_o = %trimr(byte10) + ' ' + str_name;
                #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                    str_prequ;
                #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                    str_type;
                #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                    str_postd;
                #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                    str_postq;
                #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                    str_apt;
                #AV_adr2_o  = %trim(#AV_adr2_o);

             endif;

             hstr_dir    = #av_prdr_o;
             hstr_name   = #av_stnm_o;
             hstr_hnum = #av_stno_o;
             hstr_prequ  = ' ';
             hstr_type   = #av_stsf_o;
             hstr_postD  = #av_psdr_o;
             hstr_postQ  = #av_satp_o;
             hstr_apt    = #av_sano_o;

             haddr1      = #AV_adr2_o;

             //   set the H_KEY to WPIN_USER
             if not %open(gam_res2a);
                open gam_res2a;
             endif;

             //   if we set HSACCT to '00' that means we have selected the FIRST
             //   address of a sub account, so we have to switch to '  ' for KEY
             //   but then have to ensure that we do NOT read the second address
             //   otherwise we find multiple and show the list instead of the one
             //   unique address that was selected.
             skip_sub    = 'N';
             if hsubacct   <> *blanks;
                skip_sub    = 'Y';
                if hsubacct    = '00';
                   clear hsubacct;
                endif;
             endif;

             setll (hfice : hstr_dir : hstr_name :
                   hstr_hnum : hstr_prequ : hstr_type :
                   hstr_postD : hstr_postQ : hstr_apt :
                   hsubacct) gam_res2a;
             *in97 = %equal;
             reade (hfice : hstr_dir : hstr_name :
                   hstr_hnum : hstr_prequ : hstr_type :
                   hstr_postD : hstr_postQ : hstr_apt)
                    resrec_2a;
             *in96 = %eof;
             if *in96       = *on;
             else;
                h_key = %editc(winstance#:'X');

                clear hsrch_nam;
                clear hsrch_dta5;

                if skip_sub   = 'Y';
                   leavesr;
                endif;

                //   Is there another address?
                reade (hfice : hstr_dir : hstr_name :
                      hstr_hnum : hstr_prequ : hstr_type :
                      hstr_postD : hstr_postQ : hstr_apt)
                       resrec_2a;
                *in97 = %eof;
                if *in97       = *off;
                   use_adrsrh  = 'Y';
                   clear h_key;
                   leavesr;
                else;
                   leavesr;
                endif;
             endif;

             //   Set error that address is not in postal system and launch the
             //   address lookup window - only if Last Name is not blank
             if hsrch_nam   = *blanks;
                hstr_dir    = #av_prdr_o;
                hstr_name   = #av_stnm_o;


                use_lookup  = 'Y';
                ei += 1;
                errs(ei) = 'We were not able to +
                                match the address +
                                provided with a DELETED +
                                resident address.';
             endif;
          endif;

          //  SEARCH by Last Name
          if hsrch_nam  <> *blanks;
             LENLN       = %len(%trim(hsrch_nam));

             //   Last Name entered
             if not %open(gam_res2n);
                open gam_res2n;
             endif;

             setll (hfice : hsrch_nam) gam_res2n;
             reade hfice resrec_2n;
             *in96 = %eof;
             if *in96       = *on or
                    %subst(rlastname:1:LENLN) <> hsrch_nam;
             else;
                h_key = %editc(rinstance#:'X');

                clear hsrch_dta5;
                clear haddr1;

                reade hfice resrec_2n;
                *in97 = %eof;
                if *in97       = *off and
                       %subst(rlastname:1:LENLN) = hsrch_nam;
                   use_namsrh  = 'Y';
                   clear h_key;
                else;
                   leavesr;
                endif;
             endif;
          endif;


       endsr;
       // ****************************************************************
       //     EDIT_BUS:  Edit Business Editor Screen
       // ****************************************************************
       begsr edit_bus;

          clear condition;

          // ----Address state

          if hstate     <> *blanks;
             ccs_data=validST('US':hstate:
                                      fov:fov_fice);
             if %subst(ccs_data:1:5) = 'BADSC';
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5692';
             endif;
          endif;

          // ----Address zip code

          if hpostcd    <> *blanks;
             checkzip=validZip(hpostcd:'US');
             if %subst(checkzip:1:2) = 'BZ';
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5693';
             elseif %subst(checkzip:1:2) = 'OK';
                hpostcd     = %subst(checkzip:3:13);
             endif;
          endif;

          // ----Address tel num

          if htel#      <> *blanks;
             @result=validTel(htel#:'US':'X');
             if @reslt_RC   = 'BT';
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5694';
             else;
                htel#       = @Reslt_tel;
             endif;
          endif;

          //    Check the validity of the address (if entered)

          if condition   = *blanks  AND
                 hpostcd    <> *blanks;
             clear #AV_dqin;
             clear #AV_dqout;
             #AV_func = 'AV';
             #AV_adr1    = haddr1;
             #AV_city    = hcity;
             #AV_stat    = hstate;
             #AV_zipc    = hpostcd;
             #AV_zip4    = %subst(hpostcd:7:4);

             #AV_case    = 'U';
             #AV_adrl    = '35';

             exsr $get_AV;

             if #AV_status <> 'E';
                hstr_hnum = #av_stno_o;
                haddr1      = #av_adr2_o;

                hpostcd     = #AV_zipc_o;
                if #AV_zip4_o <> *blanks;
                   hpostcd     = %trim(hpostcd) + '-' +
                                     #AV_zip4_o;
                endif;
             else;
                //   Set error that address is not in postal system

                condition   = 'INV ADDRES';
                ei += 1;
                errs(ei)    = 'INVALID ADDRESS: ' +
                                  #AV_emsg_o;
                leavesr;
             endif;
          endif;

          // ----# of Employees

          if h#_employs  < 1;
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#5695';
          endif;


       endsr;

       // ****************************************************************
       //     EDIT_OTC:  Edit delivery address screen
       // ****************************************************************
       begsr edit_otc;

          clear condition;

          // ----Is Javascript running correctly???

          if hjs_ok     <> 'Y';
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#2575';
             leavesr;
          endif;

          if (hdel_attn  = *blanks or
                  hdel_addr1 = *blanks or
                  hdel_city  = *blanks or
                  hdel_state = *blanks or
                  hdel_zip   = *blanks);
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#2571';
             leavesr;
          endif;

          // ----Delivery address state

          ccs_data=validST('US':hdel_state:
                                   fov:fov_fice);
          if %subst(ccs_data:1:5) = 'BADSC';
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#2572';
          endif;

          // ----Delivery address zip code

          checkzip=validZip(hdel_zip:'US');
          if %subst(checkzip:1:2) = 'BZ';
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#2573';
          elseif %subst(checkzip:1:2) = 'OK';
             hdel_zip    = %subst(checkzip:3:13);
          endif;

          // ----Delivery address tel num

          if hdel_tel#  <> *blanks;
             @result=validTel(hdel_tel#:'US':'X');
             if @reslt_RC   = 'BT';
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#2574';
             else;
                hdel_tel#   = @Reslt_tel;
             endif;
          else;
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#2574';
          endif;

          // ----Ship type must be selected

          if hship       = *blanks;
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#2578';
          endif;

          // ----Min of 250, Max of 500 permits for rush order

          if hrush       = 'Y' and
                 (250 > cvt2num(%trim(hnumpmits)) or
                  500 < cvt2num(%trim(hnumpmits)));
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#2576';
          endif;

          // ----Make sure there were no other rush orders for this fice
          //     today

          if hrush       = 'Y';
             *in90 = %tlookup(adate8mm : tabdig : tablet);
       // *CVTWNG : %Equal & %Found are not updated by %TLookup
             if *in90;
                thism = tablet;
             endif;
             *in90 = %tlookup(adate8dd : tabdig : tablet);
       // *CVTWNG : %Equal & %Found are not updated by %TLookup
             if *in90;
                thisd = tablet;
             endif;
             evalr thisy = adate8yyyy;

             kbillcycle  = thisy + thism + thisd;
             kcardtype   = 'COD ';
             kpaid_date  = cycle_date;

             if not %open(gaorder1c);
                open gaorder1c;
             endif;

             // ---Scan through orders placed today
             setll (hfice : h_applid : kbillcycle :
                   kcardtype : kpaid_date) gaorder1c;
             *in96 = not %found;

             dow *in96 <> *on;
                reade (hfice : h_applid : kbillcycle :
                      kcardtype : kpaid_date) garec_c;
                *in96 = %eof;
                if *in96;
                   leave;
                endif;

                // ----If the type is rush, make error
                if tttype      = 'R';
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#2570';
                endif;
             enddo;
          endif;

       endsr;

       // ************************************************************************
       // fetchOrdersByDate: Fetch orders from GA order table records
       // ***********************************************************************
       begsr fetchOrdersByDate;

         //SQL query is efficient because we are querying logical gaorder1g
         //which is keyed on fice, applid, completed date & time
         if hdateInd = 'M';
            startDate = %dec(%trim(hyear4b) + %trim(hmonth2b) + '01':8:0);
            endDate = %dec(%trim(hyear4b) + %trim(hmonth2b) + '31':8:0);
            exec sql
               declare curmonth cursor for
                  select *
                    from gaorder1g
                    where tfice = :hfice
                    and tapplid = :h_applid
                    and tga_fin_dt >= :startdate
                    and tga_fin_dt <= :enddate
                    order by tga_fin_dt desc, tga_fin_tm desc;

            exec sql open curmonth;

            dow sqlStatus = 0;

               exec sql fetch curmonth for 50 rows into :order_ds;

               exec sql get diagnostics :sql#rows = row_count,
                                        :sqlstatus = db2_return_status,
                                        :sqllastrow = db2_last_row;
               if sql#rows = 0;
                  leave;
               endif;

               if not headerOut;
                  exsr rtnDpoh;
                  headerOut = #true;
               endif;

               for row_idx = 1 to sql#rows;
                  orderds = order_ds(row_idx);
                  exsr $ga_row;


               endfor;

               //  Close Table
               BufOut = %trimr(BufOut) + '</table>';
               BufOut = %trimr(BufOut) + '<p>';
               condition = 'multiple ';

            enddo;

            exec sql close curmonth;

         elseif hdateInd = 'D';
            startDate = %dec(%trim(hyear4b) + %trim(hmonth2b) +
                             %trim(hday2b):8:0);
            exec sql
               declare curdate cursor for
                  select *
                    from gaorder1g
                    where tfice = :hfice
                    and tapplid = :h_applid
                    and tga_fin_dt = :startdate
                    order by tga_fin_dt desc, tga_fin_tm desc;

            exec sql open curdate;

            dow sqlStatus = 0;
            exec sql fetch curdate for 50 rows into :order_ds;

            exec sql get diagnostics :sql#rows = row_count,
                                     :sqlstatus = db2_return_status,
                                     :sqllastrow = db2_last_row;

            if sql#rows = 0;
               leave;
            endif;

            if not headerOut;
               exsr rtnDpoh;
               headerOut = #true;
            endif;

            for row_idx = 1 to sql#rows;
               orderds = order_ds(row_idx);
               exsr $ga_row;

            endfor;

            //  Close Table
            BufOut = %trimr(BufOut) + '</table>';
            BufOut = %trimr(BufOut) + '<p>';
            condition = 'multiple ';

            enddo;

            exec sql close curdate;

         endif;


       endsr;

       // ****************************************************************
       //     fill_resd:  Pre-fill the Residence Data screen
       // ****************************************************************
       begsr fill_resd;

          if have_res    = #false;
             exsr get_resu;
          endif;

          husrtype = rusrtype;
          hsalut = rsalut;
          hfrstname = rfrstname;
          hmidlname = rmidlname;
          hlastname = rlastname;
          hsuffix = rsuffix;
          haddr1 = raddr1;
          hcity = rcity;
          hstate = rstate;
          hpostcd = rpostcd;
          htel# = rtel#;
          hemail = remail;
          hem_optin = rem_optin;
          hpo_box# = rpo_box#;
          if rpo_box#    = *blanks;
             halt_addr1 = ralt_addr1;
             halt_city = ralt_city;
             halt_state = ralt_state;
             halt_zipcd = ralt_zip;
          endif;
          hin_out = rin_out;

       endsr;

       // ****************************************************************
       //     fill_res2d:  Pre-fill the Residence Data screen
       // ****************************************************************
       begsr fill_res2d;

          if have_res2   = #false;
             exsr get_res2;
          endif;

          husrtype = rusrtype;
          hsalut = rsalut;
          hfrstname = rfrstname;
          hmidlname = rmidlname;
          hlastname = rlastname;
          hsuffix = rsuffix;
          haddr1 = raddr1;
          hcity = rcity;
          hstate = rstate;
          hpostcd = rpostcd;
          htel# = rtel#;
          hemail = remail;
          hem_optin = rem_optin;
          hpo_box# = rpo_box#;
          if rpo_box#    = *blanks;
             halt_addr1 = ralt_addr1;
             halt_city = ralt_city;
             halt_state = ralt_state;
             halt_zipcd = ralt_zip;
          endif;
          hin_out = rin_out;

       endsr;

       // ****************************************************************
       //     fill_petd:  Pre-fill the Pet Data screen
       // ****************************************************************
       begsr fill_petd;

          user_id8 = h_key;

          //   Retrieve the resident address by userid
          if not %open(gam_res1u);
             open gam_res1u;
          endif;

          chain(n) (hfice : user_id8) resrec_1u;
          if %found(gam_res1u);

             //   Retrieve the pet data by address and Name
             if not %open(gam_pet1);
                open gam_pet1;
             endif;

             chain(n) (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct : h_ktype : h_kname) ga_petrec;

             //   Found the pet name, so set H-fields to use that address
             if %found(gam_pet1);
                hpet_type = ppettype;
                hpet_breed = ppetbreed;
                hpet_color = ppetcolor;
                hpet_name   = %trim(pname);
                hpet_sex = psex;
                hrabies_y4  = %subst(prabies:1:4);
                hrabies_m2  = %subst(prabies:5:2);
                hlastordr#  = plastordr#;
                hpetstatus  = ppetstatus;
                hpetactive  = ppetactive;
             endif;
          endif;

       endsr;

       // ****************************************************************
       //     fill_vehd:  Pre-fill the Vehicle Data screen
       // ****************************************************************
       begsr fill_vehd;

          //   Retrieve the resident record by userid
          exsr get_resu;

          //   Retrieve the vehicle data by Raddress and license plate
          if not %open(gam_veh1);
             open gam_veh1;
          endif;

          chain(n) (hfice : rstr_dir : rstr_name :
                rstr_hnum : rstr_prequ : rstr_type :
                rstr_postD : rstr_postQ : rstr_apt :
                rsubacct : h_kpliss : h_kplate)
                 ga_vehrec;

          //   Found the license plate, so set H-fields to use that address
          if %found(gam_veh1);
             hveh_plate  = vvehplate;
             hveh_pliss  = vvehpliss;
             hveh_class  = vvehclass;
             hvehweight  = vvehweight;
             hveh_make   = vvehmake;
             hveh_model  = vvehmodel;
             hveh_body   = vvehbody;
             hveh_year   = vvehyear;
             hveh_color  = vvehcolor;
             hveh_stckr  = vvehstickr;
             hveh_vin#   = vvehvin;
             hveh_dlnum  = vlicense;
             hold_dlnum  = vlicense;
             hvehstatus  = vvehstatus;
             hvehactive  = vvehactive;
             hvehaction  = vvehaction;
             hvehsenior  = vvehsenior;
             hveh_prdcd  = vvehprdcod;
             hlastordr#  = vlastordr#;
             hvfrstname  = vfrstname;
             hvmidlname  = vmidlname;
             hvlastname  = vlastname;
          endif;

       endsr;

       // **************************************************************
       //    GET_A_MSG    Get MSG_TEXT field - Doesnt write to Buffer
       // **************************************************************
       begsr get_a_msg;

          element_md = byte13;
          exsr WrtPanlGet;

          byte4 = msg_level1;

       endsr;

       // **************************************************************
       //    GET_BUS1     Get business record
       // **************************************************************
       begsr get_bus1;

          if not %open(gam_bus1);
             open gam_bus1;
          endif;

          //    Use the Key value to chain to the record then update

          chain (hfice : hidcode) ga_busrec;

          //    Populate h fields

          if %found;
             hcontact = bcontact;
             hcompany = bcompany;
             haddr1 = baddr1;
             hcity = bcity;
             hstate = bstate;
             hpostcd = bpostcd;
             htel# = btel#;
             hemail = bemail;
             h#_employs = %dec(%subst(%editc(b#_employs
                 :'X'):
                     1:3):3:0);
             hpin_user = bpin_user;
          else;
             //   error
          endif;

       endsr;

       // **************************************************************
       //    Get_C_Text:   Get the Call Type Text
       // **************************************************************
       begsr Get_C_Text;


       if pcalltype <> *blanks;

             byte2       = pcalltype + ' ';
             s1          = 1;

             if psys_type   = 'PP';
                if psource     = 'AUT';
                   s1 = %lookup(byte2 : auto_pp_c : s1);
                   *in90 = (s1 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
                   if s1 = 0;
                      s1 = 1;
                   endif;
                   if *in90;
                      cd_3to69 = auto_pp_t(s1);
                   endif;
                else;
                   s1 = %lookup(byte2 : call_pp_c : s1);
                   *in90 = (s1 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
                   if s1 = 0;
                      s1 = 1;
                   endif;
                   if *in90;
                      cd_3to69 = call_pp_t(s1);
                   endif;
                endif;
                if not *in90;
                   %subst(cd_3to69:60:8) = 'NOTFOUND';
                endif;

             elseif psys_type   = 'MS';
                if psource     = 'AUT';
                   s1 = %lookup(byte2 : auto_ms_c : s1);
                   *in90 = (s1 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
                   if s1 = 0;
                      s1 = 1;
                   endif;
                   if *in90;
                      cd_3to69 = auto_ms_t(s1);
                   endif;
                else;
                   s1 = %lookup(byte2 : call_ms_c : s1);
                   *in90 = (s1 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
                   if s1 = 0;
                      s1 = 1;
                   endif;
                   if *in90;
                      cd_3to69 = call_ms_t(s1);
                   endif;
                endif;
                if not *in90;
                   %subst(cd_3to69:60:8) = 'NOTFOUND';
                endif;

             elseif psys_type   = 'DP';
                if psource     = 'AUT';
                   s1 = %lookup(byte2 : auto_dp_c : s1);
                   *in90 = (s1 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
                   if s1 = 0;
                      s1 = 1;
                   endif;
                   if *in90;
                      cd_3to69 = auto_dp_t(s1);
                   endif;
                else;
                   s1 = %lookup(byte2 : call_dp_c : s1);
                   *in90 = (s1 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
                   if s1 = 0;
                      s1 = 1;
                   endif;
                   if *in90;
                      cd_3to69 = call_dp_t(s1);
                   endif;
                endif;
                if not *in90;
                   %subst(cd_3to69:60:8) = 'NOTFOUND';
                endif;

             elseif psys_type   = 'CT';
                if psource     = 'AUT';
                   s1 = %lookup(byte2 : auto_ct_c : s1);
                   *in90 = (s1 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
                   if s1 = 0;
                      s1 = 1;
                   endif;
                   if *in90;
                      cd_3to69 = auto_ct_t(s1);
                   endif;
                else;
                   s1 = %lookup(byte2 : call_ct_c : s1);
                   *in90 = (s1 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
                   if s1 = 0;
                      s1 = 1;
                   endif;
                   if *in90;
                      cd_3to69 = call_ct_t(s1);
                   endif;
                endif;
                if not *in90;
                   %subst(cd_3to69:60:8) = 'NOTFOUND';
                endif;

             elseif psys_type   = 'CE';
                if psource     = 'AUT';
                   s1 = %lookup(byte2 : auto_ce_c : s1);
                   *in90 = (s1 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
                   if s1 = 0;
                      s1 = 1;
                   endif;
                   if *in90;
                      cd_3to69 = auto_ce_t(s1);
                   endif;
                else;
                   s1 = %lookup(byte2 : call_ce_c : s1);
                   *in90 = (s1 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
                   if s1 = 0;
                      s1 = 1;
                   endif;
                   if *in90;
                      cd_3to69 = call_ce_t(s1);
                   endif;
                endif;
                if not *in90;
                   %subst(cd_3to69:60:8) = 'NOTFOUND';
                endif;

             endif;


       endif;

          clear dash;
          if pccategry <> *blanks and pvalue <> *blanks;
             if not %open(calltyps1);
                open calltyps1;
             endif;

             chain (psys_type:pccategry:pvalue) ct_rec;
             if %found(calltyps1);
                cd_3to69 = %trim(ct_text);
             else;
                cd_3to69 = 'NOTFOUND';
             endif;

             if pcalltext <> *blanks;
               dash = ' - ';
             endif;

          endif;


       endsr;

       // ***********************************************************
       //     GET_DPDAT1:   Get the Diploma Order Data1 Record
       // ***********************************************************
       begsr get_dpdat1;

          if NOT %open(gadp_dat1);
             open gadp_dat1;
          endif;

          chain horder# gadp_rec;
          *in90 = not %found;
          if *in90       = *on;
             clear vdp_dgtype;
             clear vdp_dgmajr;
             clear vdp_dgdate;
             clear vdp_frstn;
             clear vdp_midln;
             clear vdp_lastn;
          endif;

       endsr;

       // **********************************************************************
       //     get_option    get the GAOPTION rec
       // **********************************************************************
       begsr get_option;

          h_applid    = tapplid;
          hrecid      = trecid;
          husrtype    = tusrtype;
          hproduct    = tproduct;

          byte12      = tfice + tapplid + trecid +
                            tusrtype + tproduct;

          ix          = 1;
          ix = %lookup(byte12 : ar_optkey : ix);
          *in90 = (ix > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
          if ix = 0;
             ix = 1;
          endif;
          if *in90;
             ga_rpt2dsc = ar_optdat(ix);
          endif;
          if *in90;
             leavesr;
          endif;

          if NOT %open(gaoption1);
             open gaoption1;
          endif;
          chain (hfice : h_applid : hrecid : husrtype :
                hproduct) ga_parms;
          if NOT %found;
             ga_rpt2dsc  = husrtype + tproduct +
                               '-NF';
          endif;

          asize       = asize + 1;
          if asize       > 40;
             asize       = 1;
          endif;

          ar_optkey(asize) = husrtype + tproduct;
          ar_optdat(asize) = ga_rpt2dsc;

       endsr;

       // **************************************************************
       //    Get_Order:  Get the GAORDER Record for READONLY
       // **************************************************************
       begsr Get_Order;

          if NOT %open(gaorder1#);
             open gaorder1#;
          endif;

          chain(n) horder# garec_#;
          if %found(gaorder1#);
             // ---Setup Screen for PP Information from the Order Record
             exsr Move_PP;
          else;
             condition = 'not-found';
             clear tamt_total;
             clear tamt_handl;
             clear tamt_800;
             clear tproduct;
             clear tship;
             clear tapp_data8;
          endif;

       endsr;

       // **************************************************************
       //    Get_StatDP:   Get the Diploma Order Status
       // **************************************************************
       begsr Get_StatDP;

          clear byte300;

          select;
             when tstat_end   = 'X';
                byte300     = 'CANCELED: ' +
                                  dspTmStamp(tstat_e_dt:
                                             0:0:
                                             '*DATE');
             when tstage      = 'A' or
                    tstage      = 'O';
                if tapplid     = 'DP';
                   if tga_aut_cd  = 'Y';
                      byte300     = 'AU,';
                   else;
                      byte300     = '--,';
                   endif;
                endif;
                if tga_apr_cd  = 'Y';
                   byte300     = %trim(byte300) + 'AP,';
                else;
                   byte300     = %trim(byte300) + '--,';
                endif;
                if tga_paiddt <> 0;
                   byte300     = %trim(byte300) + 'PD';
                else;
                   byte300     = %trim(byte300) + '--';
                endif;

             when tstage      = 'B';
                if icert_optn  = 'Y';
                   byte300     = 'Bld Certificate Rec';
                else;
                   byte300     = 'Bld Diploma Rec';
                endif;

             when tstage      = '7';
                if tready      = 'C' and
                       tstat_end   = ' ' and
                       tga_fin_dt <> 0;
                   byte300     = 'FINISHED: ' +
                                     dspTmStamp(tga_fin_dt:
                                                0:0:
                                                '*DATE');
                else;
                   byte300     = dspTmStamp(telig_date:
                                                0:0:
                                                '*DATE');
                endif;

             when tstage      = 'N';
                byte300     = 'Name Lookup';

                //  Review Diploma info - MUST have GADP_DAT1 Record
                //  10/06/11 MRB allowed GADP_DAT1 record to be not found
             when tstage      = 'R';
                if NOT %open(gadp_dat1);
                   open gadp_dat1;
                endif;

                setll torder# gadp_dat1;
                if %equal;
                   if icert_optn  = 'Y';
                      byte300     =
                          '<a href="javascript:show_ceinfo(''' +
                          torder# + ''',''' + h_applid + ''');">' +
                          'VIEW DOCUMENT</a>';
                   else;
                      byte300     =
                          '<a href="javascript:show_dpinfo(''' +
                          torder# + ''',''' + h_applid + ''');">' +
                          'VIEW DOCUMENT</a>';
                   endif;
                else;

             // Allow the order to be finalized
             byte300 = '<a href="javascript:if(confirm(''Are you sure?'')) { +
                        change(document.form1.ORDERNO, ''' + torder# + ''');+
                        setsubmit(document.form1.ACTION, ''FIN'');}">+
                        Finalize Order</a>';

                endif;

             other;
                byte300     = 'Not Defined';
          endsl;


          //   Is record in PROBLEM State?
          if tready      = 'P' or
                 tready      = 'F';
             byte300     = %trim(byte300) +
                 ', <a href="javascript:show_prb(''' +
                 torder# + ''');">PROBLEM</a>';
          endif;

       endsr;

       // ***********************************************************
       //     get_restyp:   Get the Type of Residential Property
       // ***********************************************************
       begsr get_restyp;

          clear res_type;
          if wrk_avsmlv  = 'A';
             res_type    = 'Apartment';
          elseif wrk_avsmlv  = 'H';
             res_type    = 'Highrise';
          elseif wrk_avsmlv  = 'S';
             res_type    = 'Single-Family';
          else;
             res_type    = 'Single-Family';
          endif;

       endsr;
       // ***********************************************************
       //     get_resU:     Get the Resident Record by USERID - Key
       // ***********************************************************
       begsr get_resU;

          //  Already have RESU record - skip the additional get
          if have_res    = #TRUE;
             leavesr;
          endif;

          user_id8 = h_key;

          if not %open(gam_res1u);
             open gam_res1u;
          endif;

          chain(n) (hfice : user_id8) resrec_1u;
          if NOT %found(gam_res1u);
             clear rsalut;
             clear rfrstname;
             clear rmidlname;
             clear rlastname;
             clear rsuffix;
             clear raddr1;
             clear rstr_name;
             clear rcity;
             clear rstate;
             clear rpostcd;
             clear rtel#;
             clear remail;
             clear rem_optin;
             //   ERROR
          else;
             have_res    = #TRUE;
          endif;

       endsr;

       // ***********************************************************
       //     get_res2:     Get the Res2 Record by INSTANCE# - Key
       // ***********************************************************
       begsr get_res2;

          //  Already have RES2 record - skip the additional get
          if have_res2   = #TRUE;
             leavesr;
          endif;

          instance#   =  %dec(%trim(h_key):11:0);

          if not %open(gam_res2);
             open gam_res2;
          endif;

          chain (hfice : instance#) resrec_2;
          if NOT %found(gam_res2);
             clear rsalut;
             clear rfrstname;
             clear rmidlname;
             clear rlastname;
             clear rsuffix;
             clear raddr1;
             clear rstr_name;
             clear rcity;
             clear rstate;
             clear rpostcd;
             clear rtel#;
             clear remail;
             clear rem_optin;
             //   ERROR
          else;
             have_res2   = #TRUE;
          endif;

       endsr;

       // ***********************************************************
       //     GET_SCHNAM:   Get the School Name
       // ***********************************************************
       begsr get_schnam;

          if NOT %open(dvinstitf1);
             open dvinstitf1;
          endif;

          chain hfice instrec;
          *in90 = not %found;
          if *in90       = *on;
             clear ithe_featr;
             clear ischname;
          endif;

          if ithe_featr  = 'T';
             NCatLen = %len(%trimr('The')) + %len(
                 ischname) + 1;
             if NCatLen < %len(yschname);
                %subst(yschname:1:NCatLen) = %trimr('The')
                     + ' ' + ischname;
             else;
                yschname = %trimr('The') + ' ' + ischname;
             endif;
          else;
             yschname = ischname;
          endif;

          if imsgprefix = *blanks;
             imsgprefix = 'GAS';
          endif;

          if ilen_dname  = 0;
             ilen_dname  = 35;
          endif;

          if ilen_name   = 0;
             ilen_name   = 35;
          endif;

          if ilen_addr   = 0;
             ilen_addr   = 35;
          endif;

          if ilen_city   = 0;
             ilen_city   = 25;
          endif;

          if ilen_fname  = 0;
             ilen_fname  = 15;
          endif;

          if ilen_mname  = 0;
             ilen_mname  = 15;
          endif;

          if ilen_lname  = 0;
             ilen_lname  = 35;
          endif;

          if ilen_dadd1  = 0;
             ilen_dadd1  = 35;
          endif;

          if ilen_dadd2  = 0;
             ilen_dadd2  = 35;
          endif;

          if ilen_dadd3  = 0;
             ilen_dadd3  = 35;
          endif;

          if ilen_dcity  = 0;
             ilen_dcity  = 25;
          endif;

          if ilen_fname  = 0;
             ilen_city   = 25;
          endif;

          if istuid_len  = *blanks;
             istuid_len  = '10';
          endif;
          id_len20 = %dec(%xlate(' ':'0':
                istuid_len):2:0);

          if istuid_ttl  = *blanks;
             istuid_ttl  = 'Student ID #';
          endif;

       if csuperuser = 'XX';
          if %subst(ifice:1:2) = 'XX';
             clear #MF_dqin;
             #MF_func = 'IG';
             #MF_fice = %xlate('X':'0':ifice);
             exsr $get_MF;
             if #MF_status = 'OK';
                instwrk_ds = #MF_result;
                sprusr.fice1    = mfice;
                sprusr.fice2    = ifice;
                sprusr.shrtname = msch_sname;
             else;
                clear instwrk_ds;
             endif;
          else;
             sprusr.fice1    = ifice;
             sprusr.fice2    = 'XX' + %subst(ifice:3);
             sprusr.shrtname = isch_sname;
          endif;
       endif;



       endsr;

       // ***********************************************************
       //     GET_MASTER:   Get the GAMASTER1 record for this appl
       // ***********************************************************
       begsr get_master;

          if NOT %open(gamaster1);
             open gamaster1;
          endif;

          chain (hfice : h_applid) ga_master;
          *in90 = not %found;
          if *in90       = *on;
          endif;

          //     If handle wording is not set, set to default

          if ghandl_wrd  = *blanks;
             ghandl_wrd  = 'Shipping/Handling Charge';
          endif;

          //   FIELDS TO BE ADDED TO GAMASTER1


       endsr;

       //********************************************************************
       // getShipMethod - get shipping method from gaoption1
       //********************************************************************
       begsr getShipMethod;

          if not %open(gaoption1);
             open gaoption1;
          endif;

          chain (hfice:h_applid:'GS':husrtype:tship) ga_parms shipOptionDs;

       endsr;

       // *******************************************************************
       //     Make a Billing Cycle field
       // *******************************************************************
       begsr Make_Bill;

     c*                  time                    td14
          td14date = %char(%date():*usa0);
          td14time = %dec(%Time():*iso);

          date8yyyy = td14yyyy;
          date8mmdd = td14mmdd;

          *in90 = %tlookup(td14m : tabdig : tablet);
       // *CVTWNG : %Equal & %Found are not updated by %TLookup
          if *in90;
             thism = tablet;
          endif;

          *in90 = %tlookup(td14d : tabdig : tablet);
       // *CVTWNG : %Equal & %Found are not updated by %TLookup
          if *in90;
             thisd = tablet;
          endif;

          thisy = td14y;

          billcycle   = thisy + thism + thisd;
       endsr;

       // *******************************************************************
       //     Initlize Comment type text based on code
       // *******************************************************************
       begsr Make_Cmnt;

          select;
             when ordtxt_typ  = *blanks;
                work_20     = '&nbsp;';
             when ordtxt_typ  = 'A';
                work_20     = 'Activated';
             when ordtxt_typ  = 'C';
                work_20     = 'Comment';
             when ordtxt_typ  = 'F';
                work_20     = 'Failed CC';
             when ordtxt_typ  = 'L';
                work_20     = 'Lost/Stolen';
             when ordtxt_typ  = 'M';
                work_20     = 'Mail Returned';
             when ordtxt_typ  = 'N';
                work_20     = 'New Pass';
             when ordtxt_typ  = 'P';
                work_20     = 'Problem';
             when ordtxt_typ  = 'R';
                work_20     = 'Re-issue';
             when ordtxt_typ  = 'X';
                work_20     = 'Canceled';
             when ordtxt_typ  = 'V';
                work_20     = 'Voided';
             when ordtxt_typ  = 'Y';
                work_20     = 'Refunded';
             when ordtxt_typ  = 'Z';
                work_20     = 'Refund Error';
             other;
                work_20     = 'Not Defined';
          endsl;

       endsr;

       // *******************************************************************
       //     Move_PP - Move PP fields from Ts to Hs
       // *******************************************************************
       begsr Move_PP;

          rate_total  = tamt_total;
          rate_handl  = tamt_handl;
          rate_800    = tamt_800;
          h_applid = tapplid;
          husrtype = tusrtype;
          hrecid = trecid;
          hproduct = tproduct;
          hship = tship;

       endsr;

       // *******************************************************************
       //     Next_Stage -  Advance the TSTAGE, DATE, TIME, TROBO_COND
       // *******************************************************************
       begsr Next_Stage;

          //   Find index of current stage
          idx         = 1;
          idx = %lookup(tstage : st_arr : idx);
          *in90 = (idx > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
          if idx = 0;
             idx = 1;
          endif;
          if *in90       = *on;

             //   idx contains the current stage, decide if there is a
             //   router record that should be written on stage end

             if st_acc(idx) <> *blanks;
                //   write router
             endif;

             //   bump stage to the next stage, set trobo_cond and
             //   decide if router needs to be sent on stage begining
             idx         = idx + 1;
             if st_arr(idx) <> *blanks;
                tstage      = st_arr(idx);
                tstagedate  = cycle_date;
                tstagetime  = cycle_time;
                trobo_cond  = st_cnds(idx);

                if st_edf(idx) <> *blanks;
                   exsr set_elg_dt;
                   if telig_date   > cycle_date;
                      trobo_cond   = 'W';
                   endif;
                endif;

                if st_act(idx) <> *blanks;
                   //   write router
                endif;
             else;
                tready      = 'C';
                tga_fin_us  = 'GACGIADM  ';
                tga_fin_dt  = cycle_date;
                tga_fin_tm  = cycle_time;
             endif;

          endif;

       endsr;

       //*******************************************************************
       //  subroutine to parse the input buffer into PAR array
       //  and then load working "h" variables with initial values.
       //  Those fields that are processed in Upper Case only are
       //  converted from lower case to upper case by this routine.
       //*******************************************************************
       begsr parseInp;

       htmlForm = parseForm(BufIn:curContentType);

       for pw = 1 to htmlForm.numInputs;
          field_name = htmlForm.input(pw).name;
          field_nam4 = field_name;
          field_data = htmlForm.input(pw).data;

          select;
          when field_name = 'DELAD1' or
               field_name = 'DELAD2' or
               field_name = 'DELAD3' or
               field_name = 'DELCITY' or
               field_name = 'HOUSE' or
               field_name = 'STREET' or
               field_name = 'A1' or
               field_name = 'NEWA1' or
               field_name = 'ALTA1' or
               field_name = 'ALTCITY' or
               field_name = 'CITY';
             field_data = web_clean(field_data:CLEAN_ADDRESS);

          when field_name = 'SRCH_NAM' or
               field_name = 'CNTACT' or
               field_name = 'CMPANY' or
               field_name = 'NF' or
               field_name = 'NM' or
               field_name = 'NL';
             field_data = web_clean(field_data:CLEAN_NAME);

          when field_name = 'PNAME' or                 // Pet Fields
               field_name = 'PCOLOR' or
               field_name = 'PBREED' or
               field_name = 'KEY_PNAME';
             field_data = web_clean(field_data:CLEAN_NAME:'&/');

          when field_name = 'DELATN' or
               field_name = 'COMNT' or                 // Text areas
               field_name = 'KEY';
             field_data = web_clean(field_data:CLEAN_TEXT);

          when field_name = 'EMAIL';
             field_data = web_clean(field_data:CLEAN_EMAIL);

          when field_name = 'SHAHASH';
             field_data = %scanrpl('&':'&amp;':field_data);
             field_data = %scanrpl('''':'&#x27;':field_data);
             field_data = %scanrpl('>':'&gt;':field_data);
             field_data = %scanrpl('<':'&lt;':field_data);
             field_data = %scanrpl('"':'&quot;':field_data);

          when field_name = 'PASSSRCH' or
               field_name = 'PASSMUNI' or
               field_name = 'SRCH_VAL' or
               field_name = 'PP3USER' or
               field_name = 'BILLUSER';
             // do nothing, handled in separate area

          other;
             field_data = web_sanitize(field_data);

          endsl;

       // ---------------------------------------------------------------------
       //     Now format all the working parms
       // ---------------------------------------------------------------------
             select;

                   //  ----FICE
                when field_name = 'FICE';
                   hfice = field_data;

                   //  ----NEW_FICE
                when field_name = 'NUFICE';
                   hnufice = field_data;
                   hnufice = %xlate(xlc:xuc:hnufice);

                   //  ----Application ID
                when field_name = 'APPL';
                   h_applid = field_data;

                   //  ----FORMID
                when field_name = 'FORMID';
                   hscrn_type = field_data;

                   //  ----SCRSEQ
                when field_name = 'SCRSEQ';
                   hscrn_seq = %dec(%xlate(' ':'0':
                         %subst(field_data:1:3)):3:0);

                   //  ----ACTION)
                when field_name = 'ACTION';
                   h_action = field_data;

                   //  ----Confirmation Id #
                when field_name = 'ORDERNO';
                   horder# = field_data;

                   //  ----SignOnKey
                when field_name = 'SK';
                   hsignonkey = field_data;

                   //  ----User ID
                when field_name = 'USERID';
                   huserid = field_data;
                   huserid = %xlate(xlc:xuc:huserid);

                   //  ----JSCRIPTOK
                when field_name  = 'JSCRIPTOK';
                   hjs_ok = field_data;


          when field_name = 'SHAHASH';
             hsha_hash = %trim(field_data);


       //  ----KEY
                when field_name  = 'KEY';
                   h_key = field_data;

                   // -----FICEUSER - Input that comes from a scanner
                when field_name  = 'FICEUSER';
                   byte14 = field_data;
                   byte14 = %xlate(xlc:xuc:byte14);
                   hscan_fice = byte14;
                   evalr hscan_user = byte14;

                   // -----FICEINST - Input that comes from move radio
                when field_name  = 'FICEINST';
                   hficeinst = field_data;
                   hficeinst = %xlate(xlc:xuc:hficeinst);

                   //  ----No Button Flag
                when field_name  = 'VIEWONLY';
                   hviewonly = field_data;

                   //  ----Are we in RES2 (Deleted) mode
                when field_name  = 'RES2MODE';
                   hres2mode = field_data;

                   //  ----Collumn to sort address errors with
                when field_name  = 'SORTFLD';
                   hsort_fld = field_data;

                   //  ----KEY_PLISS
                when field_name  = 'KEY_PLISS';
                   h_kpliss = field_data;

                   //  ----KEY_PLATE
                when field_name  = 'KEY_PLATE';
                   h_kplate = field_data;

                   //  ----KEY_PTYPE
                when field_name  = 'KEY_PTYPE';
                   h_ktype = field_data;

                   //  ----KEY_PNAME
                when field_name  = 'KEY_PNAME';
                   h_kname = field_data;
                   h_kname = %xlate(xlc:xuc:h_kname);

                   //  ----Post Date Checkbox
                when field_name  = 'CHK_POSTDATE';
                   hchk_pdate = field_data;

                   //  ----Post Date
                when field_name  = 'POSTDATE';
                   hpostdate = field_data;

                   //  ----SAVED Drivers License
                when field_name  = 'SAV_DLNUM';
                   hold_dlnum = field_data;
                   hold_dlnum = %xlate(xlc:xuc:hold_dlnum);

                   //  ----SAVED Last Order#
                when field_name  = 'LASTORDR';
                   hlastordr# = field_data;

                   //  ----PASS SEARCH OPTIONS
                when field_name =  'PASSSRCH';
                   %subst(pass_srch:1:100) = field_data;

                   hsrch_sid = sv_s_sid;
                   %subst(hsrch_nam:1:10) = sv_s_nam;
                   hsrch_ord = sv_s_ord;
                   hsrch_dta5 = sv_s_dta5;
                   hsrch_dta8 = sv_s_dta8;
                   %subst(hsrch_tag:1:11) = sv_s_tag;
                   hsrch_type = sv_s_type;

             hsrch_nam = web_clean(hsrch_nam:CLEAN_NAME);
             hsrch_sid = web_sanitize(hsrch_sid);
             hsrch_ord = web_sanitize(hsrch_ord);
             hsrch_dta5 = web_sanitize(hsrch_dta5);
             hsrch_dta8 = web_sanitize(hsrch_dta8);
             hsrch_tag = web_sanitize(hsrch_tag);
             hsrch_type = web_sanitize(hsrch_type);

       //  ----PASS SEARCH MUNICIPAL OPTIONS
                when field_name =  'PASSMUNI';
                   %subst(pass_muni:1:100) = field_data;

                   hsrch_tarea = sv_m_tarea;
                   hsrch_tnum = sv_m_tnum;
                   %subst(hsrch_nam:1:20) = sv_m_nam;
                   hsrch_dta5 = sv_m_dta5;
                   hsrch_dta6 = sv_m_dta6;
                   haddr1 = sv_m_addr1;
                   hmailtype = sv_m_mtype;

             hsrch_nam = web_clean(hsrch_nam:CLEAN_NAME);
             haddr1 = web_clean(haddr1:CLEAN_ADDRESS);
             hsrch_tarea = web_sanitize(hsrch_tarea);
             hsrch_tnum = web_sanitize(hsrch_tnum);
             hsrch_dta5 = web_sanitize(hsrch_dta5);
             hsrch_dta6 = web_sanitize(hsrch_dta6);
             hmailtype = web_sanitize(hmailtype);

       //  ----Transcript Search Paramter Entered
       // doesn't apper to be used
                when field_name = 'SRCHPARM';
                   hsrch_parm = field_data;
                   hsrch_parm = %xlate(xlc:xuc:hsrch_parm);

                   //  ----Search Paramter by SSN
                when field_name = 'SRCH_SSN';
                   hsrch_ssn = field_data;
                   hsrch_ssn = %xlate(xlc:xuc:hsrch_ssn);
                   if hsrch_ssn  <> *blanks;
                      clear #ED_dqin;
                      clear #ED_dqout;
                      #ED_doss_i  = 'E';
                      #ED_fice_i  = hfice;
                      #ED_uss_i = hsrch_ssn;
                      exsr $get_ED;
                      hsrch_ssne  = #ED_ess_o;
                      clear hsrch_ssn;
                   endif;

                   //  ----Search Paramter by SID - PADDED to the school's length
                when field_name = 'SRCH_SID';
                   hsrch_sid = field_data;
                   hsrch_sid = %xlate(xlc:xuc:hsrch_sid);

                   //  ----Search Paramter by Name
                when field_name = 'SRCH_NAM';
                   hsrch_nam = field_data;
                   hsrch_nam = %xlate(xlc:xuc:hsrch_nam);

                when field_name = 'SRCH_ORD';
                   hsrch_ord = field_data;
                   hsrch_ord = %xlate(xlc:xuc:hsrch_ord);

                   //  ----GA Search Paramter1
       // doesn't apper to be used
                when field_name = 'SRCH_DTA1';
                   hsrch_dta1 = field_data;
                   hsrch_dta1 = %xlate(xlc:xuc:hsrch_dta1);

                   //  ----GA Search Paramter2
       // doesn't apper to be used
                when field_name = 'SRCH_DTA2';
                   hsrch_dta2 = field_data;
                   hsrch_dta2 = %xlate(xlc:xuc:hsrch_dta2);

                   //  ----GA Search Paramter3
       // doesn't apper to be used
                when field_name = 'SRCH_DTA3';
                   hsrch_dta3 = field_data;
                   hsrch_dta3 = %xlate(xlc:xuc:hsrch_dta3);

                   //  ----GA Search Paramter4
       // doesn't apper to be used
                when field_name = 'SRCH_DTA4';
                   hsrch_dta4 = field_data;
                   hsrch_dta4 = %xlate(xlc:xuc:hsrch_dta4);

                   //  ----GA Search Paramter5
                when field_name  = 'SRCH_DTA5' or
                       field_name  = 'PLATE';
                   hsrch_dta5 = field_data;
                   hsrch_dta5 = %xlate(xlc:xuc:hsrch_dta5);
                   //   Squeeze all embedded blanks out of the license plate
                   if h_applid    = 'PP' or
                          h_applid    = 'MS';
                      %subst(squeze_var:1:10) = hsrch_dta5;
                      exsr squeeze_it;
                      hsrch_dta5 = squeze_var;
                   endif;

                   //  ----GA Search Paramter6
                when field_name = 'SRCH_DTA6';
                   hsrch_dta6 = field_data;
                   hsrch_dta6 = %xlate(xlc:xuc:hsrch_dta6);

                   //  ----GA Search Paramter7
       // doesn't apper to be used
                when field_name = 'SRCH_DTA7';
                   hsrch_dta7 = field_data;
                   hsrch_dta7 = %xlate(xlc:xuc:hsrch_dta7);

                   //  ----GA Search Paramter8
                when field_name  = 'SRCH_DTA8' or
                       field_name  = 'PERMIT';
                   hsrch_dta8 = field_data;
                   hsrch_dta8 = %xlate(xlc:xuc:hsrch_dta8);

                   //  ----Search Paramter by TAG - PADDED to the school's length
       // doesn't apper to be used
                when field_name = 'SRCH_TAG';
                   hsrch_tag = field_data;
                   hsrch_tag = %xlate(xlc:xuc:hsrch_tag);

                   //  ----Search Telephone Area Code
                when field_name = 'SRCH_TAREA';
                   hsrch_tarea = field_data;
                   hsrch_tarea = %xlate(xlc:xuc:hsrch_tarea);

                   //  ----Search Telephone Number
                when field_name = 'SRCH_TNUM';
                   hsrch_tnum = field_data;
                   hsrch_tnum = %xlate(xlc:xuc:hsrch_tnum);

                   //  ----Search Textbox Value
                when field_name = 'SRCH_VAL';
                   hsrch_value = field_data;
                   hsrch_value = %xlate(xlc:xuc:hsrch_value);
       if hsrch_value <> *blanks;
          select;
          when hsrch_type = 'NAM';
             hsrch_nam = %trim(web_clean(hsrch_value:CLEAN_NAME));
          when hsrch_type = 'SID';
             hsrch_sid = %trim(web_sanitize(hsrch_value));
          when hsrch_type = 'ORD';
             hsrch_ord = %trim(web_sanitize(hsrch_value));
          when hsrch_type = 'DT5';
             hsrch_dta5 = %trim(web_sanitize(hsrch_value));
          when hsrch_type = 'DT8';
             hsrch_dta8 = %trim(web_sanitize(hsrch_value));
          endsl;
       endif;

       //  ----Transcript Search Paramter Type
                when field_name = 'SRCHTYPE';
                   hsrch_type = field_data;

                when field_name = 'SRCHIND';
                   hsrchInd = field_data;

                   //  ----Payment Radio Button for search paid orders or not
                when field_name = 'SRHPD';
                   hsrch_paid = field_data;

                   //  ----USRTYPE (for special discounted user types)

                when field_name = 'USRTYPE';
                   husrtype = field_data;

                   //  ----Order BY Field
                when field_name = 'ORDERBY';
                   horderby = field_data;

                   //  ----PAID DATE
                when field_name = 'PAID_DATE';
                   dsply_date = field_data;
                   if dsply_date <> *blanks;
                      exsr Undo_Date;
                      %subst(hpaid_date:3:8) = %editc(date8:'X');
                   else;
                      clear hpaid_date;
                   endif;

                   //  ----LastDays
                when field_name = 'LASTDAYS';
                   hlastDays = field_data;

                   //  ----Year
                when field_name = 'YEAR';
                   hyear4 = field_data;

                   //  ----Year
                when field_name = 'YEAR4';
                   hyear4b = field_data;

                   //  ----Month
                when field_name = 'MNTH';
                   hmonth2 = field_data;

                   //  ----Month
                when field_name = 'MONTH2';
                   hmonth2b = field_data;

                   //  ----Day
                when field_name = 'DAYS';
                   hdays2 = field_data;

                   //  ----Day
                when field_name = 'DAY2';
                   hday2b = field_data;

                when field_name = 'SRCHDATE';
                   hdateInd = field_data;

                   //  ----GA Approved CheckBox
                when field_name = 'APPRVD';
                   hga_apr_cd = field_data;

                   //  ----GA Authorize CheckBox
                when field_name = 'AUTHRZ';
                   hga_aut_cd = field_data;

                   //  ----GA Paid CheckBox
                when field_name = 'PAIDCD';
                   hga_paidcd = field_data;

                   //  ----Diploma Radio - Control for Action / UnActive Orders
                when field_name  = 'CNTR_DP';
                   hcntr_dp = field_data;

                   //  ----REPT_NAME - le for Daily Verifications for D/L Reports
                when field_name = 'REPT_NAME';
                   hpdf_rep = %subst(field_data:1:10);
                   reportYear = %subst(field_data:11:2);

                   //  ----Reply Method
                when field_name  = 'RPY';
                   hrpymethod = field_data;

                   //  ----Type Select Box
                when field_name  = 'TYP';
                   hsend_type = field_data;

                   //  ----E-Mail address
                when field_name  = 'EMAIL';
                   hemail = field_data;
                   hemail = %xlate(xuc:xlc:hemail);

                   //  ----Opt In Checkbox
                when field_name  = 'OPTIN';
                   hem_optin = field_data;

                   //  ----credit card fields
                when field_name  = 'CHECKNO';                                   // first name
                   hcheckno = field_data;
                   hcheckno = %xlate(xlc:xuc:hcheckno);

                   //  ----Update INFO Checkbox
                when field_name  = 'UPDINFO';
                   hupd_info = field_data;

                   //  ----Ship Radio Box
                when field_name  = 'SHIP';
                   hship = field_data;

                   //  ----Ship Amount Handle
                when field_name  = 'AMTSHIP';
                   otc_ship    = cvt2num(%trim(field_data));

                   //  ----Rush Service Checkbox
                when field_name  = 'RUSH';
                   hrush = field_data;

                   //  ----CheckBox to Move Vehicles
                when field_name = 'CK_VEH';
                   hmove_veh = field_data;

                   //  ----CheckBox to Move Pets
                when field_name = 'CK_PET';
                   hmove_pet = field_data;

                   //  ----CheckBox to Remove Sub Accounts
                when field_name = 'CK_SUBA';
                   hrmv_suba = field_data;

                   //  ----3rd Party Bill User
       when field_name  = 'PP3USER';
          h3pp_user = web_clean(field_data:CLEAN_ADDRESS:'/+');

                when field_name  = 'PRODUCT';
                   byte4 = field_data;
                   hrecid = byte4;
                   evalr byte2 = byte4;
                   hproduct = byte2;
                   evalr husrtype = byte2;

                when field_name  = 'NUMPMITS';
                   hnumpmits = field_data;

                when field_name  = 'DELATN';
                   hdel_attn = field_data;
                   hdel_attn = %xlate('''':'`':hdel_attn);

                when field_name  = 'DELAD1';
                   hdel_addr1 = field_data;

                when field_name  = 'DELAD2';
                   hdel_addr2 = field_data;

                when field_name  = 'DELAD3';
                   hdel_addr3 = field_data;

                when field_name  = 'DELCITY';
                   hdel_city = field_data;

                when field_name  = 'DELSTATE';
                   hdel_state = field_data;

                when field_name  = 'DELZIP';
                   hdel_zip = field_data;

                when field_name  = 'DELTEL';
                   hdel_tel# = field_data;
                   hdel_tel# = %xlate(xlc:xuc:hdel_tel#);

                when field_name  = 'COMNT';
                   byte100 = field_data;
                   hcomment1 = byte100;
                   evalr hcomment2 = byte100;

                   //    MS - Street Maint

                   //  ----House #

                when field_name  = 'HOUSE';
                   hstr_hnum = field_data;

                   //  ----Street Direction

                when field_name  = 'DIR';
                   hstr_dir = field_data;

                   //  ----Street Name

                when field_name  = 'STREET';
                   hstr_name = field_data;
                   hstr_name = %xlate(xlc:xuc:hstr_name);

                when field_name  = 'STRTYP';
                   hstr_type = field_data;

                   //  ----House #

                when field_name  = 'UNIT';
                   hstr_apt = field_data;

                when field_name  = 'STR_POSTD';
                   hstr_postd = field_data;

                when field_name  = 'VALDDIR1';
                   hvald_dir1 = field_data;

                when field_name  = 'VALDDIR2';
                   hvald_dir2 = field_data;

                when field_name  = 'VALDEND1';
                   hvald_end1 = field_data;

                when field_name  = 'VALDEND2';
                   hvald_end2 = field_data;

                when field_name  = 'VALDSTR1';
                   hvald_str1 = field_data;

                when field_name  = 'VALDSTR2';
                   hvald_str2 = field_data;

                   //      3rd Party Receivable BILLUSER
       when field_name = 'BILLUSER';
          ky_billusr = %xlate(xlc:xuc:%trim(field_data));
          // This is going to be sanatized in the edit routine

       //  ----BUSINESS fields

       //      Business Contact
                when field_name  = 'IDCODE';
                   hidcode = %dec(%xlate(' ':'0':
                         %subst(field_data:1:7)):7:0);

                   //      Business Contact
                when field_name  = 'CNTACT';
                   hcontact = field_data;
                   hcontact = %xlate(xlc:xuc:hcontact);

                   //      Business Company
                when field_name  = 'CMPANY';
                   hcompany = field_data;
                   hcompany = %xlate(xlc:xuc:hcompany);

                   //  ----Sub Account
                when field_name  = 'SACCT';                                     // first name
                   hsubacct = field_data;

                   //  ----Name Salutation
                when field_name  = 'NSAL';                                      // first name
                   hsalut = field_data;

                   //      First name
                when field_name  = 'NF';                                        // first name
                   hfrstname = field_data;
                   hfrstname = %xlate(xlc:xuc:hfrstname);

                   //      Middle name
                when field_name  = 'NM';                                        // first name
                   hmidlname = field_data;
                   hmidlname = %xlate(xlc:xuc:hmidlname);

                   //      Last name
                when field_name  = 'NL';                                        // first name
                   hlastname = field_data;
                   hlastname = %xlate(xlc:xuc:hlastname);

                   //  ----Suffix
                when field_name  = 'NSFX';                                      // first name
                   hsuffix = field_data;
                   hsuffix = %xlate(xlc:xuc:hsuffix);

                   //      Address 1
                when field_name  = 'A1';
                   haddr1 = field_data;
                   haddr1 = %xlate(xlc:xuc:haddr1);

                   //      New Address - for Transfer
                when field_name  = 'NEWA1';
                   hnew_addr1 = field_data;
                   hnew_addr1 = %xlate(xlc:xuc:hnew_addr1);

                   //      City
                when field_name  = 'CITY';
                   hcity = field_data;
                   hcity = %xlate(xlc:xuc:hcity);

                   //      State
                when field_name  = 'STATE';
                   hstate = field_data;
                   hstate = %xlate(xlc:xuc:hstate);

                   //      Postal code
                when field_name  = 'ZIP';
                   hpostcd = field_data;

                   //      Telephone #
                when field_name  = 'TEL';
                   htel# = field_data;

                   //      PO BOX#
                when field_name  = 'POBOX';
                   hpo_box# = field_data;

                   //      Alt Address 1
                when field_name  = 'ALTA1';
                   halt_addr1 = field_data;
                   halt_addr1 = %xlate(xlc:xuc:halt_addr1);

                   //      City
                when field_name  = 'ALTCITY';
                   halt_city = field_data;
                   halt_city = %xlate(xlc:xuc:halt_city);

                   //      State
                when field_name  = 'ALTST';
                   halt_state = field_data;
                   halt_state = %xlate(xlc:xuc:halt_state);

                   //      State
                when field_name  = 'ALTZIP';
                   halt_zipcd = field_data;
                   halt_zipcd = %xlate(xlc:xuc:halt_zipcd);

                   //      Postal code
                when field_name  = 'ZIP';
                   hpostcd = field_data;

                   //      Business # of Employees
                when field_name  = 'BNEMPL';
                   byte3 = field_data;
                   h#_employs  = cvt2num(byte3);

                   //      Business Pin User ID
                when field_name  = 'BPNUSR';
                   hpin_user = field_data;
                   hpin_user = %xlate(xlc:xuc:hpin_user);

                   //      In/out checkbox
                when field_name  = 'INOUT';
                   hin_out = field_data;

                   //    vehicle information
                when field_name  = 'VPLATE';
                   hveh_plate = field_data;
                   hveh_plate = %xlate(xlc:xuc:hveh_plate);

                   //    vehicle status
                when field_name  = 'VSENIOR';
                   hvehsenior = field_data;

                when field_name =  'VACTION';
                   hvehaction = field_data;

                when field_name =  'VCLASS';
                   hveh_class = field_data;

                when field_name  = 'VMAKE';
                   hveh_make = field_data;

                when field_name  = 'VMODEL';
                   hveh_model = field_data;
                   hveh_model = %xlate(xlc:xuc:hveh_model);

                when field_name  = 'VBODY';
                   hveh_body = field_data;

                when field_name  = 'VPLISS';
                   hveh_pliss = field_data;

                when field_name  = 'VYEAR';
                   hveh_year = field_data;

                when field_name  = 'VCOLOR';
                   hveh_color = field_data;
                   hveh_color = %xlate(xlc:xuc:hveh_color);

                when field_name  = 'VSTCKR';
                   hveh_stckr = field_data;

                when field_name  = 'VVINNUM';
                   hveh_vin# = field_data;
                   hveh_vin# = %xlate(xlc:xuc:hveh_vin#);

                   //    vehicle name information
                when field_name =  'VFRSTN';
                   hvfrstname = field_data;
                   hvfrstname = %xlate(xlc:xuc:hvfrstname);

                when field_name =  'VMIDLN';
                   hvmidlname = field_data;
                   hvmidlname = %xlate(xlc:xuc:hvmidlname);

                when field_name =  'VLASTN';
                   hvlastname = field_data;
                   hvlastname = %xlate(xlc:xuc:hvlastname);

                when field_name  = 'VDLNUM';
                   hveh_dlnum = field_data;
                   hveh_dlnum = %xlate(xlc:xuc:hveh_dlnum);

                when field_name  = 'VPRDCOD';
                   hveh_prdcd = field_data;
                   hveh_prdcd = %xlate(xlc:xuc:hveh_prdcd);

                   //    pet information

                when field_name  = 'PTYPE';
                   hpet_type = field_data;

                when field_name  = 'PBREED';
                   hpet_breed = field_data;
                   hpet_breed = %xlate(xlc:xuc:hpet_breed);

                when field_name  = 'PCOLOR';
                   hpet_color = field_data;
                   hpet_color = %xlate(xlc:xuc:hpet_color);

                when field_name  = 'PNAME';
                   hpet_name = field_data;

             hpet_name = %xlate(xlc:xuc:%trim(hpet_name));


                when field_name  = 'PSEX';
                   hpet_sex = field_data;

                when field_name  = 'RABIESM2';
                   hrabies_m2 = field_data;

                when field_name  = 'RABIESY4';
                   hrabies_y4 = field_data;

                   //  ----Array of Selected Vehicles for Move Screen
                when field_nam4  = 'VCK_';
                   byte3       = %subst(field_name:5:3);
                   i1 = %dec(%subst(%editc(i1:'X'):1:2)
                         + %xlate(' ':'0':
                           byte3) :5:0);
                   byte11 = field_data;
                   har_veh(i1) = %dec(byte11:11:0);

                   //  ----Array of Selected Pets for Move Screen
                when field_nam4  = 'PCK_';
                   byte3       = %subst(field_name:5:3);
                   i1 = %dec(%subst(%editc(i1:'X'):1:2)
                         + %xlate(' ':'0':
                           byte3) :5:0);
                   byte11 = field_data;
                   har_pet(i1) = %dec(byte11:11:0);

                   //  ----Move Residence Radio Selection
                when field_name  = 'MOV_RES';
                   hmove_res = field_data;

                   //  ----MAIL TYPE code for return mail processing
                when field_name  = 'MAILTYPE';
                   hmailtype = field_data;

                   //  ----AV ERROR Override to allow a badd address to be added
                when field_name  = 'AVOVR';
                   hav_ovride = field_data;

                   //  ----Update Temp Date Checkbox
                when field_name  = 'TEMPDT';                                    // e-mail addr
                   hupd_tmpdt = field_data;

                when field_name  = 'VIEWSSN';
                   hdo_fulssn = field_data;

                other;
             endsl;

       endfor;

       endsr;

       // **************************************************************
       //    pdf_msbat    Generate PDF Report for MS batch mail processing
       // **************************************************************
       begsr pdf_msbat;

          clear command;

          //   First get the client's batch id (from f2 file)
          if NOT %open(dvclientf2);
             open(e) dvclientf2;
             *in97 = %error;
          endif;
          chain huserid authority;
          *in90 = not %found;

          //   Report is generated in pdfcgi2

          //    Now update batch ID and clear out record count

          clear cbatchrec#;

          byte2 = %subst(cbatchid:7:2);

          pk_3p0 = %dec(%subst(%editc(pk_3p0:'X'):1:1)
                + %xlate(' ':'0':
                  byte2) :3:0);
          pk_3p0 += 1;
          evalr byte2 = %editc(pk_3p0:'X');

          %subst(cbatchid:7:2) = byte2;

          update authority;

       endsr;

       // **************************************************************
       //    pdf_mschk    Generate PDF Report for MS check processing
       // **************************************************************
       begsr pdf_mschk;

          clear command;

          //    Submit job to create and send the PDF report

          command     = 'SBMJOB CMD(call GA_MSCHKRC ' +
                            'PARM(''' + hfice + ''' ''' +
                            adate8 + ''' ''' +
                            huserid + ''' ''' +
                            cemail + ''')) ' +
                            'JOB(GA_MSCHKRC) ' +
                            'JOBQ(QBATCH) ' +
                            'INLLIBL(*JOBD) ' +
                            'USER(CIBATCH)';

          if command    <> *blanks;
             cmdlen      = %len(%trimr(command));
             qcmdexc(command : cmdlen);
          endif;

       endsr;

       // **************************************************************
       //    pdf_pprpt    Generate PDF Report for PP application
       // **************************************************************
       begsr pdf_pprpt;

          clear command;

          //    Submit job to create and send the PDF report

          select;
                //                               Monthly Parking Permit Report
             when h_action    = 'MTH';

                rpt_ds = hpdf_rep + reportYear;
                if rpt_hdr     = 'S';
                   rpt_title   = 'Municipality Report';
                elseif rpt_hdr     = 'P';
                   rpt_title   = 'Parking Permit Report';
                elseif rpt_hdr     = 'C';
                   rpt_title   = 'Certification Re-order Report';
                elseif rpt_hdr     = 'G';
                   rpt_title   = 'Golf Tournament Report';
                elseif rpt_hdr     = 'R';
                   rpt_title   = 'Replacement Diploma Report';
                elseif rpt_hdr     = 'M';
                   rpt_title   = 'Meeting Report';
                else;
                   rpt_title   = 'Unknown Name Report';
                endif;

                n20 = %dec(%xlate(' ':'0':rpt_mnth):2:0);
                byte3 = month(n20);

                byte4 = '20' + reportYear;
                byte50 = %trim(rpt_title) + '-' + byte3 + ' ' + byte4 + '.pdf';

                command     = 'SBMJOB CMD(UTPRINTC ' +
                    'FILE(REPT_RR' + reportYear + ' ' +
                     ARCH_NOBU +  ') ' +
                    'MEMBER(' + %trim(hpdf_rep) +') ' +
                    'DEVICE(PDFEML) ' +
                    'EML_ADDR(''' + %trim(cemail) + ''') ' +
                    'EML_SUBJ(''' + %trim(rpt_title) + ''') ' +
                    'EML_ATTNAM(''' + %trim(byte50) + ''') ' +
                    'ENCRYPT(Y)) ' +
                    'JOBQ(QBATCH) ' +
                    'JOBD(CI_SYSTEM/CLLCJOBD) ' +
                    'INLLIBL(*JOBD) ' +
                    'USER(CIBATCH)';

                //                               On-Hand Parking Permit Audit Report
             when h_action    = 'RP1';

                command     = 'SBMJOB CMD(CALL GA_RPTONHC ' +
                    'PARM(''' + hfice + ''' ' +
                    '''' + h_applid + ''' ' +
                    '''' + cemail + ''')) ' +
                    'JOBQ(QBATCH) ' +
                    'JOBD(CI_SYSTEM/CLLCJOBD) ' +
                    'INLLIBL(*JOBD) ' +
                    'USER(CIBATCH)';

                //                                                   Daily Acctng Rpt
             when h_action    = 'RP2';

                byte8       = hyear4 + hmonth2 +
                                  hdays2;

                command     = 'SBMJOB CMD(CALL GA_RPTCSHC ' +
                    'PARM(''' + hfice + ''' ' +
                    '''' + h_applid + ''' ' +
                    '''' + byte8 + ''' ' +
                    '''' + cemail + ''' ' +
                    '''Y'')) ' +
                    'JOBQ(QBATCH) ' +
                    'JOBD(CI_SYSTEM/CLLCJOBD) ' +
                    'INLLIBL(*JOBD) ' +
                    'USER(CIBATCH)';

                //                                                   Mail Returned Rpt
             when h_action    = 'RP3';

                command     = 'SBMJOB CMD(CALL GA_RPTRTNC ' +
                    'PARM(''' + hfice + ''' ' +
                    '''' + h_applid + ''' ' +
                    '''' + cemail + ''')) ' +
                    'JOBQ(QBATCH) ' +
                    'JOBD(CI_SYSTEM/CLLCJOBD) ' +
                    'INLLIBL(*JOBD) ' +
                    'USER(CIBATCH)';

                //                                                 3rd PArt Recievables
             when h_action    = 'RP4';

                command     = 'SBMJOB CMD(CALL GA_RPTRCVC ' +
                    'PARM(''' + hfice + ''' ' +
                    '''' + cemail + ''')) ' +
                    'JOBQ(QBATCH) ' +
                    'JOBD(CI_SYSTEM/CLLCJOBD) ' +
                    'INLLIBL(*JOBD) ' +
                    'USER(CIBATCH)';

                //                                           Daily Refund Rpt
             when h_action    = 'RP5';

                byte8       = hyear4 + hmonth2 +
                                  hdays2;

                command     = 'SBMJOB CMD(CALL GA_RPTRFDC ' +
                    'PARM(''' + hfice + ''' ' +
                    '''' + h_applid + ''' ' +
                    '''' + byte8 + ''' ' +
                    '''' + cemail + ''')) ' +
                    'JOBQ(QBATCH) ' +
                    'JOBD(CI_SYSTEM/CLLCJOBD) ' +
                    'INLLIBL(*JOBD) ' +
                    'USER(CIBATCH)';

          endsl;


          if command    <> *blanks;
             cmdlen      = %len(%trimr(command));

             qcmdexc(command : cmdlen);
          endif;


       endsr;

       // **************************************************************
       //     PP_3RD_UPD:  Processing for 3RD PTY Receivable Add/Update
       // **************************************************************
       begsr PP_3RD_UPD;

          //   KY_BILLUSR cannot be blank - for the ADD screen

       if ky_billusr = *blanks and h_key = *blanks;
          condition = 'parm-bad';
          ei += 1;
          errs(ei) = '#2791';
       elseif ky_billusr <> web_clean(ky_billusr:CLEAN_ADDRESS:'/+');
          ky_billusr = web_clean(ky_billusr:CLEAN_ADDRESS:'/+');
          condition = 'parm-bad';
          ei += 1;
          errs(ei) = '#2798';
       endif;

       // Company cannot be blank

       if hcompany = *blanks;
          condition = 'parm-bad';
          ei += 1;
          errs(ei) = '#2797';
       endif;



       //     Valid State Code

          if hstate     <> *blanks;
             ccs_data=validST('US':hstate:
                                      fov:fov_fice);
             if %subst(ccs_data:1:5) = 'BADSC';
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#2792';
             endif;
          endif;

          //     Valid Zip Code

          if hpostcd    <> *blanks;
             checkzip=validZip(hpostcd:'US');
             if %subst(checkzip:1:2) = 'BZ';
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#2793';
             elseif %subst(checkzip:1:2) = 'OK';
                hpostcd     = %subst(checkzip:3:13);
             endif;
          endif;

          //    Verify Telephone Number is in Valid Format

          if htel#      <> *blanks;
             @result=validTel(htel#:'US':'X');
             if @reslt_RC   = 'BT';
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#2794';
             else;
                htel#       = @Reslt_tel;
             endif;
          endif;

          //    Verify E-mail Address is in Valid Format
          if hemail     <> *blanks;
             clear byte2;

             if not valid_email(hemail:statusDs);
                ei += 1;
                %subst(errs(ei):1:5) = '#2795';
                %subst(condition:1:8) = 'parm-bad';
             endif;
          endif;

          //    Have an error - skip to end
          if condition  <> *blanks;
             leavesr;
          endif;

          //    No Errors - Continue

          if NOT %open(GA_3RDPT1);
             open ga_3rdpt1;
          endif;

          if h_key      <> *blanks;
             ky_billusr = h_key;
             chain (hfice : ky_billusr) thirdpty;
             if %found;
                bcontact = hcontact;
                bcompany = hcompany;
                baddr1 = haddr1;
                bcity = hcity;
                bstate = hstate;
                bpostcd = hpostcd;
                %subst(btel#:1:20) = htel#;
                bemail = hemail;
                clear bstatus;
                bchguser    = huserid;
                bchgdate    = cycle_date;
                update thirdpty;

             else;

                condition   = 'NotFound';
                ei += 1;
                errs(ei)    = 'Record to update +
                                  not found.';
             endif;

             //    Write a new 3rd Party Receivables record - cannot exist already
          else;
             chain(n) (hfice : ky_billusr) thirdpty;
             if %found;
                condition   = 'Exists';
                ei += 1;
                errs(ei)    = 'Record Already +
                                  exists in database.';
             else;

                benabled    = 'Y';
                bfice = hfice;
                bbilluser = ky_billusr;
                bcontact = hcontact;
                bcompany = hcompany;
                baddr1 = haddr1;
                bcity = hcity;
                bstate = hstate;
                bpostcd = hpostcd;
                %subst(btel#:1:20) = htel#;
                bemail = hemail;
                clear bstatus;
                bchguser    = huserid;
                bchgdate    = cycle_date;
                bchgtime    = cycle_time;
                write thirdpty;

             endif;
          endif;


       endsr;

       // **************************************************************
       //     PP_3RD_DEL:  Processing for 3RD PTY Receivable Delete
       // **************************************************************
       begsr PP_3RD_DEL;

          ky_billusr = h_key;

          if NOT %open(GA_3RDPT1);
             open ga_3rdpt1;
          endif;

          chain (hfice : ky_billusr) thirdpty;
          if NOT %found;
             condition   = 'NotFound';
             ei += 1;
             errs(ei)    = 'ERROR: Cound not find: ' +
                               %trimr(hfice) + ' ' +
                               %trimr(ky_billusr);
          else;
             bstatus     = 'D';
             bchguser    = huserid;
             bchgdate    = cycle_date;
             update thirdpty;

             ei += 1;
             errs(ei)    = %trimr(bcompany) + ' ' +
                               ' Deleted Successfully.';
          endif;

       endsr;

       // ************************************************************************
       //     PP_BUSADD     Panel Processing for Adding Business Rec
       // ***********************************************************************
       begsr pp_busadd;

          //     First check any edits we may have

          exsr edit_bus;


          if condition   = *blanks;
             if not %open(gam_bus1);
                open gam_bus1;
             endif;

             bfice       = hfice;

             //   Assign an idcode

             setll (hfice : hival7) ga_busrec;
             readp(n) ga_busrec;
             if not %eof;
                bidcode += 1;
             else;
                bidcode     = 1;
             endif;

             bcontact    = hcontact;
             bcompany    = hcompany;
             baddr1      = haddr1;
             bcity       = hcity;
             bstate      = hstate;
             bpostcd     = hpostcd;
             btel#       = htel#;
             bemail      = hemail;
             bstatus     = ' ';
             b#_employs  = h#_employs;

             bpin_user   = hpin_user;
             evalr bpin# = %editc(cycle_time:'X');

             bchguser    = huserid;
             bchgdate    = cycle_date;
             bchgtime    = cycle_time;

             write ga_busrec;

             ei += 1;
             errs(ei) = 'Business Added +
                             Successfully.';
          endif;

       endsr;

       // ************************************************************************
       //     PP_BUSDEL     Panel Processing for Deleting Business Rec
       // ***********************************************************************
       begsr pp_busdel;

          if not %open(gam_bus1);
             open gam_bus1;
          endif;

          chain (hfice : hidcode) ga_busrec;
          if not %found;
             condition   = 'NOT FOUND ';
             ei += 1;
             errs(ei) = 'Error deleting record +
                          with fice: ' + hfice +
                          ' and id: ' + %char(hidcode);
          else;
             //    Set status to temp inactive and delete to pending

             bstatus     = 'D';

             update ga_busrec;
             ei += 1;
             errs(ei) = 'Business record +
                             marked as deleted.';
          endif;

       endsr;

       // ************************************************************************
       //     PP_BUSPDEL    Panel Processing for Perm Del Business Rec
       // ***********************************************************************
       begsr pp_buspdel;

          if not %open(gam_bus1);
             open gam_bus1;
          endif;

          chain (hfice : hidcode) ga_busrec;
          if not %found;
             condition   = 'NOT FOUND ';
             ei += 1;
             errs(ei) = 'Error deleting record +
                          with fice: ' + hfice +
                          ' and id: ' + %char(hidcode);
          else;
             delete ga_busrec;
             ei += 1;
             errs(ei) = 'Business Record +
                             Permanently Deleted';
          endif;

       endsr;

       // ************************************************************************
       //     PP_BUSPIN     Panel Processing for Reset Pin
       // ***********************************************************************
       begsr pp_buspin;

          if not %open(gam_bus1);
             open gam_bus1;
          endif;

          chain (hfice : hidcode) ga_busrec;
          if not %found;
             condition   = 'NOT FOUND ';
             ei += 1;
             errs(ei) = 'Error locating record +
                          with fice: ' + hfice +
                          ' and id: ' + %char(hidcode);
          else;

             evalr bpin# = %editc(cycle_time:'X');

             update ga_busrec;

             ei += 1;
             errs(ei) = 'The Pin # has been +
                             reset to: ' + bpin# +
                            '<br>The client has +
                             NOT been notified via +
                             email.<br>';

             //    Add writing garouter record to notify user of new pin

          endif;

       endsr;

       // ************************************************************************
       //     PP_BUSUPD     Panel Processing for Updating Business Rec
       // ***********************************************************************
       begsr pp_busupd;

          exsr edit_bus;

          if condition   = *blanks;
             if not %open(gam_bus1);
                open gam_bus1;
             endif;

             chain (hfice : hidcode) ga_busrec;
             if not %found;
                condition   = 'NOT FOUND ';
                ei += 1;
                errs(ei) = 'Error locating record +
                             with fice: ' + hfice +
                             'and id: ' + %char(hidcode);
             else;

                bcontact    = hcontact;
                bcompany    = hcompany;
                baddr1      = haddr1;
                bcity       = hcity;
                bstate      = hstate;
                bpostcd     = hpostcd;
                btel#       = htel#;
                bemail      = hemail;
                bstatus     = ' ';
                b#_employs  = h#_employs;
                bpin_user   = hpin_user;
                bchguser    = huserid;
                bchgdate    = cycle_date;

                update ga_busrec;

                ei += 1;
                errs(ei) = 'Business Updated +
                                Successfully.';
             endif;
          endif;

       endsr;

       // ************************************************************************
       //     PP_CE_UPD     Panel Processing for CE Update Buttons
       // ***********************************************************************
       begsr PP_CE_UPD;

          clear check_stage;

          //    chain to gaorder1# to update record
          if NOT %open(gaorder1#);
             open(e) gaorder1#;
             *in97 = %error;
          endif;

          chain horder# garec_#;
          *in90 = not %found;
          if *in90;
             leavesr;
          endif;

          // --------------------------------------------------
          //    Approve Info - check these values everytime
          // --------------------------------------------------
          if hga_apr_cd  = 'Y' and
                 tga_apr_cd  = ' ';
             tga_apr_cd  = 'Y';
             tga_apr_us  = huserid;
             tga_apr_dt  = cycle_date;
             tga_apr_tm  = cycle_time;
             if tready      = 'P';
                tready      = ' ';
             endif;
             check_stage = 'Y';
          endif;

          //    UnCheck Approve
          if hga_apr_cd  = ' ';
             clear tga_apr_cd;
             clear tga_apr_us;
             clear tga_apr_dt;
             clear tga_apr_tm;
          endif;

          //    Check Paid box - ONLY FOR COD orders!
          if tcardtype   = 'COD';
             if hga_paidcd  = 'Y';
                exsr make_bill;
                tbill_yyy   = cycle_yyy;
                tbillcycle  = billcycle;

                tga_paid    = 'Y';
                tga_paidus  = huserid;
                tga_paiddt  = cycle_date;
                tga_paidtm  = cycle_time;
                if origin      = 'CLLC';
                   tga_paidby  = '1';
                else;
                   tga_paidby  = '2';
                endif;
                check_stage = 'Y';
             endif;

             //    UnCheck Paid - Allowed only for CODs
             //    Not allowed because of setting of billlcyle!!!!!!!!
             if hga_paidcd  = ' ';
                //                   clear                   tga_paid
                //                   clear                   tga_paidus
                //                   clear                   tga_paiddt
                //                   clear                   tga_paidtm
             endif;
          endif;

          //    Check Stage if we should advance it
          if check_stage = 'Y';
             if tstage      = *blanks;
                if ga_ini_stg <> *blanks;
                   tstage      = ga_ini_stg;
                else;
                   tstage      = %subst(gstages:1:1);
                endif;
                tstagedate  = cycle_date;
                tstagetime  = cycle_time;
             endif;

             if tstage     <> *blanks;
                if %subst(grobo_cmds:1:9) <> *blanks and
                       ga_no_robo <> 'Y';
                   trobo_cond  = 'T';
                else;
                   trobo_cond  = *blanks;
                endif;
             endif;
          endif;

          update garec_#;


       endsr;

       // ************************************************************************
       //     PP_CE_RMVP    Panel Processing for CE Remove Problem
       // ***********************************************************************
       begsr pp_ce_rmvp;

          // ---chain to gaorder1# to update record
          if NOT %open(gaorder1#);
             open(e) gaorder1#;
             *in97 = %error;
          endif;

          chain horder# garec_#;
          *in90 = not %found;
          if *in90;
             leavesr;
          endif;

          //   Lookup the current robo stage and set trobo to the cond code

          clear i1;
          i1 = %scan(tstage:gstages);
          if i1 > 0;
             trobo_cond  = %subst(grobo_cnds:i1:1);
          endif;
          tready      = ' ';

          //   ZZZZZ - Determine if we need to update robo codes or
          //           eligibility dates

          update garec_#;


       endsr;

       // ************************************************************************
       //     PP_CE_CXL     Panel Processing for CE Cancel Button
       // ***********************************************************************
       begsr PP_CE_CXL;

          // ---chain to gaorder1# to update record
          if NOT %open(gaorder1#);
             open(e) gaorder1#;
             *in97 = %error;
          endif;

          chain horder# garec_#;
          *in90 = not %found;
          if *in90;
             leavesr;
          endif;

          tstat_end   = 'X';
          tstat_e_us  = huserid;
          tstat_e_dt  = cycle_date;
          tstat_e_tm  = cycle_time;

          trobo_cond = %xlate('TW':'XX':trobo_cond);

          update garec_#;

          // ---------------------------------------
          //   2. Write router record to notify the user of canceled order
          // ---------------------------------------
          rtr_action  = 'X';
          clear rtr_data;
          exsr pp_ga_rtr;


       endsr;

       // ****************************************************************
       //     ppCheckLpr: check LPRPLATE1 to decide if
       //                 we have 1 record, no records, or multiple
       //                 records
       // ****************************************************************
       begsr ppCheckLpr;

          if hsuperuser <> *blanks and h_applid = 'PP';

             exec sql
             declare Cur_chk_lprS cursor for
             SELECT porder#
             FROM LPRPLATE1
             WHERE pfice IN (
                   select ffice from dvinstitl7
                   where fficegroup = :hsuperuser)
             AND pvehplate = :hsrch_dta5;

             exec sql open Cur_chk_lprS;
             exec sql fetch Cur_chk_lprS for 2 rows into :lprOrdDs;
             exec sql get diagnostics :sql#Rows = row_count;
             exec sql close Cur_chk_lprS;

          else;

             exec sql
             declare Cur_chk_lprN cursor for
             SELECT porder#
             FROM LPRPLATE1
             WHERE pfice = :hfice
             AND pvehplate = :hsrch_dta5;

             exec sql open Cur_chk_lprN;
             exec sql fetch Cur_chk_lprN for 2 rows into :lprOrdDs;
             exec sql get diagnostics :sql#Rows = row_count;
             exec sql close Cur_chk_lprN;

          endif;

          if sql#Rows = 1;
             condition = 'unique   ';
             horder# = lprOrdDs(1).order#;
          elseif sql#Rows > 1;
             condition = 'multiple ';
          elseif sql#Rows = 0;
             condition = 'not-found';
          endif;

       endsr;

       // ************************************************************************
       //     PP_DP_CXL     Panel Processing for DP Cancel Button
       // ***********************************************************************
       begsr PP_DP_CXL;

          // ---chain to gaorder1# to update record
          if NOT %open(gaorder1#);
             open(e) gaorder1#;
             *in97 = %error;
          endif;

          chain horder# garec_#;
          *in90 = not %found;
          if *in90;
             leavesr;
          endif;

          tstat_end   = 'X';
          tstat_e_us  = huserid;
          tstat_e_dt  = cycle_date;
          tstat_e_tm  = cycle_time;

          trobo_cond = %xlate('TW':'XX':trobo_cond);

          update garec_#;

          // ---------------------------------------
          //   2. Write router record to notify the user of canceled order
          // ---------------------------------------
          rtr_action  = 'X';
          clear rtr_data;
          exsr pp_ga_rtr;


       endsr;

       // ************************************************************************
       //     PP_DP_UPD     Panel Processing for DP Update Buttons
       // ***********************************************************************
       begsr PP_DP_UPD;

          clear check_stage;

          //    chain to gaorder1# to update record
          if NOT %open(gaorder1#);
             open(e) gaorder1#;
             *in97 = %error;
          endif;

          chain horder# garec_#;
          *in90 = not %found;
          if *in90;
             leavesr;
          endif;

          // --------------------------------------------------
          //    Approve Info - check these values everytime
          // --------------------------------------------------
          if hga_apr_cd  = 'Y' and
                 tga_apr_cd = ' ';
             tga_apr_cd  = 'Y';
             tga_apr_us  = huserid;
             tga_apr_dt  = cycle_date;
             tga_apr_tm  = cycle_time;
             if tready      = 'P';
                tready      = ' ';
             endif;
             check_stage = 'Y';
          endif;

          //    UnCheck Approve
          if hga_apr_cd  = ' ';
             clear tga_apr_cd;
             clear tga_apr_us;
             clear tga_apr_dt;
             clear tga_apr_tm;
          endif;

          //    Authrze Info - only 1 time
          if hga_aut_cd  = 'Y';
             old_authcd  = tga_aut_cd;

             if tga_aut_us  = *blanks;
                tga_aut_cd  = 'Y';
                tga_aut_us  = huserid;
                tga_aut_dt  = cycle_date;
                tga_aut_tm  = cycle_time;
                check_stage = 'Y';
             endif;

             //  router for authorization form received - send router

             if old_authcd <> 'Y' and tfice <> '003899';
                rtr_action  = 'N';
                clear rtr_data;
                exsr pp_ga_rtr;
             endif;
          endif;

          //    UnCheck Authrze
          if hga_aut_cd  = ' ';
             clear tga_aut_cd;
             clear tga_aut_us;
             clear tga_aut_dt;
             clear tga_aut_tm;
          endif;

          //    Check Paid box - ONLY FOR COD orders!
          if tcardtype   = 'COD';
             if hga_paidcd  = 'Y';
                exsr make_bill;
                tbill_yyy   = cycle_yyy;
                tbillcycle  = billcycle;

                tga_paid    = 'Y';
                tga_paidus  = huserid;
                tga_paiddt  = cycle_date;
                tga_paidtm  = cycle_time;
                if origin      = 'CLLC';
                   tga_paidby  = '1';
                else;
                   tga_paidby  = '2';
                endif;
                check_stage = 'Y';
             endif;
             //    UnCheck Paid - Allowed for COD only
             //    NOT ALLOWED CAUSE BILLCYCLE IS ALREADY SET
             if hga_paidcd  = ' ';
                //                   clear                   tga_paid
                //                   clear                   tga_paidus
                //                   clear                   tga_paiddt
                //                   clear                   tga_paidtm
             endif;
          endif;

          //    Check Stage if we should advance it
          if check_stage = 'Y';
             if tstage      = *blanks;
                if ga_ini_stg <> *blanks;
                   tstage      = ga_ini_stg;
                else;
                   tstage      = %subst(gstages:1:1);
                endif;
                tstagedate  = cycle_date;
                tstagetime  = cycle_time;
             endif;

             if tstage     <> *blanks;
                if %subst(grobo_cmds:1:9) <> *blanks and
                       ga_no_robo <> 'Y';
                   trobo_cond  = 'T';
                else;
                   trobo_cond  = *blanks;
                endif;
             endif;
          endif;

          if happ_datab <> tapp_datab;
             tapp_datab = happ_datab;
          endif;

          update garec_#;

       endsr;

       // ************************************************************************
       //     PP_GA_RTR     Panel Processing for Writing a GA Router Rec
       // ***********************************************************************
       begsr PP_GA_RTR;


       if temail <> *blanks or tcell# <> *blanks;

             if NOT %open(garouter1);
                cmdlen = 70;
                clear command;
                command = overrid1;
                qcmdexc(command : cmdlen);
                open(e) garouter1;
                *in97 = %error;
             endif;

             sfice       = tfice;
             sorder_yyy  = torder_yyy;
             sorder#     = torder#;
             sstatus     = 'T';
             sapplid     = tapplid;
             saction     = rtr_action;
             ssource     = 'ADM';
             senteredby  = huserid;
             sentrydate  = cycle_date;
             sentrytime  = cycle_time;
             sreplydate  = 0;
             sreplytime  = 0;
             selig_date  = cycle_date;
             selig_time  = cycle_time;
             srpymethod  = trpymethod;
             saddress    = temail;
             scell#      = tcell#;
             scell#co    = tcell#co;
             write garouter;


       endif;

       endsr;

       // *********************************************************************
       //     PP_LogOff:    Panel processing for Log Off Request
       // *********************************************************************
       begsr PP_LogOff;

          chain huserid dvclientf1;
          *in90 = not %found;
          if *in90 <> *on;
             clear csignstamp;
             clear csignonkey;
             clastactd   = cycle_date;
             clastactt   = cycle_time;
             update client;

          else;
             //                   PUT ERROR Processing Here
             leavesr;
          endif;

       endsr;

       // *********************************************************************
       //     PP_resadd     Panel Processing to Add New a Residence
       // *********************************************************************
       begsr PP_resadd;

          //   Make sure gam_res1 is open for write
          if not %open(gam_res1a);
             open gam_res1a;
          endif;

          //   Add the new Residenct (H-fields and R-fields for Address)
          wfice = hfice;
          clear wrecord_id;
          wusrtype = husrtype;
          clear wstatus;
          clear W#REGV;
          clear W#UNREGV;
          clear W#REGP;
          clear W#UNREGP;
          clear W#XCLUDV;
          clear waction;
          clear wactionmod;
          clear wimbtrack#;
          clear wimb_ddate;
          clear wimb_days;
          clear wmail_date;

          //   Call GEN_USRPIN to get NEW unique UserID/Pin# for FICE
          byte4       = '*SGL';
          clear wpin_user;
          clear wpin#;

          gen_usrpin(wfice : byte4 : wpin_user :
                wpin#);

          wenabled = 'Y';
          w#invsign   = 0;
          w#_employs  = 0;
          %subst(win_out:1:1) = hin_out;
          clear wloc_id;
          wavstat = hav_status;
          werrcode = hav_errc;
          wav_smlv = hav_smlv_o;
          wav_safl = hav_safl_o;
          wav_dpvi = hav_dpvi_o;

          wfullname   = hsalut;
          wfullname = %trimr(wfullname) + ' ' +
              hfrstname;
          wfullname = %trimr(wfullname) + ' ' +
              hmidlname;
          wfullname = %trimr(wfullname) + ' ' +
              hlastname;
          wfullname = %trimr(wfullname) + ' ' + hsuffix;
          wfullname   = %trim(wfullname);

          wsalut = hsalut;
          wfrstname = hfrstname;
          wmidlname = hmidlname;
          wlastname = hlastname;
          wsuffix = hsuffix;

          waddr1 = haddr1;
          wcity = hcity;
          wstate = hstate;
          wpostcd = hpostcd;
          %subst(wtel#:1:20) = htel#;
          winstance#  = dtara_seq#('RES');

          wstr_dir = hstr_dir;
          wstr_name = hstr_name;
          wstr_hnum = hstr_hnum;
          wstr_prequ = hstr_prequ;
          wstr_type = hstr_type;
          wstr_postD = hstr_postD;
          wstr_postQ = hstr_postQ;
          wstr_apt = hstr_apt;
          wsubacct = '  ';

          clear wzone;

          wpostcd_dp  = hpostcd_dp;

          clear wlastactd;
          clear wlastactt;
          clear wsignonkey;

          //     Pad PO Box to 4 digits
          if hpo_box#   <> *blanks;
             byte15 = hpo_box#;
             pad_num     = 4;
             exsr pad_to_X;
             wpo_box# = byte15;

             walt_addr1  = 'PO BOX ' + wpo_box#;
             walt_city   = icity;
             walt_state  = istate;
             walt_zip    = %subst(ipostcd:1:5) + '-' +
                               wpo_box#;
          else;
             walt_addr1  = halt_addr1;
             walt_city   = halt_city;
             walt_state  = halt_state;
             walt_zip    = halt_zipcd;
          endif;

          wemail = hemail;
          wem_optin = hem_optin;

          wchguser    = huserid;
          wchgdate    = cycle_date;
          wchgtime    = cycle_time;

          write resrec_1a;

       endsr;

       // *********************************************************************
       //     PP_resdel     Panel Processing to Delete a Residence
       // *********************************************************************
       begsr PP_resdel;

          clear condition;

          user_id8 = h_key;

          //   Delete the GAM_RES1 Record
          if not %open(gam_res1u);
             open gam_res1u;
          endif;

          chain(n) (hfice : user_id8) resrec_1u;
          if %found(gam_res1u);
             //   Call GA_TRNSFR program with the Resident Instance# to Delete
             function    = 'DELALL';
             fr_fice     = rfice;
             fr_instnc#  = rinstance#;
             clear rc;

             ga_trnsfr(function : parms_fr : parms_to :
                   huserid : rc);
          endif;

       endsr;

       // *********************************************************************
       //     PP_resedt     Panel Processing to Edit a New Residence
       // *********************************************************************
       begsr PP_resedt;

          clear condition;

          //   Retrieve the resident record by userid - (UPDATE ONLY)
          if h_action    = 'UPD';
             exsr get_resu;
          endif;

          //     First and Last Name cannot be blank unless business
          //     in which case first and middle name MUST be blank

          if husrtype    = 'B' or
                 husrtype    = 'C';
             if hfrstname  <> *blanks or
                    hmidlname  <> *blanks;
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5599';
             endif;
          else;
             if hfrstname   = *blanks or
                    hlastname   = *blanks;
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5591';
             endif;
          endif;

          //     Address Line cannot be blank

          if haddr1      = *blanks;
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#5596';
          endif;

          //     Valid State

          ccs_data    = validST('US':hstate:
                                    fov:fov_fice);
          if %subst(ccs_data:1:5) = 'BADSC';
             %subst(condition:1:8) = 'parm-bad';
             ei += 1;
             %subst(errs(ei):1:5) = '#5592';
          endif;

          //     Valid zip code

          if hpostcd    <> *blanks;
             checkzip    = validZip(hpostcd:'US');
             if %subst(checkzip:1:2) = 'BZ';
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5593';
             elseif %subst(checkzip:1:2) = 'OK';
                hpostcd     = %subst(checkzip:3:13);
             endif;
          endif;

          //     Valid telephone number

          if htel#      <> *blanks;
             @result     = validTel(htel#:'US':'X');
             if @reslt_RC   = 'BT';
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5594';
             else;
                htel#       = @Reslt_tel;
             endif;
          endif;

          //    Verify E-mail Address is in Valid Format
          if hemail     <> *blanks;
             clear byte2;

             if not valid_email(hemail:statusDs);
                ei += 1;
                %subst(errs(ei):1:5) = '#5590';
                %subst(condition:1:8) = 'parm-bad';
             endif;
          endif;

          //    Verify Opt-in is only checked if e-mail is entered
          if hem_optin  <> *blanks and
                 hemail      = *blanks;
             ei += 1;
             %subst(errs(ei):1:5) = '#5589';
             %subst(condition:1:8) = 'parm-bad';
          endif;


           skipAlt = *off;
          //   SKIP REST OF EDITS FOR MARKETING FICE
          if hfice       = 'V09998';
     c*                  goto      skip_alt
             skipAlt = *on;
          endif;

          if skipAlt = *off;
             // IF PO BOX number is entered make sure its numeric
             if hpo_box#   <> *blanks;
                byte5 = %xlate(xdig:blnk10:hpo_box#);
                if byte5      <> *blanks;
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5597';
                endif;
             endif;

             // Cannot enter BOTH a POBOX#, and an Alternate Address
             if hpo_box#   <> *blanks and
                 (halt_addr1<> *blanks or
                 halt_city  <> *blanks or
                 halt_state <> *blanks or
                 halt_zipcd <> *blanks);
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5598';
             endif;

             // Valid alternate zip code
             if halt_zipcd <> *blanks;
                checkzip    = validZip(halt_zipcd:'US');
                if %subst(checkzip:1:2) = 'BZ';
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5593';
                elseif %subst(checkzip:1:2) = 'OK';
                   halt_zipcd  = %subst(checkzip:3:13);
                endif;
             endif;

             // Check validity of the alternate address

             if condition   = *blanks and
                halt_addr1 <> *blanks;
                clear #AV_dqin;
                clear #AV_dqout;
                #AV_func = 'AV';
                #AV_case    = 'U';
                #AV_adrl    = '35';

                #AV_adr1    = halt_addr1;
                #AV_city    = halt_city;
                #AV_stat    = halt_state;
                #AV_zipc    = halt_zipcd;
                #AV_zip4    = %subst(halt_zipcd:7:4);

                exsr $get_AV;

                if #AV_status <> 'E';
                   halt_addr1  = #av_adr2_o;

                   halt_zipcd  = #AV_zipc_o;
                   if #AV_zip4_o <> *blanks;
                      halt_zipcd  = %trim(halt_zipcd) + '-' +
                                     #AV_zip4_o;
                   endif;
                else;

                   //Set error that address is not in postal system

                   condition = 'INV ADDRES';
                   ei += 1;
                   errs(ei) = 'INVALID ALT ADDRESS: ' +
                                  #AV_emsg_o;
                endif;
             endif;
          endif;

     c*    skip_alt      tag

       //    Check validity of the address

          if condition   = *blanks;
             clear #AV_dqin;
             clear #AV_dqout;
             #AV_func = 'AV';
             #AV_case    = 'U';
             #AV_adrl    = '35';

             #AV_adr1    = haddr1;
             #AV_city    = hcity;
             #AV_stat    = hstate;
             #AV_zipc    = hpostcd;
             #AV_zip4    = %subst(hpostcd:7:4);

             exsr $get_AV;

             if #AV_status <> 'E' OR
                //  03/13/09 MRB started only calling parseaddr if AV cannot parse
                    (#AV_status = 'E' and
                     #av_stnm_o <> *blanks and
                     hav_ovride  = 'Y');
                hstr_dir    = #av_prdr_o;
                hstr_name   = #av_stnm_o;
                hstr_hnum = #av_stno_o;
                hstr_prequ  = ' ';
                hstr_type   = #av_stsf_o;
                hstr_postD  = #av_psdr_o;
                hstr_postQ  = #av_satp_o;
                hstr_apt    = #av_sano_o;

                haddr1      = #av_adr2_o;

                hpostcd     = #AV_zipc_o;
                if #AV_zip4_o <> *blanks;
                   hpostcd     = %trim(hpostcd) + '-' +
                                     #AV_zip4_o;
                endif;
                hpostcd_dp  = #AV_dpbc_o;

                hav_status  = #av_status;
                hav_errc    = #av_errc;
                hAV_smlv_o  = #AV_smlv_o;
                hAV_safl_o  = #AV_safl_o;
                hAV_dpvi_o  = #AV_dpvi_o;

                //   12/17/08 MRB Experiminting with setting haddress fields even
                //                if we have an address error

             elseif #AV_status  = 'E' AND
                    hav_ovride  = 'Y';
                //    Use jeff's address parser if AV software error
                addr_50     = haddr1;
                parsed_adr  = parseaddr(hfice:addr_50);

                hstr_dir    = str_dir;
                hstr_name   = str_name;
                dow %len(%trim(str_hnum)) < %len(hstr_hnum);
                   str_hnum    = '0' + %trim(str_hnum);
                enddo;
                hstr_hnum = str_hnum;
                hstr_type   = str_type;
                hstr_postD  = str_postD;
                hstr_postQ  = str_postQ;
                hstr_apt    = str_apt;

                //     need to assemble addr line 1
                byte10      = %triml(str_hnum:'0');
                haddr1 = %trimr(byte10) + ' ' + str_name;
                haddr1 = %trimr(haddr1) + ' ' + str_prequ;
                haddr1 = %trimr(haddr1) + ' ' + str_type;
                haddr1 = %trimr(haddr1) + ' ' + str_postd;
                haddr1 = %trimr(haddr1) + ' ' + str_postq;
                haddr1 = %trimr(haddr1) + ' ' + str_apt;
                haddr1      = %trim(haddr1);

                //  Since we are creating the address, take city and zip from instit rec

                hpostcd     = ipostcd;

                hav_status  = #av_status;
                hav_errc    = #av_errc;
                hAV_smlv_o  = #AV_smlv_o;
                hAV_safl_o  = #AV_safl_o;
                hAV_dpvi_o  = #AV_dpvi_o;
             else;

                //   Set error that address is not in postal system

                //  3/16/09 MRB Use address returned from AV if we have it
                if #av_adr2_o <> *blanks;
                   haddr1      = #av_adr2_o;
                endif;

                condition   = 'INV ADDRES';
                ei += 1;
                errs(ei)    = 'INVALID ADDRESS: ' +
                                  #AV_emsg_o;
                //   This error msg puts out an override checkbox to let the
                //   user force enter a bad address
                //                   if        hfice       = 'MSTEST'
                ei += 1;
                errs(ei)    = '#55885';
                //                   endif
             endif;

             //   If address is not the same as the RES1 - make sure that
             //   this address does not already exists (UPDATE ONLY)
             if h_action    = 'UPD';
                if hstr_dir   <> rstr_dir or
                       hstr_name  <> rstr_name or
                       hstr_hnum  <> rstr_hnum or
                       hstr_prequ <> rstr_prequ or
                       hstr_type  <> rstr_type or
                       hstr_postD <> rstr_postD or
                       hstr_postQ <> rstr_postQ or
                       hstr_apt   <> rstr_apt;

                   if not %open(gam_res1a);
                      open gam_res1a;
                   endif;

                   setll (hfice : hstr_dir : hstr_name :
                         hstr_hnum : hstr_prequ : hstr_type :
                         hstr_postD : hstr_postQ : hstr_apt :
                         hsubacct) resrec_1a;
                   if %equal(gam_res1a);
                      %subst(condition:1:8) = 'parm-bad';
                      ei += 1;
                      %subst(errs(ei):1:5) = '#5595';

                      //  also set the H-address field back to the original one - for when
                      //  they Cancel, we dont go back to the wrong address
                      haddr1 = raddr1;

                   endif;
                endif;
             endif;

             //   If address already exists then we have an error (ADD ONLY)
             if h_action    = 'ADD';

                if not %open(gam_res1a);
                   open gam_res1a;
                endif;

                setll (hfice : hstr_dir : hstr_name :
                      hstr_hnum : hstr_prequ : hstr_type :
                      hstr_postD : hstr_postQ : hstr_apt :
                      hsubacct) resrec_1a;
                if %equal(gam_res1a);
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5595';
                endif;
             endif;
          endif;

       endsr;

       // ***********************************************************************
       //     PP_resena:  Enable a Residents UserID                            **
       // ***********************************************************************
       begsr PP_resena;

          user_id8 = h_key;

          if not %open(gam_res1u);
             open gam_res1u;
          endif;

          chain (hfice : user_id8) resrec_1u;
          if %found(gam_res1u);
             renabled    = 'Y';
             r#invsign   = 0;
             update resrec_1u;
          endif;

       endsr;


       //*********************************************************************
       //  PP_ressnm:  Send the resident their mailer via e-mail            **
       //*********************************************************************
       begsr PP_ressnm;

       //  Retrieve the resident record by userid
       exsr get_resu;

       //--------------------------------------------------
       // Call the program to sent the mailer as an attachment
       //--------------------------------------------------

       #prog_name = rfice + 'MLRC';
       if rfice = 'MSTEST';
          #prog_name = 'V60045MLRC';
       endif;
       if 'X' = %subst(#prog_name:1:1);   // If this is a set up fice,
          %subst(#prog_name:1:1) = 'V';   // call real pgm
       endif;

       chrg_byte = ' ';                   // All mailers use ' ' no charging online
       prod_byte  = 'B';  // Change to user gmailrcode eventually
       // mode    = 'S';                   // All mailers use 'S'
       mode      = 'I';

       callp(e) muni_pgm(chrg_byte:rfice:prod_byte:mode:rpin_user);
       if %error;
          condition = 'email-failed';
          ei += 1;
          errs(ei) = 'There was an error sending the email.';
       endif;

       endsr;


       // ***********************************************************************
       //   PP_ressnp:  Send the resident their pin via e-mail                 **
       // ***********************************************************************
       begsr PP_ressnp;

          //   Retrieve the resident record by userid
          exsr get_resu;

          // ----------------------------------------------------
          //   write a router record for user forgeting password
          // ----------------------------------------------------

          clear overrides;
          overrides   = 'OVRDBF FILE(GAROUTER1) TOFILE(*LIBL/GAROUTER1) ' +
                        'SEQONLY(*NO)';

          cmdlen = 70;
          clear command;
          command = overrides;
          qcmdexc(command : cmdlen);

          if not %open(garouter1);
             open(e) garouter1;
             *in97 = %error;
          endif;

     c*                  time                    td14
          td14date = %char(%date():*usa0);
          td14time = %dec(%Time():*iso);

          date8yyyy = td14yyyy;
          date8mmdd = td14mmdd;
          cycle_date  = today;
          cycle_time  = curtime;

          suserid     = rpin_user;
          sfice       = hfice;
          sorder_yyy  = cycle_yyy;
          clear sorder#;
          sstatus     = 'T';
          sapplid     = h_applid;
          saction     = 'F';
          ssource     = 'ADM';
          senteredby  = huserid;
          sentrydate  = cycle_date;
          sentrytime  = cycle_time;
          selig_date  = cycle_date;
          selig_time  = cycle_time;

          clear sreplydate;
          clear sreplytime;
          clear srtr_data;
          clear scell#;
          clear scell#co;

          srpymethod  = 'E';
          saddress    = remail;

          write garouter;

       endsr;

       // *********************************************************************
       //     PP_resupd     Panel Processing to Update a Residence
       // *********************************************************************
       begsr PP_resupd;

          upd_addr1   = 'N';
          upd_tel#    = 'N';

          //   Retrieve the resident data by userID
          if not %open(gam_res1u);
             open gam_res1u;
          endif;

          chain (hfice : user_id8) resrec_1u;

          //   Found the Resident, Update with New Information from screen
          if %found(gam_res1u);
             rusrtype = husrtype;
             rsalut = hsalut;
             rfrstname = hfrstname;
             rmidlname = hmidlname;
             rlastname = hlastname;

             //  03/05/10 MRB Vacant addresses have a name of Current Resident

             if raction     = 'V' and
                    hlastname  <> *blanks and
                    hlastname  <> 'RESIDENT' and
                    hlastname  <> 'OCCUPANT';
                clear raction;
             endif;
             rsuffix = hsuffix;
             rfullname   = rsalut;
             rfullname = %trimr(rfullname) + ' ' +
                 rfrstname;
             rfullname = %trimr(rfullname) + ' ' +
                 rmidlname;
             rfullname = %trimr(rfullname) + ' ' +
                 rlastname;
             rfullname = %trimr(rfullname) + ' ' + rsuffix;
             rfullname   = %trim(rfullname);

             if haddr1     <> raddr1;
                upd_addr1   = 'Y';
             endif;

             raddr1 = haddr1;
             rcity = hcity;
             rstate = hstate;
             rpostcd = hpostcd;

             if htel#      <> rtel#;
                upd_tel#    = 'Y';
             endif;

             %subst(rtel#:1:20) = htel#;

             //     Check if we are changing the e-mail address

             if hemail     <> remail and
                    remail     <> *blanks;
                //     write router record notifing user of change

                exsr rtr_chgem;

          if hem_optin <> 'Y';
             clear hem_optin;
          endif;

             endif;

             remail = hemail;

       if hemail = *blanks;
          clear rem_optin;
       else;
          rem_optin = hem_optin;
       endif;


       //     Pad PO Box to 4 digits
             if hpo_box#   <> *blanks;
                byte15 = hpo_box#;
                pad_num     = 4;
                exsr pad_to_X;
                rpo_box# = byte15;

                ralt_addr1  = 'PO BOX ' + rpo_box#;
                ralt_city   = rcity;
                ralt_state  = rstate;
                ralt_zip    = %subst(rpostcd:1:5) + '-' +
                                  rpo_box#;
             else;
                clear rpo_box#;
                ralt_addr1  = halt_addr1;
                ralt_city   = halt_city;
                ralt_state  = halt_state;
                ralt_zip    = halt_zipcd;
             endif;

             rstr_dir    = hstr_dir;
             rstr_name   = hstr_name;
             rstr_hnum   = hstr_hnum;
             rstr_prequ  = hstr_prequ;
             rstr_type   = hstr_type;
             rstr_postD  = hstr_postD;
             rstr_postQ  = hstr_postQ;
             rstr_apt    = hstr_apt;

             //     Update the IN/OUT of city code

             rin_out     = hin_out;

             //     Update the AV postal code fields

             ravstat     = hav_status;
             rerrcode    = hav_errc;
             rav_smlv    = hAV_smlv_o;
             rav_safl    = hAV_safl_o;
             rav_dpvi    = hAV_dpvi_o;

             rchgdate    = cycle_date;
             rchgtime    = cycle_time;
             rchguser    = huserid;

             update resrec_1u;

             //      If telephone# changed, then change Tel# in Pets/Vehicle DB
             if upd_tel#    = 'Y' or
                    upd_addr1   = 'Y';
                if not %open(gam_veh1);
                   open gam_veh1;
                endif;

                setll (hfice : rstr_dir : rstr_name :
                      rstr_hnum : rstr_prequ : rstr_type :
                      rstr_postD : rstr_postQ : rstr_apt :
                      rsubacct) ga_vehrec;
                *in90 = not %found;
                dow *in90 <> *on;
                   reade (hfice : rstr_dir : rstr_name :
                         rstr_hnum : rstr_prequ : rstr_type :
                         rstr_postD : rstr_postQ : rstr_apt :
                         rsubacct) ga_vehrec;
                   *in95 = %eof;
                   if *in95;
                      leave;
                   endif;
                   vtel# = rtel#;

                   vstr_dir    = rstr_dir;
                   vstr_name   = rstr_name;
                   vstr_hnum   = rstr_hnum;
                   vstr_prequ  = rstr_prequ;
                   vstr_type   = rstr_type;
                   vstr_postD  = rstr_postD;
                   vstr_postQ  = rstr_postQ;
                   vstr_apt    = rstr_apt;

                   update ga_vehrec;
                enddo;

                if not %open(gam_pet1);
                   open gam_pet1;
                endif;

                setll (hfice : rstr_dir : rstr_name :
                      rstr_hnum : rstr_prequ : rstr_type :
                      rstr_postD : rstr_postQ : rstr_apt :
                      rsubacct) ga_petrec;
                *in90 = not %found;
                dow *in90 <> *on;
                   reade (hfice : rstr_dir : rstr_name :
                         rstr_hnum : rstr_prequ : rstr_type :
                         rstr_postD : rstr_postQ : rstr_apt :
                         rsubacct) ga_petrec;
                   *in95 = %eof;
                   if *in95;
                      leave;
                   endif;
                   ptel# = rtel#;

                   pstr_dir    = rstr_dir;
                   pstr_name   = rstr_name;
                   pstr_hnum   = rstr_hnum;
                   pstr_prequ  = rstr_prequ;
                   pstr_type   = rstr_type;
                   pstr_postD  = rstr_postD;
                   pstr_postQ  = rstr_postQ;
                   pstr_apt    = rstr_apt;

                   update ga_petrec;
                enddo;
             endif;

          endif;

       endsr;

       // *********************************************************************
       //     PP_resvac   Update Residence as "VACANT" (NO NAME)
       //
       //     This routine updates a Resident Address as a "VACANT ADDRESS",
       //     because we received the returned mail from the post office that
       //     has been stamped as vacant. Fields that pertain to the resident
       //     are cleared. We also update the action code to a "V" for VACANT
       //     and NAME is needed.  When the current resident logs on they
       //     will be able to and required to change their first/last name.
       // *********************************************************************
       begsr PP_resvac;

          user_id8 = h_key;

          //   Retrieve the resident data by userID
          if not %open(gam_res1u);
             open gam_res1u;
          endif;

          chain(n) (hfice : user_id8) resrec_1u;
          if %found(gam_res1u);

             //   Call GA_TRNSFR program with the Resident Instance to Vacate
             function    = 'RESVAC';
             fr_fice     = rfice;
             fr_instnc#  = rinstance#;
             clear rc;

             ga_trnsfr(function : parms_fr : parms_to :
                   huserid : rc);
          endif;

       endsr;

       // *********************************************************************
       //     PP_crtsub     Panel Processing to Add a New Sub Account
       // *********************************************************************
       begsr PP_crtsub;

          //   Retrieve the FIRST sub-account resident record by userid
          have_res    = #false;
          exsr get_resu;

          function    = 'CRTNEWSUB';
          fr_fice     = rfice;
          fr_instnc#  = rinstance#;
          clear rc;

          ga_trnsfr(function : parms_fr : parms_to :
                huserid : rc);

          if rc          = #TRUE;
             ei += 1;
             %subst(errs(ei):1:5) = '#5534';
          else;
             ei += 1;
             %subst(errs(ei):1:5) = '#5535';
          endif;

       endsr;

       // ****************************************************************
       //  ppSearchLpr: Search LPRPLATE1
       // ****************************************************************
       begsr ppSearchLpr;
          element_fl = '2141';
          element_wd = 'MSG';
          element_p1 = ' ';
          exsr wrtpanlmsg;

          if hsuperuser <> *blanks and h_applid = 'PP';

             exec sql
             declare Cur_srhLprS cursor for
             SELECT * from gaorder1
             WHERE torder# IN (
                    SELECT porder# FROM LPRPLATE1
                    WHERE pfice IN (
                          select ffice from dvinstitl7
                          where fficegroup = :hsuperuser)
                    AND pvehplate = :hsrch_dta5);

             exec sql open Cur_srhLprS;
             exec sql fetch Cur_srhLprS for 50 rows into :order_ds;
             exec sql get diagnostics :sql#Rows = row_count;

             dow sql#Rows > 0;

                for row_idx = 1 to sql#Rows;
                   orderds = order_ds(row_idx);
                   exsr $PP_Row;
                endfor;

                exec sql fetch Cur_srhLprS for 50 rows into :order_ds;
                exec sql get diagnostics :sql#Rows = row_count;

             enddo;

             exec sql close Cur_srhLprS;

          else;

             exec sql
             declare Cur_srhLprN cursor for
             SELECT * from gaorder1
             WHERE torder# IN (
                    SELECT porder# FROM LPRPLATE1
                    WHERE pfice = :hfice
                    AND pvehplate = :hsrch_dta5);

             exec sql open Cur_srhLprN;
             exec sql fetch Cur_srhLprN for 50 rows into :order_ds;
             exec sql get diagnostics :sql#Rows = row_count;

             dow sql#Rows > 0;

                for row_idx = 1 to sql#Rows;
                   orderds = order_ds(row_idx);
                   exsr $PP_Row;
                endfor;

                exec sql fetch Cur_srhLprN for 50 rows into :order_ds;
                exec sql get diagnostics :sql#Rows = row_count;

             enddo;

             exec sql close Cur_srhLprN;

          endif;
          bufout = %trim(bufout) + '</table>' + linefeed;
          bufout = %trim(bufout) + '<p>' + linefeed;
       endsr;

       // ****************************************************************
       //     PP_SND_GA:   Send a GA Router Record
       // ****************************************************************
       begsr PP_SND_GA;

          clear comp_msg;

          if NOT %open(gaorder1#);
             open(e) gaorder1#;
             *in97 = %error;
          endif;

          chain horder# garec_#;
          if NOT %found;
             clear torder#;
             leavesr;
          endif;

          // -----If user checked Update Info Box - then update the gaorder rec
          if hupd_info   = 'Y';
             trpymethod = hrpymethod;
             temail = hemail;
             update garec_#;
          else;
             unlock gaorder1#;
          endif;

          // ----Now write the garouter1 record to resend results
          if NOT %open(garouter1);

             cmdlen = 70;
             clear command;
             command = overrid1;
             qcmdexc(command : cmdlen);

             open(e) garouter1;
             *in97 = %error;
          endif;

     c*                  time                    td14
          td14date = %char(%date():*usa0);
          td14time = %dec(%Time():*iso);

          date8yyyy = td14yyyy;
          date8mmdd = td14mmdd;

          suserid     = tpin_user;
          sfice       = tfice;
          sorder_yyy  = torder_yyy;
          sorder#     = torder#;
          sstatus     = 'T';

          sapplid     = tapplid;
          saction     = hsend_type;
          ssource     = 'ADM';
          senteredby  = huserid;
          sentrydate  = date8;
          sentrytime  = time6;
          selig_date  = date8;
          selig_time  = time6;
          sreplydate  = 0;
          sreplytime  = 0;

          // -----If this is a re-issued permit, put out re-issued permit #
          if hsend_type  = 'R';

             //      Chain to new record, then get old record again

             chain(n) tpp_altord garec_#;
             srtr_data = tapp_data8;
          elseif saction     = 'O' and
                 hupd_tmpdt  = 'Y';
             saction     = 'S';
             srtr_data   = adate8;

       // If this is a resend of an Extended temp permit get the expiration
       // date of the last extended temp permit sent
       elseif saction = 'S';
          if not %open(garouter1c);
             open garouter1c;
          endif;
          setll (horder#:saction) garouterc;
          dow not %eof(garouter1c);
             reade (horder#:saction) garouterc;
             if %eof(garouter1c);
                leave;
             endif;

             srtr_data = zrtr_data;
          enddo;


          else;

             srtr_data   = *blanks;
          endif;

          //      DO NOT SEND TEXTs for RESENDs from ADMIN!
          srpymethod  = hrpymethod;
          saddress    = hemail;
          clear scell#;
          clear scell#co;
          write garouter;

          // --------------------------------------------------------------------

          if saction     = 'A';
             comp_msg    = 'Authorization form';
          elseif saction     = 'C';
             comp_msg    = 'Completed Notification';
          elseif saction     = 'D';
             comp_msg    = 'Delivery Notification';
          elseif saction     = 'E';
             comp_msg    = 'Order Acknowledgement';
          elseif saction     = 'H';
             comp_msg    = 'Hold Change';
          elseif saction     = 'L';
             comp_msg    = 'LOST/STOLEN';
          elseif saction     = 'M';
             comp_msg    = 'Mail Returned     ';
          elseif saction     = 'O';
             comp_msg    = 'Order Receipt';
          elseif saction     = 'P';
             comp_msg    = 'Problem Notification';
          elseif saction     = 'R';
             comp_msg    = 'Re-Issued';
          elseif saction     = 'S';
             comp_msg    = 'Extended Temp';
          elseif saction     = 'X';
             comp_msg    = 'Canceled Notification';
          elseif saction     = 'Y';
             comp_msg    = 'Refunded Notification';
          elseif saction     = 'V';
             comp_msg    = 'Voided Notification';
          endif;


          if comp_msg    = *blanks;
             comp_msg    = 'UNKNOWN RECORD ' +
                 'SENT for ' + sorder# + ' to ' +
                 %trim(saddress);
          else;
             comp_msg    = %trim(comp_msg) + ' ' +
                 'for Order(' + sorder# + ') has ' +
                 'been sent to ' + %trim(saddress);
          endif;


       endsr;

       // *********************************************************************
       //     PP_trfedt     Panel Processing to Edit a Transfer of Residence
       //
       //     The Tansfer Screen has 3 iterations
       //     Iteration 0 - Address is input - Validate Address
       //     Iteration 1 - Address does NOT exists - Create it
       //                   Address does     exists - Show List, with New Sub
       //     Iteration 2 - Locked in to address down to sub account level
       // *********************************************************************
       begsr PP_trfedt;

          clear condition;
          clear trnsfr_new;
          clear trnsfr_sub;

          //     Ensure whether they selected to move the resident or not
          if hmove_res   = ' ';
             ei += 1;
             %subst(errs(ei):1:5) = '#5743';
             %subst(condition:1:8) = 'parm-bad';
             leavesr;
          endif;

          //     New Address must Address Validate or we cannot continue
          if hnew_addr1 <> *blanks;
             clear #AV_dqin;
             clear #AV_dqout;
             #AV_func = 'AV';
             #AV_case    = 'U';
             #AV_adrl    = '35';

             #AV_adr1    = hnew_addr1;
             #AV_city    = icity;
             #AV_stat    = istate;
             #AV_zipc    = '';
             #AV_zip4    = '';

             exsr $get_AV;

             //   Set error that address is not in postal system
             if #AV_status  = 'E' and
                    hav_ovride <> 'Y';
                condition   = 'INV ADDRES';
                ei += 1;
                errs(ei)    = 'Invalid New Address:<br>' +
                                  #AV_emsg_o;

                //   Check box to allow address override
                ei += 1;
                errs(ei)    = '#55885';

                leavesr;

                //  06/19/09 MRB Started allowing a move to non av valid address
             elseif #AV_status  = 'E' and
                    hav_ovride  = 'Y';
                //   If address could be parsed, use it below, otherwise call parseaddr
                if #av_stnm_o  = *blanks;
                   addr_50     = hnew_addr1;
                   parsed_adr  = parseaddr(hfice:addr_50);

                   #av_prdr_o  = str_dir;
                   #av_stnm_o  = str_name;
                   dow %len(%trim(str_hnum)) < %len(hstr_hnum);
                      str_hnum    = '0' + %trim(str_hnum);
                   enddo;
                   #av_stno_o = str_hnum;
                   #av_stsf_o  = str_type;
                   #av_psdr_o  = str_postD;
                   #av_satp_o  = str_postQ;
                   #av_sano_o  = str_apt;

                   //     need to assemble addr line 1
                   byte10      = %triml(str_hnum:'0');
                   #AV_adr2_o = %trimr(byte10) + ' ' + str_name;
                   #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                       str_prequ;
                   #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                       str_type;
                   #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                       str_postd;
                   #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                       str_postq;
                   #AV_adr2_o = %trimr(#AV_adr2_o) + ' ' +
                       str_apt;
                   #AV_adr2_o  = %trim(#AV_adr2_o);
                endif;
             endif;

             //   New Address is valid - check if Address exists in GAM_RES1A
             wstr_dir    = #av_prdr_o;
             wstr_name   = #av_stnm_o;
             wstr_hnum = #av_stno_o;
             wstr_prequ  = ' ';
             wstr_type   = #av_stsf_o;
             wstr_postD  = #av_psdr_o;
             wstr_postQ  = #av_satp_o;
             wstr_apt    = #av_sano_o;
             wsubacct    = hsubacct;
             if wsubacct    = '00';
                clear wsubacct;
             endif;
             hnew_addr1  = #av_adr2_o;

             if not %open(gam_res1a);
                open gam_res1a;
             endif;

             //   Always CHAIN to the Resident File with the Address and SubAccount
             //   If the address exists, it better be Vacant.
             //   address MUST NOT be "VACANT", if they are only moving VEHs/PETs
             //   'XX' means create new Sub Accnt - skip exist check (it doesnt)
             chain(n) (hfice : wstr_dir : wstr_name :
                   wstr_hnum : wstr_prequ : wstr_type :
                   wstr_postD : wstr_postQ : wstr_apt :
                   wsubacct) resrec_1a;
             if %found(gam_res1a);
                if waction     = 'V';
                   wlastname   = 'Vacant Address';
                endif;

                if hmove_res   = 'Y' and
                       waction    <> 'V' and
                       hsubacct   <> *blanks;
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5740';
                   %subst(condition:1:8) = 'parm-bad';
                elseif hmove_res   = 'N' and
                       waction     = 'V' and
                       hsubacct   <> *blanks;
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5744';
                   %subst(condition:1:8) = 'parm-bad';
                endif;
             else;
                if hmove_res  <> 'Y';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5745';
                   %subst(condition:1:8) = 'parm-bad';
                else;
                   if hsubacct    = '  ' or
                          hsubacct    = 'YY';
                      trnsfr_new  = #TRUE;
                   elseif hsubacct    = 'XX';
                      trnsfr_sub  = #TRUE;
                   endif;
                endif;
             endif;

             //   If the sub account is blanks, then we need to show the user the
             //   <SELECT> of options at this address
             if (hsubacct   = *blanks or
                     condition <> *blanks) and
                    trnsfr_new <> #TRUE and
                    trnsfr_sub <> #TRUE;
                setll (hfice : wstr_dir : wstr_name :
                      wstr_hnum : wstr_prequ : wstr_type :
                      wstr_postD : wstr_postQ : wstr_apt)
                       resrec_1a;
                if NOT %equal(gam_res1a);
                   //                   add       1             ei
                   //                   movel     '#5741'       errs(ei)
                   //                   movel     'parm-bad'    condition
                   leavesr;
                endif;

                //  no errors have a valid address key, now display the list of names
                //  for where to move the old address too
                have_suba   = 'Y';
                zn2         = 0;

                *in90       = *off;
                dow *in90 <> *on;
                   reade(n) (hfice : wstr_dir : wstr_name :
                         wstr_hnum : wstr_prequ : wstr_type :
                         wstr_postD : wstr_postQ : wstr_apt)
                          resrec_1a;
                   *in95 = %eof;
                   if *in95;
                      leave;
                   endif;
                   zn2         = zn2 + 1;
                   if wsubacct    = *blanks;
                      wsubacct    = '00';
                   endif;
                   if waction     = 'V';
                      wlastname   = 'Vacant Address';
                   endif;
                   if wlastname   = *blanks;
                      wlastname   = 'Current Resident';
                   endif;

                   if wfrstname   = *blanks;
                      ar_sbnm(zn2)= wsubacct +
                                        %trim(wlastname);
                   else;
                      ar_sbnm(zn2)= wsubacct +
                                        %trim(wlastname) +
                                        ', ' + %trim(wfrstname);
                   endif;
                enddo;

                //   Always have option to move to new sub account
                zn2         = zn2 + 1;
                ar_sbnm(zn2)= 'XX' +
                                  'Create New Sub Account';
                leavesr;
             endif;
          else;
             ei += 1;
             %subst(errs(ei):1:5) = '#5742';
             %subst(condition:1:8) = 'parm-bad';
             leavesr;
          endif;


       endsr;

       // *********************************************************************
       //     PP_trfedt2:   Panel Processing to Transfer a Residence from the
       //                   DELETED RES2 file back to Live RES1
       //
       //     The Tansfer Screen has 3 iterations
       //     Iteration 0 - Address is input - Validate Address
       //     Iteration 1 - Address does NOT exists - Create it
       //                   Address does     exists - Show List, with New Sub
       //     Iteration 2 - Locked in to address down to sub account level
       // *********************************************************************
       begsr PP_trfedt2;

          clear condition;
          clear trnsfr_new;
          clear trnsfr_sub;

          //     Ensure whether they selected to move the resident or not
          if hmove_res   = ' ';
             ei += 1;
             %subst(errs(ei):1:5) = '#5743';
             %subst(condition:1:8) = 'parm-bad';
             leavesr;
          endif;

          //     TO Address must Validate and Exists in RES1 or cannot continue
          if hnew_addr1 <> *blanks;
             clear #AV_dqin;
             clear #AV_dqout;
             #AV_func = 'AV';
             #AV_case    = 'U';
             #AV_adrl    = '35';

             #AV_adr1    = hnew_addr1;
             #AV_city    = icity;
             #AV_stat    = istate;
             #AV_zipc    = '';
             #AV_zip4    = '';

             exsr $get_AV;

             //   Set error that address is not in postal system
             if #AV_status  = 'E';
                condition   = 'INV ADDRES';
                ei += 1;
                errs(ei)    = 'Invalid New Address:<br>' +
                                  #AV_emsg_o;
                leavesr;
             endif;

             //   New Address is valid - check if Address exists in GAM_RES1A
             wstr_dir    = #av_prdr_o;
             wstr_name   = #av_stnm_o;
             wstr_hnum = #av_stno_o;
             wstr_prequ  = ' ';
             wstr_type   = #av_stsf_o;
             wstr_postD  = #av_psdr_o;
             wstr_postQ  = #av_satp_o;
             wstr_apt    = #av_sano_o;
             wsubacct    = hsubacct;
             if wsubacct    = '00';
                clear wsubacct;
             endif;
             hnew_addr1  = #av_adr2_o;

             if not %open(gam_res1a);
                open gam_res1a;
             endif;

             //   Always CHAIN to the Resident File with the Address and SubAccount
             //   If the address exists, it better be Vacant.
             //   address MUST NOT be "VACANT", if they are only moving VEHs/PETs
             //   'XX' means create new Sub Accnt - skip exist check (it doesnt)
             chain(n) (hfice : wstr_dir : wstr_name :
                   wstr_hnum : wstr_prequ : wstr_type :
                   wstr_postD : wstr_postQ : wstr_apt :
                   wsubacct) resrec_1a;
             if %found(gam_res1a);
                if waction     = 'V';
                   wlastname   = 'Vacant Address';
                endif;

                if hmove_res   = 'Y' and
                       waction    <> 'V' and
                       hsubacct   <> *blanks;
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5740';
                   %subst(condition:1:8) = 'parm-bad';
                elseif hmove_res   = 'N' and
                       waction     = 'V' and
                       hsubacct   <> *blanks;
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5744';
                   %subst(condition:1:8) = 'parm-bad';
                endif;
             else;
                if hmove_res  <> 'Y';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5745';
                   %subst(condition:1:8) = 'parm-bad';
                else;
                   if hsubacct    = '  ' or
                          hsubacct    = 'YY';
                      trnsfr_new  = #TRUE;
                   elseif hsubacct    = 'XX';
                      trnsfr_sub  = #TRUE;
                   endif;
                endif;
             endif;

             //   If the sub account is blanks, then we need to show the user the
             //   <SELECT> of options at this address
             if (hsubacct   = *blanks or
                     condition <> *blanks) and
                    trnsfr_new <> #TRUE and
                    trnsfr_sub <> #TRUE;
                setll (hfice : wstr_dir : wstr_name :
                      wstr_hnum : wstr_prequ : wstr_type :
                      wstr_postD : wstr_postQ : wstr_apt)
                       resrec_1a;
                if NOT %equal(gam_res1a);
                   //                   add       1             ei
                   //                   movel     '#5741'       errs(ei)
                   //                   movel     'parm-bad'    condition
                   leavesr;
                endif;

                //  no errors have a valid address key, now display the list of names
                //  for where to move the old address too
                have_suba   = 'Y';
                zn2         = 0;

                *in90       = *off;
                dow *in90 <> *on;
                   reade(n) (hfice : wstr_dir : wstr_name :
                         wstr_hnum : wstr_prequ : wstr_type :
                         wstr_postD : wstr_postQ : wstr_apt)
                          resrec_1a;
                   *in95 = %eof;
                   if *in95;
                      leave;
                   endif;
                   zn2         = zn2 + 1;
                   if wsubacct    = *blanks;
                      wsubacct    = '00';
                   endif;
                   if waction     = 'V';
                      wlastname   = 'Vacant Address';
                   endif;

                   if wfrstname   = *blanks;
                      ar_sbnm(zn2)= wsubacct +
                                        %trim(wlastname);
                   else;
                      ar_sbnm(zn2)= wsubacct +
                                        %trim(wlastname) +
                                        ', ' + %trim(wfrstname);
                   endif;
                enddo;

                //   Always have option to move to new sub account
                zn2         = zn2 + 1;
                ar_sbnm(zn2)= 'XX' +
                                  'Create New Sub Account';
                leavesr;
             endif;
          else;
             ei += 1;
             %subst(errs(ei):1:5) = '#5742';
             %subst(condition:1:8) = 'parm-bad';
             leavesr;
          endif;


       // Ensure whether they selected to move the resident or not
       if condition = *blanks and hmove_res = 'N' and
                                  hsubacct <> *blanks;
          if not %open(gam_veh2i);
             open gam_veh2i;
          endif;
          instance# = %dec(%trim(h_key):11:0);
          setll (hfice:instance#) vehrec_2i;
          dow %equal(gam_veh2i);
              reade (hfice:instance#) vehrec_2i;
              if %eof(gam_veh2i);
                 leave;
              endif;

              pk_3p0    = %lookup(vsequence:har_veh);
              if pk_3p0 > 0;            // Check if plate exists at new location
                 if not %open(gam_veh1i);
                    open gam_veh1i;
                 endif;
                 chain (wfice:winstance#:vvehplate:vvehpliss) vehrec_1i;
                 if %found(gam_veh1i);
                    ei += 1;
                    errs(ei)  = 'License Plate ' + %trim(vvehplate) +
                                ' already exists at destination address.';
                    condition = 'parm-bad';
                 endif;
              endif;
          enddo;
       endif;

       endsr;

       // *********************************************************************
       //     PP_trnsfr:   Routine to Transfer Res/Veh/Pet to New Address
       // *********************************************************************
       begsr PP_trnsfr;

          user_id8 = h_key;
          clear sav_resds;

          //   If this is due to a mail return, flag the userid

          byte10      = huserid;
          if hmailtype   = 'M';
             %subst(byte10:1:1) = '$';
          endif;

          //   If the HMOVE_RES = "Y", then Resident is moving to new address,
          //   The Current Resident is going to be marked as "V"acant
          //   all Vehicles/Pets/SUBs deleted and given a new USERID/PIN
          if not %open(gam_res1u);
             open gam_res1u;
          endif;

          chain(n) (hfice : user_id8) resrec_1u;
          if not %found(gam_res1u);
             leavesr;
          endif;

          //   Call GA_TRNSFR program with the Resident Instance to New Sub-Acct
          if hmove_res   = 'Y';
             //   IF the WSUBACCT = 'XX', then this says we are to create a new
             //   sub account from the W address fields(These were AVed in the
             //   PP_TRFEDT routine)
             if wsubacct    = 'XX';
                function    = 'MOVRES2SUB';
                fr_fice     = rfice;
                fr_instnc#  = rinstance#;
                to_instnc#  = 0;
                to_fice     = rfice;
                to_dir      = wstr_dir;
                to_name     = wstr_name;
                to_hnum     = wstr_hnum;
                to_prequ    = wstr_prequ;
                to_type     = wstr_type;
                to_postd    = wstr_postD;
                to_postq    = wstr_postQ;
                to_apt      = wstr_apt;
                clear to_sacct;
                clear rc;
                //   IF the WSUBACCT = 'YY', then this says we are to create a new
                //   Resident Address from the W address fields(These were AVed in the
                //   PP_TRFEDT routine)
             elseif wsubacct    = 'YY';
                function    = 'MOVRES2NEW';
                fr_fice     = rfice;
                fr_instnc#  = rinstance#;
                to_instnc#  = 0;
                to_fice     = rfice;
                to_dir      = wstr_dir;
                to_name     = wstr_name;
                to_hnum     = wstr_hnum;
                to_prequ    = wstr_prequ;
                to_type     = wstr_type;
                to_postd    = wstr_postD;
                to_postq    = wstr_postQ;
                to_apt      = wstr_apt;
                clear to_sacct;
                to_city     = icity;
                to_state    = istate;
                clear rc;
             else;
                function    = 'MOVERES';
                fr_fice     = rfice;
                fr_instnc#  = rinstance#;
                to_fice     = rfice;
                to_instnc#  = winstance#;
                clear rc;
             endif;

             ga_trnsfr(function : parms_fr : parms_to :
                   byte10 : rc);
          endif;

          //   setll on GAM_VEH1 and call GA_TRNSFR to move the selected
          //   vehicles found in the HAR_VEH array, to the new Address
          //   IF HMOVE_RES = "Y", then delete the ones NOT found in HAR_VEH
          if not %open(gam_veh1);
             open gam_veh1;
          endif;

          setll (hfice : rstr_dir : rstr_name :
                rstr_hnum : rstr_prequ : rstr_type :
                rstr_postD : rstr_postQ : rstr_apt :
                rsubacct) ga_vehrec;
          *in90 = not %found;
          dow *in90 <> *on;
             reade(n) (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct) ga_vehrec;
             *in95 = %eof;
             if *in95;
                leave;
             endif;

             pk_3p0      = %lookup(vsequence:har_veh);
             if pk_3p0      = 0;
                if hmove_res   = 'Y';
                   function    = 'DELONEVEH';
                   fr_fice     = vfice;
                   fr_instnc#  = vsequence;
                   clear rc;

                   ga_trnsfr(function : parms_fr : parms_to :
                         byte10 : rc);
                endif;
             else;
                function    = 'MOVEONEVEH';
                fr_fice     = vfice;
                fr_instnc#  = vsequence;
                if hmove_res  <> 'Y';
                   to_fice     = vfice;
                   to_instnc#  = winstance#;
                endif;
                clear rc;

                ga_trnsfr(function : parms_fr : parms_to :
                      byte10 : rc);
             endif;
          enddo;

          //   setll on GAM_PET1 and call GA_TRNSFR to move the selected
          //   pets found in the HAR_PET array, to the new Address
          //   IF HMOVE_RES = "Y", then delete the ones NOT found in HAR_PET
          if not %open(gam_pet1);
             open gam_pet1;
          endif;

          setll (hfice : rstr_dir : rstr_name :
                rstr_hnum : rstr_prequ : rstr_type :
                rstr_postD : rstr_postQ : rstr_apt :
                rsubacct) ga_petrec;
          *in90 = not %found;
          dow *in90 <> *on;
             reade(n) (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct) ga_petrec;
             *in95 = %eof;
             if *in95;
                leave;
             endif;

             pk_3p0      = %lookup(psequence:har_pet);
             if pk_3p0      = 0;
                if hmove_res   = 'Y';
                   function    = 'DELONEPET';
                   fr_fice     = pfice;
                   fr_instnc#  = psequence;
                   clear rc;

                   ga_trnsfr(function : parms_fr : parms_to :
                         byte10 : rc);
                endif;
             else;
                function    = 'MOVEONEPET';
                fr_fice     = pfice;
                fr_instnc#  = psequence;
                if hmove_res  <> 'Y';
                   to_fice     = pfice;
                   to_instnc#  = winstance#;
                endif;
                clear rc;

                ga_trnsfr(function : parms_fr : parms_to :
                      byte10 : rc);
             endif;
          enddo;


          //        If we moved a base account we want to call reshuffle

          if hmove_res   = 'Y' and
                 rsubacct    = '  ';
             clear parms_fr;
             fr_instnc#  = 0;
             clear parms_to;
             to_instnc#  = 0;
             clear rc;

             function    = 'RESHUFFLE';
             fr_fice     = rfice;
             fr_dir      = rstr_dir;
             fr_name     = rstr_name;
             fr_hnum     = rstr_hnum;
             fr_prequ    = rstr_prequ;
             fr_type     = rstr_type;
             fr_postd    = rstr_postD;
             fr_postq    = rstr_postQ;
             fr_apt      = rstr_apt;

             ga_trnsfr(function : parms_fr : parms_to :
                   byte10 : rc);
          endif;

       endsr;

       // *********************************************************************
       //     PP_trnsfr2:  Routine to Transfer Res/Veh/Pet from DELETED
       //                  RES2 DB back to production RES1 DB
       // *********************************************************************
       begsr PP_trnsfr2;

          instance#   =  %dec(%trim(h_key):11:0);
          clear sav_resds;

          //                   IF        not %OPEN(gam_res1u)
          //                   open      gam_res1u
          //                   ENDIF
          //     ficusr_key    chain(n)  resrec_1u
          //                   IF        not %FOUND(gam_res1u)
          //                   goto      e_trnsfr2
          //                   ENDIF
          //   If the HMOVE_RES = "Y", then Resident is moving to new address,
          //   The Current Resident 2 record is going to be deleted,
          //   all Vehicles/Pets/SUBs deleted and given a new USERID/PIN

          if not %open(gam_res2);
             open gam_res2;
          endif;

          chain (hfice : instance#) resrec_2;
          if not %found(gam_res2);
             leavesr;
          endif;

          //   Call GA_TRNSFR program with the Resident Instance to New Sub-Acct
          if hmove_res   = 'Y';
             //   IF the WSUBACCT = 'XX', then this says we are to create a new
             //   sub account from the W address fields(These were AVed in the
             //   PP_TRFEDT routine)
             if wsubacct    = 'XX';
                function    = 'RSTRES2SUB';
                fr_fice     = rfice;
                fr_instnc#  = rinstance#;
                to_instnc#  = 0;
                to_fice     = rfice;
                to_dir      = wstr_dir;
                to_name     = wstr_name;
                to_hnum     = wstr_hnum;
                to_prequ    = wstr_prequ;
                to_type     = wstr_type;
                to_postd    = wstr_postD;
                to_postq    = wstr_postQ;
                to_apt      = wstr_apt;
                clear to_sacct;
                clear rc;
                //   IF the WSUBACCT = 'YY', then this says we are to create a new
                //   Resident Address from the W address fields(These were AVed in the
                //   PP_TRFEDT routine)
             elseif wsubacct    = 'YY';
                function    = 'RSTRES2NEW';
                fr_fice     = rfice;
                fr_instnc#  = rinstance#;
                to_instnc#  = 0;
                to_fice     = rfice;
                to_dir      = wstr_dir;
                to_name     = wstr_name;
                to_hnum     = wstr_hnum;
                to_prequ    = wstr_prequ;
                to_type     = wstr_type;
                to_postd    = wstr_postD;
                to_postq    = wstr_postQ;
                to_apt      = wstr_apt;
                clear to_sacct;
                to_city     = icity;
                to_state    = istate;
                clear rc;
             else;
                function    = 'RESTORERES';
                fr_fice     = rfice;
                fr_instnc#  = rinstance#;
                to_fice     = rfice;
                to_instnc#  = winstance#;
                clear rc;
             endif;

             ga_trnsfr(function : parms_fr : parms_to :
                   huserid : rc);
          endif;

          //   setll on GAM_VEH2I and call GA_TRNSFR to move the selected
          //   vehicles found in the HAR_VEH array, to the new Address
          //   NEVER DELETE A VEHICLE FROM GAM_VEH2
          if not %open(gam_veh2i);
             open gam_veh2i;
          endif;

          setll (hfice : instance#) vehrec_2i;
          *in90 = not %found;
          dow *in90 <> *on;
             reade (hfice : instance#) vehrec_2i;
             *in95 = %eof;
             if *in95;
                leave;
             endif;

             pk_3p0      = %lookup(vsequence:har_veh);
             if pk_3p0      > 0;
                function    = 'RSTONEVEH';
                fr_fice     = vfice;
                fr_instnc#  = vsequence;
                if hmove_res  <> 'Y';
                   to_fice     = vfice;
                   to_instnc#  = winstance#;
                endif;
                clear rc;

                ga_trnsfr(function : parms_fr : parms_to :
                      huserid : rc);
             endif;
          enddo;

          //   setll on GAM_PET2I and call GA_TRNSFR to move the selected
          //   pets found in the HAR_PET array, to the new Address
          //   NEVER DELETE A PET FROM GAM_PET2I
          if not %open(gam_pet2i);
             open gam_pet2i;
          endif;

          setll (hfice : instance#) petrec_2i;
          *in90 = not %found;
          dow *in90 <> *on;
             reade (hfice : instance#) petrec_2i;
             *in95 = %eof;
             if *in95;
                leave;
             endif;

             pk_3p0      = %lookup(psequence:har_pet);
             if pk_3p0      > 0;
                function    = 'RSTONEPET';
                fr_fice     = pfice;
                fr_instnc#  = psequence;
                if hmove_res  <> 'Y';
                   to_fice     = pfice;
                   to_instnc#  = winstance#;
                endif;
                clear rc;

                ga_trnsfr(function : parms_fr : parms_to :
                      huserid : rc);
             endif;
          enddo;

          //        If we moved a base account we want to call reshuffle

          if hmove_res   = 'Y' and
                 rsubacct    = '  ';
             clear parms_fr;
             fr_instnc#  = 0;
             clear parms_to;
             to_instnc#  = 0;
             clear rc;

             function    = 'RESHUFFLE';
             fr_fice     = rfice;
             fr_dir      = rstr_dir;
             fr_name     = rstr_name;
             fr_hnum     = rstr_hnum;
             fr_prequ    = rstr_prequ;
             fr_type     = rstr_type;
             fr_postd    = rstr_postD;
             fr_postq    = rstr_postQ;
             fr_apt      = rstr_apt;

             ga_trnsfr(function : parms_fr : parms_to :
                   byte10 : rc);
          endif;

       endsr;

       // *********************************************************************
       //     PP_vehadd     Panel Processing to Add a New Vehicle
       // *********************************************************************
       begsr PP_vehadd;

          //   Retrieve the resident record by userid
          exsr get_resu;

          if not %open(gam_veh1);
             open gam_veh1;
          endif;

          //   Add the new Vehicle, with unique sequence
          vfice = hfice;

          vsequence   = dtara_seq#('NEW');
          vinstance#  = rinstance#;

          //   class and prefix/suffix should always be set now that we
          //   have the plate editor

          vplate_pfx = hplate_pfx;
          vplate_sfx = hplate_sfx;
          if hveh_class  = *blanks;
             vvehclass = 'P';
          else;
             vvehclass = hveh_class;
          endif;

          vcategry = hcategry;
          vvehweight = hvehweight;
          vvehplate = hveh_plate;
          vvehpliss = hveh_pliss;
          vvehmake = hveh_make;
          %subst(vvehmodel:1:20) = hveh_model;
          vvehyear = hveh_year;
          vvehcolor = hveh_color;
          vvehbody = hveh_body;
          vvehvin = hveh_vin#;
          vvehprdcod = hveh_prdcd;
          vproduct = hproduct;

          if hveh_dlnum <> *blanks;
             vlicense = hveh_dlnum;
             //   Double check the 8th and 9th digits for year
             if %subst(hveh_dlnum:8:2) <= senior_yy;
                vvehsenior  = 'Y';
             else;
                clear vvehsenior;
             endif;
          else;
             clear vlicense;
             %subst(vvehsenior:1:1) = hvehsenior;
          endif;
          vvehactive = 'A';
          vvehaction = hvehaction;
          if hvehaction  = 'I';
             vvehstatus = 'I';
          else;
             vvehstatus = 'C';
          endif;

          clear vdmvstatus;
          vsource = 'ADA';

          vtel# = rtel#;
          vstr_dir = rstr_dir;
          vstr_name = rstr_name;
          vstr_hnum = rstr_hnum;
          vstr_prequ = rstr_prequ;
          vstr_type = rstr_type;
          vstr_postD = rstr_postD;
          vstr_postQ = rstr_postQ;
          vstr_apt = rstr_apt;
          vsubacct = rsubacct;

          vfrstname = hvfrstname;
          vmidlname = hvmidlname;
          vlastname = hvlastname;
          clear vsuffix;

          vchgdate    = cycle_date;
          vchgtime    = cycle_time;
          vchguser    = huserid;

          write ga_vehrec;

       endsr;

       // *********************************************************************
       //     PP_vehdel     Panel Processing to Delete a Vehicle
       //                 **This routine now toggles between Deleted and
       //                   Active
       // *********************************************************************
       begsr PP_vehdel;

          //   Retrieve the resident record by userid
          exsr get_resu;

          //   Retrieve the vehicle data by Raddress and license plate
          if not %open(gam_veh1);
             open gam_veh1;
          endif;

          chain (hfice : rstr_dir : rstr_name :
                rstr_hnum : rstr_prequ : rstr_type :
                rstr_postD : rstr_postQ : rstr_apt :
                rsubacct : h_kpliss : h_kplate)
                 ga_vehrec;

          //   First write this record into the GAM_VEH2 file, then delete it
          //   NO LONGER
          //   Simply update the Active status to 'D' = deleted
          if %found(gam_veh1);

             //                   if        not %OPEN(gam_veh2)
             //                   open      gam_veh2
             //                   endif
             //                   eval      dfice       = vfice
             //                   eval      dsequence   = dtara_seq#('DEL')
             //                   eval      dvehclass   = vvehclass
             //                   eval      dvehweight  = vvehweight
             //                   eval      dvehplate   = vvehplate
             //                   eval      dvehpliss   = vvehpliss
             //                   eval      dvehmake    = vvehmake
             //                   eval      dvehmodel   = vvehmodel
             //                   eval      dvehyear    = vvehyear
             //                   eval      dvehcolor   = vvehcolor
             //                   eval      dvehbody    = vvehbody
             //                   eval      dvehstickr  = vvehstickr
             //                   eval      dvehvin     = vvehvin
             //                   eval      dvehregexp  = vvehregexp
             //                   eval      dlastordr#  = vlastordr#
             //                   eval      droot_ord#  = vroot_ord#
             //                   eval      dvehlicexp  = vvehlicexp
             //                   eval      dmailerid   = vvehlicexp
             //                   eval      dvehprdcod  = vvehprdcod
             //                   eval      dvehstatus  = vvehstatus
             //                   eval      dvehactive  = vvehactive
             //                   eval      dvehsenior  = vvehsenior
             //                   eval      dlicense    = vlicense
             //                   eval      ddmvstatus  = vdmvstatus
             //                   eval      dstr_dir    = vstr_dir
             //                   eval      dstr_name   = vstr_name
             //                   eval      dstr_hnum   = vstr_hnum
             //                   eval      dstr_prequ  = vstr_prequ
             //                   eval      dstr_type   = vstr_type
             //                   eval      dstr_postD  = vstr_postD
             //                   eval      dstr_postQ  = vstr_postQ
             //                   eval      dstr_apt    = vstr_apt
             //                   eval      dsubacct    = vsubacct
             //                   eval      dusrtype    = vusrtype
             //                   eval      dfrstname   = vfrstname
             //                   eval      dmidlname   = vmidlname
             //                   eval      dlastname   = vlastname
             //                   eval      dsuffix     = vsuffix
             //                   eval      dchgdate    = cycle_date
             //                   eval      dchgtime    = cycle_time
             //                   eval      dchguser    = huserid
             //                   write     ga_delveh
             //                   delete    ga_vehrec

             if vvehactive  = 'D';
                vvehstatus  = 'C';
                vvehactive  = 'A';
             else;
                vvehactive  = 'D';
                vvehstatus  = 'D';
             endif;

             vchgdate    = cycle_date;
             vchgtime    = cycle_time;
             vchguser    = huserid;

             update ga_vehrec;
          endif;

       endsr;

       // *********************************************************************
       //     PP_vehedt     Panel Processing to Edit a New Vehicle
       // *********************************************************************
       begsr PP_vehedt;

          clear condition;

          //   Before checking, squeeze all embedded blanks out of
          //   the license plate

          if condition   = *blanks;
     c*    top_sqz2      tag
             //i1          = %scan(' ':hveh_plate);
             //if i1 > 0 and
             //       i1 < %len(%trim(hveh_plate));
                //hveh_plate =
                //    %subst(hveh_plate:1:i1-1) +
                //    %subst(hveh_plate:i1+1);
     c*                  goto      top_sqz2
             //endif;

             i1 = %scan(' ':hveh_plate);
             dow i1 > 0 and
                     i1 < %len(%trim(hveh_plate));
                hveh_plate =
                    %subst(hveh_plate:1:i1-1) +
                    %subst(hveh_plate:i1+1);
                i1 = %scan(' ':hveh_plate);
             enddo;

             //     Check license plate for valid chars: letters, numbers, '-' only

             if hveh_plate  = *blanks;
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5791';
             else;
                byte10 = %xlate(xuc:blnk26:hveh_plate);
                byte10 = %xlate(xdig:blnk10:byte10);
                byte10 = %xlate('-':' ':byte10);
                //  12/29/08 MRB A "#" is now allowed as the first plate character
                //               to signal a temporary plate
                if '#' = %subst(byte10:1:1);
                   %subst(byte10:1:1) = ' ';
                endif;

                if byte10     <> *blanks;
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5791';
                endif;
             endif;

             //     Check State of Issue has been selected

             if hveh_pliss  = *blanks;
                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5795';
             endif;

             //     If the license plate does not equal the key license plate
             //     Check that this new license plate does not already exist

             if hveh_pliss <> h_kpliss or
                    hveh_plate <> h_kplate;

                //     Retrieve the resident record by userid
                exsr get_resu;

                if not %open(gam_veh1);
                   open gam_veh1;
                endif;

                //   If Found we have error cause this plate number already exists
                //   in this address
                chain(n) (hfice : rstr_dir : rstr_name :
                      rstr_hnum : rstr_prequ : rstr_type :
                      rstr_postD : rstr_postQ : rstr_apt :
                      rsubacct : hveh_pliss : hveh_plate)
                       ga_vehrec;
                if %found(gam_veh1);
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5796';
                endif;

                //   05/08/09 MRB Added check to send e-mail if this new plate
                //                exists at another address

                if hfice      <> 'V60201' and
                       condition   = *blanks;
                   if not %open(gam_veh1p);
                      open gam_veh1p;
                   endif;
                   setll (hfice : hveh_pliss : hveh_plate)
                          vehrec_1p;
                   reade (hfice : hveh_pliss : hveh_plate)
                          vehrec_1p;

                   //   If found, we have a duplicate license plate, send e-mail
                   if not %eof(gam_veh1p);

       onlydst    = 'LAK';
       msgtext    = hfice + eml_break +
                    'Duplicate Plate: ' + hveh_plate + eml_break +
                    'User ID: ' + h_key + eml_break +
                    ' User: ' + huserid;
       exsr eml_error;

                   endif;
                endif;
             endif;

             //     If Present, check the car year for all numeric

             if hveh_year  <> *blanks;
                byte4 = %xlate(xdig:blnk10:hveh_year);
                if byte4      <> *blanks  OR
                       %len(%trim(hveh_year)) <> 4;
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5792';
                else;
                   pk_5p0 = %dec(%subst(%editc(pk_5p0:'X'):1:1)
                         + %xlate(' ':'0':
                           hveh_year) :5:0);
                   if pk_5p0      < 1900 or
                          pk_5p0      > (date8yyyy + 1);
                      %subst(condition:1:8) = 'parm-bad';
                      ei += 1;
                      %subst(errs(ei):1:5) = '#5793';
                   endif;
                endif;
             endif;

             //   If drivers license number was entered, make sure we dont already
             //   have this drivers license number, and that they are qualified
             //   for the senior discount.  Otherwise clear and dont store it.

             //   Calculate the year that allows for senior discount
             //   for lake forest the age is 65 - this needs to go to master rec
             //   for 2007, we used 42, 2008, 43

             $date = cycle_dt_a;
             $value      = 65;
             $unit       = 'Y';
             $result = dateminus($date:$value:$unit);
             byte4 = $result;
             evalr senior_yy = byte4;

             if hveh_dlnum <> *blanks and
                    hveh_dlnum <> hold_dlnum;

                hveh_dlnum = %xlate('-':' ':hveh_dlnum);
                hveh_dlnum = %xlate('.':' ':hveh_dlnum);
     c*    top_sqz3      tag
                //i1 = %scan(' ':hveh_dlnum);
                //if i1 > 0 and
                //   i1 < %len(%trim(hveh_dlnum));
                //   hveh_dlnum =
                //       %subst(hveh_dlnum:1:i1-1) +
                //       %subst(hveh_dlnum:i1+1);
     c*                  goto      top_sqz3
                //endif;

           i1 = %scan(' ':hveh_dlnum);
           dow (i1 > 0 and
                  i1 < %len(%trim(hveh_dlnum)));
               hveh_dlnum = %subst(hveh_dlnum:1:i1-1) +
                            %subst(hveh_dlnum:i1+1);
               i1 = %scan(' ':hveh_dlnum);
           enddo;

                if not %open(gam_veh1l);
                   open gam_veh1l;
                endif;

                //   If Found we have error cause residents not allowed to use the
                //   same drivers license number for more than 1 vehicle
                setll (hfice : hveh_dlnum) vehrec_1l;
                if %equal(gam_veh1l);
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5797';

                   //   Show admin users the other license plate
                   //   that is using this drivers license number

                   reade (hfice : hveh_dlnum) vehrec_1l;
                   ei += 1;
                   errs(ei) = 'License Plate +
                           using this Driver''s License +
                           number is: ' +
                           %trim(dvehplate) + '<br>';
                endif;


                //   If digits 8-9, are not < senior_yy, then they do not qualify
                //   for the Senior Discount
                if %len(%trim(hveh_dlnum)) < 9 or
                       %subst(hveh_dlnum:8:2)  > senior_yy;
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5798';
                endif;

                //   Seniors not ALLOWED to get Discount on a "M"otorcycle
                if hveh_body  =  'MOPED'     or
                       hveh_body  =  'MOTORCYCL' or
                       hveh_body  =  'MTR SCOOT';
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5799';
                endif;

                //   Do not allow to remove license number if permit was ordered as
                //   senior discount

             elseif hveh_dlnum  = *blanks and
                    hold_dlnum <> *blanks and
                    hlastordr# <> *blanks;
                hveh_dlnum  = hold_dlnum;

                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5800';
             endif;

             //   Make sure that the code in the Special Vehicle field has an
             //   option record associated with it

             if hveh_prdcd <> *blanks;
                //   Check option record to make sure it exists


                if NOT %open(gaoption1);
                   open gaoption1;
                endif;
                the_recid   = 'VE';
                the_value   = hveh_prdcd;
                chain (hfice : h_applid : the_recid : husrtype :
                      the_value) ga_parms;
                //     key_parmsf    klist
                //                   kfld                    hfice
                //                   kfld                    h_applid
                //                   kfld                    the_recid
                //                   kfld                    husrtype
                //                   kfld                    the_value
                if not %found;
                   %subst(condition:1:8) = 'parm-bad';
                   ei += 1;
                   %subst(errs(ei):1:5) = '#5788';
                endif;
             endif;


             //   Then run the license plate against the editor

             clear hcategry;
             clear hvehweight;
             clear hproduct;

             ga_lplate(hveh_pliss : hveh_plate :
                   hplate_pfx : hplate_mid : hplate_sfx :
                   tmp_class : hcategry : hvehweight :
                   hfice : hproduct);
             //          vehclass is web input-do we remove this or do we compare
             //          and make sure our results match what the user entered?

             //    Check if the plate was found to be in a valid format

             if '?' = %subst(hplate_pfx:1:1);
                //    make error only if user is adding the vehicle for now
                //    12/11/08 MRB Turned this off to allow input of temp plates
                //    12/29/08 MRB Turned MSG back on since program handles temp plates
                //    02/24/09 MRB Turned this on for both ADD and UPD

                %subst(condition:1:8) = 'parm-bad';
                ei += 1;
                %subst(errs(ei):1:5) = '#5789';

                //    error that class chosen does not match class we have
                //     - In either case always user user chose class
                //     - It is not an error if this is a temp plate
             elseif tmp_class  <> hveh_class and
                    hveh_class <> *blanks and
                    hplate_pfx <> '#';
                //   Send msg to mark that this was an error
                //   as of 2/24/09 MRB thinking that we do not want to show error
                //                     or warning because this almost never happens

       // 7/7/17 HAD Comment requested by MRB
       //

       //onlydst    = 'MRB';
       //msgtext    = hfice + eml_break +
       //             'Classes Do not Match: ' + hveh_plate;
       //exsr eml_error;

             elseif hveh_class  = *blanks;
                //   If user did not enter a class, use the class from plate editor
                hveh_class  = tmp_class;
             endif;

             //   Check if this vehicle is allowed to be registered by checking
             //   it against a field of excluded categories

             if 0 < %scan(hcategry:gexc_vcats);

                //   Vehicle is not required to be registered in city

                %subst(condition:1:8) = 'excl-cat';
                ei += 1;
                %subst(errs(ei):1:7) = '#5787Sv';
             endif;

          endif;

       endsr;

       // *********************************************************************
       //     PP_vehupd     Panel Processing to Update a Vehicle
       // *********************************************************************
       begsr PP_vehupd;

          //   Retrieve the resident record by userid
          exsr get_resu;

          //   Retrieve the vehicle data by address and license plate
          if not %open(gam_veh1);
             open gam_veh1;
          endif;

          chain (hfice : rstr_dir : rstr_name :
                rstr_hnum : rstr_prequ : rstr_type :
                rstr_postD : rstr_postQ : rstr_apt :
                rsubacct : h_kpliss : h_kplate)
                 ga_vehrec;

          //   Found the Vehicle, Update with New Information from screen
          if %found(gam_veh1);

             //   Check if vehicle changed but vin did not, clear vin

             if hveh_make  <> vvehmake and
                    hveh_year  <> vvehyear and
                    hveh_vin#   = vvehvin;
                clear hveh_vin#;
             endif;

             //   class and prefix/suffix should always be set now that we
             //   have the plate editor

             vplate_pfx = hplate_pfx;
             vplate_sfx = hplate_sfx;
             if hveh_class  = *blanks;
                vvehclass = 'P';
             else;
                vvehclass = hveh_class;
             endif;

             vcategry = hcategry;
             vvehweight = hvehweight;
             vvehplate = hveh_plate;
             vvehpliss = hveh_pliss;
             vvehmake = hveh_make;
             %subst(vvehmodel:1:20) = hveh_model;
             vvehyear = hveh_year;
             vvehcolor = hveh_color;
             vvehbody = hveh_body;
             vvehvin = hveh_vin#;
             vvehprdcod = hveh_prdcd;
             //   Only set the product if vehicle is not registered
             if vlastordr#  = *blanks;
                vproduct = hproduct;
             endif;

             vvehaction = hvehaction;
             if hvehaction  = 'I';
                vvehstatus = 'I';
             endif;

             //   Update Senior data based on Drivers License - Do not update
             //   DL or Senior Data, when LASTORDR has been entered

             if hveh_dlnum <> *blanks;
                vlicense = hveh_dlnum;
                //   Double check the 8th and 9th digits for year
                if %subst(hveh_dlnum:8:2) <= senior_yy;
                   vvehsenior  = 'Y';
                else;
                   clear vvehsenior;
                endif;
             else;
                if vlastordr#  = *blanks;
                   clear vlicense;
                   %subst(vvehsenior:1:1) = hvehsenior;
                endif;
             endif;

             vtel# = rtel#;
             vsource = 'ADU';

             vfrstname = hvfrstname;
             vmidlname = hvmidlname;
             vlastname = hvlastname;

             vchgdate    = cycle_date;
             vchgtime    = cycle_time;
             vchguser    = huserid;

             update ga_vehrec;
          endif;

       endsr;

       // **************************************************************
       //    Row_MS_Pet:   Write the ROWS for Pet Maintenance
       // **************************************************************
       begsr Row_MS_Pet;

          //  TD-1 = Pet Name
          if hres2mode   = 'Y';
             td_cell1    = '<td>' +
                 %trim(pname) + '</td>';
          else;
             td_cell1    = '<td><a href="' +
                 'javascript:setsubmitNAM(''' +
                 %trim(ppettype) + ''',''' +
                 %trim(pname) + ''',''EDT''' +
                 ')">' + %trim(pname) + '</a></td>';
          endif;

          //  TD-2 = Pet Type
          clear byte3;
          if ppettype    = 'C';
             byte3       = 'CAT';
          elseif ppettype    = 'D';
             byte3       = 'DOG';
          endif;

          td_cell2    = '<td>&nbsp;' +
              %trim(byte3) + '</td>';

          //  TD-3 = Pet Color
          if ppetcolor   = *blanks or
                 ppetactive  = 'D';
             td_cell3    = '<td>' +
                 '&nbsp;</td>';
          else;
             td_cell3    = '<td>&nbsp;' +
                 %trim(ppetcolor) + '</td>';
          endif;

          //  TD-4 = Pet Breed
          if ppetbreed   = *blanks or
                 ppetactive  = 'D';
             td_cell4    = '<td>' +
                 '&nbsp;</td>';
          else;
             td_cell4    = '<td>&nbsp;' +
                 %trim(ppetbreed) + '</td>';
          endif;

          //  TD-5 = Pet Sex
          if psex        = *blanks or
                 ppetactive  = 'D';
             td_cell5    = '<td>' +
                 '&nbsp;</td>';
          else;
             td_cell5    = '<td>&nbsp;' +
                 %trim(psex) + '</td>';
          endif;

          //  TD-6 = Pet Rabies
          //                   IF        prabies     = *blanks or
          //                             ppetactive  = 'D'
          //                   eval      td_cell6    = '<td>' +
          //                             '&nbsp;</td>'
          //                   ELSE
          //                   eval      td_cell6    = '<td>&nbsp;' +
          //                             %subst(prabies:1:6) + '</td>'
          //                   ENDIF

          //  TD-7 = Order #
          if hres2mode   = 'Y';
             td_cell7    = '<td>&nbsp;</td>';
          else;
             td_cell7    = '<td>&nbsp;<a href="' +
                 'javascript:setsubmitORD(' +
                 'document.form1.ORDERNO,''' +
                 %trim(plastordr#) + ''')">' +
                 %trim(plastordr#) + '</a></td>';
          endif;


          //  TD-8 = Delete Button
          if hres2mode   = 'Y';
             td_cell8    = '<td>&nbsp;</td>';
          else;
             if ppetactive  = 'D';
                byte10      = 'Activate';
                byte3       = 'ACT';
             else;
                byte10      = 'Delete';
                byte3       = 'DEL';
             endif;
             td_cell8    = '<td align=center>' +
                               '<input type="button" ' +
                 'value="' + %trim(byte10) + '" ' +
                 'onClick="' + 'javascript:setsubmitNAM(''' +
                 %trim(ppettype) + ''',''' +
                 %trim(pname) + ''',''' + %trim(byte3) +
                 ''')"></td>';

             if ppetactive  = 'D';
                tr_cell1    = '<tr valign=top ' +
                                  'align=center ' +
                                  'bgcolor="#666666">';
             else;
                tr_cell1    = '<tr valign=top ' +
                                  'align=center>';
             endif;
          endif;


          //  Build the actual ROW - tr_cell1 + tdcell1 - 8
          row  = %trim(tr_cell1) +
                     %trim(td_cell1) +
                     %trim(td_cell2) +
                     %trim(td_cell3) +
                     %trim(td_cell4) +
                     %trim(td_cell5) +
          //                                    %trim(td_cell6) +
                     %trim(td_cell7) +
                     %trim(td_cell8) +
                     '</tr>' +
                     linefeed;

          // ---------------------------------------------------------------
          //     add the row to the buffer

          BufOut = %trimr(BufOut) + row;

          bytesize = bytesize +
              %len(%trimr(row)) + 1;
          exsr checkbufr;

       endsr;

       // **************************************************************
       //    Row_MS_Veh:   Write the ROWS for Vehicle Maintenance
       // **************************************************************
       begsr Row_MS_Veh;

          //  TD-1 = Vehicle Plate
          if hres2mode   = 'Y';
             td_cell1    = '<td bgcolor="#FFFFFF">' +
                 '(' + %trim(vvehpliss) + ') '+
                 %trim(vvehplate) + '</td>';
          else;
             td_cell1    = '<td bgcolor="#FFFFFF">' +
                 '<a href="' +
                 'javascript:setsubmitPLT(''' +
                 %trim(vvehpliss) + ''',''' +
                 %trim(vvehplate) + ''',''EDT''' +
                 ')">(' + %trim(vvehpliss) + ') '+
                 %trim(vvehplate) + '</a></td>';
          endif;

          //  TD-2 = Vehicle Year
          if vvehyear    = *blanks or
                 vvehactive  = 'D';
             td_cell2    = '<td>' +
                 '&nbsp;</td>';
          else;
             td_cell2    = '<td>&nbsp;' +
                 %trim(vvehyear) + '</td>';
          endif;

          //  TD-3 = Vehicle Make
          if vvehmake    = *blanks or
                 vvehactive  = 'D';
             td_cell3    = '<td>' +
                 '&nbsp;</td>';
          else;
             td_cell3    = '<td>&nbsp;' +
                 %trim(vvehmake) + '</td>';
          endif;

          //  TD-4 = Vehicle Model
          if vvehmodel   = *blanks or
                 vvehactive  = 'D';
             td_cell4    = '<td>' +
                 '&nbsp;</td>';
          else;
             td_cell4    = '<td>&nbsp;' +
                 %trim(vvehmodel) + '</td>';
          endif;

          //  TD-5 = Vehicle Color
          if vvehcolor   = *blanks or
                 vvehactive  = 'D';
             td_cell5    = '<td>' +
                 '&nbsp;</td>';
          else;
             td_cell5    = '<td>&nbsp;' +
                 %trim(vvehcolor) + '</td>';
          endif;

          //  TD-6 = Vehicle Body Type
          if vvehbody    = *blanks or
                 vvehactive  = 'D';
             td_cell6    = '<td>' +
                 '&nbsp;</td>';
          else;
             td_cell6    = '<td>&nbsp;' +
                 %trim(vvehbody) + '</td>';
          endif;

          //  TD-7 = Order #
          if hres2mode   = 'Y';
             td_cell7    = '<td>&nbsp;</td>';
          else;
             td_cell7    = '<td>&nbsp;<a href="' +
                 'javascript:setsubmitORD(' +
                 'document.form1.ORDERNO,''' +
                 %trim(vlastordr#) + ''')">' +
                 %trim(vlastordr#) + '</a></td>';
          endif;

          //  TD-8 = Delete Button
          if hres2mode   = 'Y';
             td_cell8    = '<td>&nbsp;</td>';
          else;
             if vvehactive  = 'D';
                byte10      = 'Activate';
                byte3       = 'ACT';
             else;
                byte10      = 'Delete';
                byte3       = 'DEL';
             endif;
             td_cell8    = '<td align=center>' +
                               '<input type="button" ' +
                 'value="' + %trim(byte10) + '" ' +
                 'onClick="' + 'javascript:setsubmitPLT(''' +
                 %trim(vvehpliss) + ''',''' +
                 %trim(vvehplate) + ''',''' + %trim(byte3) +
                 ''')"></td>';
          endif;

          //  Set row background color
          if vvehactive  = 'D';
             tr_cell1    = '<tr valign=top ' +
                               'align=center ' +
                               'bgcolor="#666666">';
          elseif vvehaction  = 'I';
             tr_cell1    = '<tr valign=top ' +
                               'align=center ' +
                               'bgcolor="#FF9922">';
          else;
             tr_cell1    = '<tr valign=top ' +
                               'align=center>';
          endif;


          //  Build the actual ROW - tr_cell1 + tdcell1 - 8
          row  = %trim(tr_cell1) +
                     %trim(td_cell1) +
                     %trim(td_cell2) +
                     %trim(td_cell3) +
                     %trim(td_cell4) +
                     %trim(td_cell5) +
                     %trim(td_cell6) +
                     %trim(td_cell7) +
                     %trim(td_cell8) +
                     '</tr>' +
                     linefeed;

          // ---------------------------------------------------------------
          //     add the row to the buffer

          BufOut = %trimr(BufOut) + row;

          bytesize = bytesize +
              %len(%trimr(row)) + 1;
          exsr checkbufr;

       endsr;

       // **************************************************************
       //    Row_MV_Pet:   Write the ROWS for Pet Maintenance - MOVE
       // **************************************************************
       begsr Row_MV_Pet;

          //  TD-1 = Checkbox
          byte3       = '000';
          byte3 = %editc(num_pets:'X');
          clear chk_text;
          if har_pet(num_pets) = psequence;
             chk_text    = ' CHECKED';
          endif;
          td_cell1    = '<td align=center>' +
              '<input type="checkbox" name="PCK_' +
              byte3 + '" value="' + %char(psequence) +
              '"' + %trimr(chk_text) + '></td>';

          //  TD 2 = Pet Name
          td_cell2    = '<td>&nbsp;' +
              %trim(pname) + '</td>';

          //  TD-3 = Pet Type
          clear byte3;
          if ppettype    = 'C';
             byte3       = 'CAT';
          elseif ppettype    = 'D';
             byte3       = 'DOG';
          endif;

          td_cell3    = '<td>&nbsp;' +
              %trim(byte3) + '</td>';

          //  TD-4 = Pet Color
          td_cell4    = '<td>&nbsp;' +
              %trim(ppetcolor) + '</td>';

          //  TD-5 = Pet Breed
          td_cell5    = '<td>&nbsp;' +
              %trim(ppetbreed) + '</td>';

          //  TD-6 = Pet Sex
          td_cell6    = '<td>&nbsp;' +
              %trim(psex) + '</td>';

          tr_cell1    = '<tr valign=top>';

          //  Build the actual ROW - tr_cell1 + tdcell1 - 6
          row  = %trim(tr_cell1) +
                     %trim(td_cell1) +
                     %trim(td_cell2) +
                     %trim(td_cell3) +
                     %trim(td_cell4) +
                     %trim(td_cell5) +
                     %trim(td_cell6) +
                     '</tr>' +
                     linefeed;

          // ---------------------------------------------------------------
          //     add the row to the buffer

          BufOut = %trimr(BufOut) + row;

          bytesize = bytesize +
              %len(%trimr(row)) + 1;
          exsr checkbufr;

       endsr;

       // **************************************************************
       //    Row_MV_Veh:   Write the ROWS for Vehicle Maintenance - MOVE
       // **************************************************************
       begsr Row_MV_Veh;

          //  TD-1 = Checkbox
          byte3       = '000';
          byte3 = %editc(num_vehs:'X');
          clear chk_text;
          if har_veh(num_vehs) = vsequence;
             chk_text    = ' CHECKED';
          endif;
          td_cell1    = '<td align=center>' +
              '<input type="checkbox" name="VCK_' +
              byte3 + '" value="' + %char(vsequence) +
              '"' + %trimr(chk_text) + '></td>';

          //  TD-2 = Vehicle Plate
          td_cell2    = '<td>&nbsp;' +
              '(' + %trim(vvehpliss) + ') ' +
              %trim(vvehplate) + '</td>';

          //  TD-3 = Vehicle Year
          td_cell3    = '<td>&nbsp;' +
              %trim(vvehyear) + '</td>';

          //  TD-4 = Vehicle Make
          td_cell4    = '<td>&nbsp;' +
              %trim(vvehmake) + '</td>';

          //  TD-5 = Vehicle Model
          td_cell5    = '<td>&nbsp;' +
              %trim(vvehmodel) + '</td>';

          //  TD-6 = Vehicle Color
          td_cell6    = '<td>&nbsp;' +
              %trim(vvehcolor) + '</td>';

          tr_cell1    = '<tr valign=top>';

          //  Build the actual ROW - tr_cell1 + tdcell1 - 6
          row  = %trim(tr_cell1) +
                     %trim(td_cell1) +
                     %trim(td_cell2) +
                     %trim(td_cell3) +
                     %trim(td_cell4) +
                     %trim(td_cell5) +
                     %trim(td_cell6) +
                     '</tr>' +
                     linefeed;

          // ---------------------------------------------------------------
          //     add the row to the buffer

          BufOut = %trimr(BufOut) + row;

          bytesize = bytesize +
              %len(%trimr(row)) + 1;
          exsr checkbufr;

       endsr;

       // **************************************************************
       //    RTNFAIL:  Write the element_fl field out to the screen
       //                  because we are missing a case stmt in WRTPANEL
       //      This is a catch-all routine
       // **************************************************************
       begsr RtnFail;

          // ----Format a message in the buffer

          BufOut = %trimr(BufOut) + ' ' + '<br><br>';
          BufOut = %trimr(BufOut) + ' ' + 'No Routine';
          BufOut = %trimr(BufOut) + ' ' + element_fl;
          BufOut = %trimr(BufOut) + '<br><br>';
          BufOut = %trimr(BufOut) + linefeed;

          exsr sendbufr;

       endsr;

       // **************************************************************
       //    Rtn_3rdDsp:  Write the 3rd Party liust to the screen
       // **************************************************************
       begsr Rtn_3rdDsp;

          if NOT %open(ga_3rdpt1a);
             open ga_3rdpt1a;
          endif;

          setll hfice third_1a;
          if NOT %found(ga_3rdpt1a);
             leavesr;
          endif;

          dou %eof(ga_3rdpt1a);
             reade hfice third_1a;
             if %eof(ga_3rdpt1a);
                leave;
             endif;


          // Use data to create a table row
          byte10 = %xlate(' ':'*':bbilluser);
          BufOut = %trim(BufOut) +
                   '<tr><td style="vertical-align:bottom;">' +
                   '<a href="javascript:edit(''' +
                    %trim(bbilluser) + ''');">' + %trim(bbilluser) +
                    '</a><br />' +
                   '<div style="padding-top:30px;">+
                    <a href="javascript:newOrd3rdPty(''' +
                    byte10 + ''')";>+
                    Place Paid Order</a></div>' + linefeed;

          BufOut = %trim(BufOut) +
                   '</td><td>' + %trim(bcontact) + '<br />' +
                                 %trim(bcompany) + '<br />' +
                                 %trim(baddr1)   + '<br />' +
                                 %trim(bcity)    + ', ' +
                                 %trim(bstate)   + '  ' +
                                 %trim(bpostcd) + '<br />' +
                                 %trim(btel#) + '<br />' +
                                 %trim(bemail) +
                                 '</td></tr>' + linefeed;



       //    Update the buffer length (estimate)
             BufOutLn = %len(%trimr(BufOut));
             Bytesize = bytesize + bufoutln;

             //    Check buffer length
             exsr CheckBufr;

          enddo;


       endsr;

       // **************************************************************
       //    Rtn_3rdEdt:  Write the 3rd Party Receivable to be Edited
       // **************************************************************
       begsr Rtn_3rdEdt;

          //    Have a KEY - so chain to record to pre-fill data

          if h_key      <> *blanks;
             if NOT %open(GA_3RDPT1);
                open ga_3rdpt1;
             endif;
             ky_billusr = h_key;
             chain(n) (hfice : ky_billusr) thirdpty;
             hcontact = bcontact;
             hcompany = bcompany;
             haddr1 = baddr1;
             hcity = bcity;
             hstate = bstate;
             hpostcd = bpostcd;
             htel# = btel#;
             hemail = bemail;
          endif;


          for i = 1 To size_str;
             htmlstmt = html_3rd_E(i);

             //   Only display this line when adding a new record
             if html_1to8   = '((ADDN))';
                if h_key      <> *blanks;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;


             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;
          exsr sendbufr;

       endsr;

       // **************************************************************
       //    Rtn_Addr:      Write out Address info
       //                   Currently writes out of lake forest or not
       //                   Will eventually write NCOA info etc
       // **************************************************************
       begsr Rtn_Addr;

          clear byte400;

          //   If they are out of Lake Forest, say that
          if rin_out     = 'O';
             byte400     = '<center>' +
                 '**  This address is marked ' +
                 'out of ' +
                 %trim(yschname) +
                 '</center>';

             BufOut = %trimr(BufOut) + byte400;
             BufOut = %trimr(BufOut) + linefeed;
             bytesize    = bytesize +
                 %len(%trimr(byte400)) + 1;
             exsr CheckBufr;
          endif;

       endsr;

       // **************************************************************
       //    Rtn_ADRLst:    Write out list of Addresses with address key
       // **************************************************************
       begsr Rtn_ADRLst;

          //   Table Header
          html_msgs   = '5542         ';
          exsr do_a_msg2;

          if hres2mode   = 'Y';
             if NOT %open(gam_res2a);
                open gam_res2a;
             endif;
             setll (hfice : hstr_dir : hstr_name :
                   hstr_hnum : hstr_prequ : hstr_type :
                   hstr_postD : hstr_postQ : hstr_apt)
                    gam_res2a;

          else;
             //    Setll and read the list of residents with haddr_pkey
             if NOT %open(gam_res1a);
                open gam_res1a;
             endif;

             setll (hfice : hstr_dir : hstr_name :
                   hstr_hnum : hstr_prequ : hstr_type :
                   hstr_postD : hstr_postQ : hstr_apt)
                    gam_res1a;
          endif;

     c*    t_adr_lst     tag
          if hres2mode   = 'Y';
             reade (hfice : hstr_dir : hstr_name :
                   hstr_hnum : hstr_prequ : hstr_type :
                   hstr_postD : hstr_postQ : hstr_apt)
                    resrec_2a;
             *in96 = %eof;
          else;
             reade(n) (hfice : hstr_dir : hstr_name :
                   hstr_hnum : hstr_prequ : hstr_type :
                   hstr_postD : hstr_postQ : hstr_apt)
                    resrec_1a;
             *in96 = %eof;
          endif;
          //if *in96 = *off;
          dow *in96 = *off;

             //    write out table row with hyperlink
             if wsubacct    = '  ';
                wsubacct    = '00';
             endif;

             wrk_avsmlv  = wav_smlv;
             exsr get_restyp;

             //   Deleted Mode uses INSTANCE# as unique key
             if hres2mode   = 'Y';
                byte400     = '<tr><td>' +
                    %trim(wlastname) + '</td><td>' +
                    %trim(wfrstname) + '&nbsp;</td><td>' +
                    '<a href="javascript:setsubmitKEY(''' +
                    %trim(%char(winstance#)) +
                    ''');">' +
                    %trim(waddr1) + '</a></td>' +
                    '<td align=center>' +
                    %trim(res_type) + '</td></tr>';
             else;
                byte400     = '<tr><td>' +
                    %trim(wlastname) + '</td><td>' +
                    %trim(wfrstname) + '&nbsp;</td><td>' +
                    '<a href="javascript:setAddr(''' +
                    %trim(waddr1) + ''',''' + wsubacct +
                    ''');">' +
                    %trim(waddr1) + '</a></td>' +
                    '<td align=center>' +
                    %trim(res_type) + '</td></tr>';
             endif;

             BufOut = %trimr(BufOut) + byte400;
             BufOut = %trimr(BufOut) + linefeed;
             bytesize    = bytesize +
                 %len(%trimr(byte400)) + 1;
             exsr CheckBufr;

     c*                  goto      t_adr_lst
          //endif;

             if hres2mode   = 'Y';
                reade (hfice : hstr_dir : hstr_name :
                      hstr_hnum : hstr_prequ : hstr_type :
                      hstr_postD : hstr_postQ : hstr_apt)
                      resrec_2a;
                *in96 = %eof;
             else;
                reade(n) (hfice : hstr_dir : hstr_name :
                      hstr_hnum : hstr_prequ : hstr_type :
                      hstr_postD : hstr_postQ : hstr_apt)
                      resrec_1a;
                *in96 = %eof;
             endif;

          enddo;

          //    end the table
          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '</center>';
          BufOut = %trimr(BufOut) + '<p>';
          bytesize = bytesize + 20;
          exsr checkbufr;

       endsr;

       // **************************************************************
       //    RTN_BusEdt     Write the Business to be edited
       // **************************************************************
       begsr Rtn_BusEdt;

          for i = 1 To size_bus;
             htmlstmt = html_bus(i);

             //   Only display this line when editing

             if html_1to8   = '((EDIT))';
                if hidcode     = 0;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                when html_1to8   = '(SLTSTY)';
                   slct_type   = 'STY';
                   exsr do_select;
                   iter;

                when html_1to8   = '(SLTDIR1' or
                       html_1to8   = '(SLTDIR2';
                   slct_type   = 'DIR';
                   if html_1to8   = '(SLTDIR1';
                      the_dir     = hstr_dir;
                   elseif html_1to8   = '(SLTDIR2';
                      the_dir     = hstr_postd;
                   endif;
                   exsr do_select;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;
          exsr sendbufr;


       endsr;

       // **************************************************************
       //    Rtn_BusLst:    Write out the list of businesses
       // **************************************************************
       begsr Rtn_BusLst;

          //    Setll and read the list of businesses

          if not %open(gam_bus1a);
             open gam_bus1a;
          endif;

          setll hfice ga_busA;

          if not %found;
             //    Write out no businesses found

             html_msgs   = '5634         ';
             exsr do_a_msg2;

          else;
             //    Write out header for businesses

             html_msgs   = '5635         ';
             exsr do_a_msg2;

             //    read equal on fice

             reade hfice ga_busA;
             dow not %eof;
                //if bstatus    <> match_code;
     c*                  goto      bus_rdnxt
                //endif;

                if bstatus = match_code;

                   // Initlize wrk_status and wrk_action based on code

                   exsr do_status;

                   // write out table row with hyperlink

                   byte400 = '<tr><td><a href="' +
                      'javascript:edit(''' +
                    %trim(%char(bidcode)) + ''');">' +
                                  %trim(bcompany) +
                              '</a>&nbsp;</td><td>' +
                                  %trim(bcontact) +
                                  '&nbsp;</td><td>' +
                                  %trim(bpin_user) +
                                  '&nbsp;</td><td>' +
                                  %trim(wrk_status) +
                                  '&nbsp;</td><td>' +
                                  %char(b#_employs) +
                                  '</td></tr>';

                   BufOut = %trimr(BufOut) + byte400;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize = bytesize +
                       %len(%trimr(byte400)) + 1;
                   exsr CheckBufr;

     c*    bus_rdnxt     tag
                endif;

                reade hfice ga_busA;
             enddo;

             //    end the table

             BufOut = %trimr(BufOut) + '</table>';
             bytesize    = bytesize + 8;
             exsr CheckBufr;

          endif;

       endsr;

       // **************************************************************
       //    RTN_CE_1:  Display the detail info for CERTs (Diploma Ord)
       // **************************************************************
       begsr Rtn_CE_1;

          if NOT %open(gaorder1#);
             open gaorder1#;
          endif;

          chain(n) horder# garec_#;
          h_applid = tapplid;
          husrtype = tusrtype;
          hrecid = trecid;
          hproduct = tproduct;
          hship = tship;

          // ----Move the Tfields to the H-fields for Variables Routine
          // Student Info
          clear dsp_ssn;
          if tssn_enc   <> *blanks;
             clear #ED_dqin;
             clear #ED_dqout;
             #ED_doss_i  = 'D';
             #ED_fice_i  = tfice;
             #ED_ess_i   = tssn_enc;
             exsr $get_ED;
             if iregopttax  = 'N';
                dsp_ssn     = #ED_uss_o;
             else;
                dsp_ssn     = %subst(#ED_uss_o:1:3) +
                    '-' + %subst(#ED_uss_o:4:2) + '-' +
                    %subst(#ED_uss_o:6:4);
             endif;
          endif;

          clear dsp_sid;
          if ttrue_sid  <> *blanks;
             dsp_sid = ttrue_sid;
          else;
             %subst(dsp_sid:1:10) = tstudnt_id;
          endif;

          hsfrstn = tsfrstn;
          hsmidln = tsmidln;
          hslastn = tslastn;
          hslastno = tslastno;
          htel# = ttel#;
          hemail = temail;

          city_state = %trimr(tcity) + ',';
          city_state = %trimr(city_state) + ' ' +
              tstate;
          city_state = %trimr(city_state) + '  ' +
              tpostcd;

          clear stuaddr;
          a1          = 0;

          if taddr1     <> *blanks;
             a1          = a1 + 1;
             stuaddr(a1) = taddr1;
          endif;

          if taddr2     <> *blanks;
             a1          = a1 + 1;
             stuaddr(a1) = taddr2;
          endif;

          if city_state <> *blanks;
             a1          = a1 + 1;
             stuaddr(a1) = city_state;
          endif;

          if tcntry     <> *blanks;
             ccs_data = validCC(tcntry:'S':ifice);
             a1          = a1 + 1;
             stuaddr(a1) = eshrtname;
          endif;

          // Delivery Info
          clear deladdr;
          a1          = 0;

          hdel_tel# = tdel_tel#;
          hdel_attn = tdel_attn;
          if tdel_cntry  = 'US' or
                 tdel_cntry  = 'USA';
             clear tdel_cntry;
          endif;

          city_state = %trimr(tdel_city) + ',';
          city_state = %trimr(city_state) + ' ' +
              tdel_state;
          city_state = %trimr(city_state) + '  ' +
              tdel_zip;
          city_state = %trimr(city_state) + '  ' +
              tdel_cntry;

          if tdel_addr1 <> *blanks;
             a1          = a1 + 1;
             deladdr(a1) = tdel_addr1;
          endif;

          if tdel_addr2 <> *blanks;
             a1          = a1 + 1;
             deladdr(a1) = tdel_addr2;
          endif;

          if tdel_addr3 <> *blanks;
             a1          = a1 + 1;
             deladdr(a1) = tdel_addr3;
          endif;

          if city_state <> *blanks;
             a1          = a1 + 1;
             deladdr(a1) = city_state;
          endif;

          if tdel_cntry <> *blanks;
             ccs_data = validCC(tdel_cntry:'S':ifice);
             a1          = a1 + 1;
             deladdr(a1) = eshrtname;
          endif;

          // Action Info
          hga_aut_cd = tga_aut_cd;
          hga_apr_cd = tga_apr_cd;
          hga_paidcd = tga_paid;

          if NOT %open(dvabbrev1);
             open dvabbrev1;
          endif;

          //   Additional Information Stored in Comments
          hcerttype   = %subst(tapp_data5:2:3);
          hcertnum    = %subst(tapp_data5:5);
          hdip_name   = tapp_data7;
          hcer_pname  = tapp_data8;
          hcer_pgloc  = tapp_data9;

          for i = 1 To size_ce_1;
             htmlstmt    = html_ce_1(i);

             if html_1to8   = '((CONDS)';
                if html_7      = 'S' and
                       dsp_sid     = *blanks;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((VRCP))';
                   the_sectn   = %subst(htmlstmt:9:2);
                   exsr rtn_vrcp;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   skip_it     = *blanks;
                   exsr variables;
                   if skip_it     = 'Y';
                      iter;
                   endif;

                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    RTN_Ce_2:  Display the Actions/Buttons - CEs (Certification)
       // **************************************************************
       begsr Rtn_CE_2;

          // ----If this is a Closed order, do not display auth and pymnt info

          if hcntr_dp    = 'C';
             leavesr;
          endif;

          // ----H-FIELDS WERE FILLED FROM RTN_DP_DTL ROUTINE

          for i = 1 To size_ce_2;
             htmlstmt    = html_ce_2(i);

             if html_1to8   = '((ALWCOD';
                if tcardtype  <> 'COD';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             if html_1to8   = '((PROB))';
                if tready      = 'P';
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   skip_it     = *blanks;
                   exsr variables;
                   if skip_it     = 'Y';
                      iter;
                   endif;

                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    RTN_CE_3:  Display the Certificatin Database (OPTIONAL)
       // **************************************************************
       begsr Rtn_CE_3;

       endsr;

       // **************************************************************
       //    RTN_CE_4:  Display the delivery info - CEs (Certifications)
       // **************************************************************
       begsr Rtn_Ce_4;

          // ----H-FIELDS WERE FILLED FROM RTN_CE_DTL ROUTINE
          for i = 1 To size_ce_4;
             htmlstmt    = html_ce_4(i);

             if html_1to8   = '(NOSHIP)';
                if hship       = *blanks;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                   // GAOPTION Fields
                when html_1to8 = '((GAOPT)';
                   byte3       = %subst(html_9to12:1:3);
                   exsr do_gaopt;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   skip_it     = *blanks;
                   exsr variables;
                   if skip_it     = 'Y';
                      iter;
                   endif;

                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    RTN_CE_Lst:  Write the List of ALL Certification Orders
       // **************************************************************
       begsr Rtn_CE_Lst;

          //   Mutiple Items Found - List all Matches
          if condition   = 'multiple ';
             exsr $GA_Search;
          endif;

          //   No Records Found - Put Message of No Matches
          if condition   = 'not-found';
             element_fl  = '2149';
             element_wd  = 'MSG';
             element_p1  = *blanks;
             exsr wrtpanlmsg;
          endif;

       endsr;

       // ************************************************************************
       //    RTN_Cmnt    Routine for Displaying Comments about orders
       // ***********************************************************************
       begsr RTN_Cmnt;

          if horder# = *blanks;
             leavesr;
          endif;

       //      Read GAORDER3 for the comments
          #GT_func = 'GC';
          #GT_fice = hfice;
          #GT_ord# = horder#;
          #GT_applid = h_applid;
          #GT_rectyp = ' ';
          #GT_ob8     = *blanks;
          #GT_ob24    = *blanks;
          #GT_textv   = hTextArea;
          exsr $get_GT;
          if #GT_status <> 'OK';
             // --error
          endif;

          //      Check for dvcallsf1 comments

          if NOT %open(dvcallsf1);
             open(e) dvcallsf1;
             *in97 = %error;
          endif;

          // ----Setll on the low value to get oldest transcript ORDER
          setll horder# dvcallsf1;
          *in96 = %equal;

          for i = 1 To size_cmnt;
             htmlstmt    = html_cmnt(i);

             // --Show problem button only if app allows problems
             if html_1to8   = '((PROB))';
                if h_applid   <> 'DP' and
                       h_applid   <> 'CE';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             // --Show comment button only if user is signed in (did not come via sha)
             if html_1to8   = '((NOSHA)';
                if sha_valid   = #true;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             // --Show comment detail only if there is a comment
             if html_1to8   = '((CMNT))';
                if #GT_ary(1)  = *blanks and
                       *in96       = *off;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;


             select;

                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                   // Show Comment Info, if no comment then this is skipped (above)
                when html_1to8 = 'RTN_CMNT';
                   frst_cmnt   = #TRUE;
                   clear byte400;

                   // ---Display all Comment TEXT records
                   if #GT_ary(1) <> *blanks;
                      for idx = 1 To 50;
                         if #GT_ary(idx) = *blanks;
                            leave;
                         endif;

                         clear byte400;

                         ord_txt = #GT_ary(idx);

                         //     init work_20 with the comment description

                         exsr Make_Cmnt;

                         commentTextArea = '<tr valign=top>' +
                             '<td>' + %trim(
                                 DspTmStamp(%dec(ordtxt_dat:9:0):
                                            %dec(ordtxt_tim:6:0):
                                            itime_zone:
                                            '*WEB')) +
                             '</td>' +
                             '<td>' + ordtxt_usr + '</td>' +
                             '<td>' + %trim(work_20) + '</td><td>' +
                             %trim(ordtxt_txt) + '</td></tr>';

                         BufOut = %trimr(BufOut) + commentTextArea;
                         BufOut = %trimr(BufOut) + linefeed;
                         bytesize    = bytesize + 1 +
                                           %len(%trimr(commentTextArea));
                         exsr CheckBufr;
                      endfor;
                   endif;

                   iter;

                   // Show Comment Info, if no comment then this is skipped (above)
                when html_1to8 = 'RTN_HIST';
                   exsr Rtn_Histry;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   skip_it     = *blanks;
                   exsr variables;
                   if skip_it     = 'Y';
                      iter;
                   endif;
                   bytesize += 80;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // ************************************************************************
       //    RTN_CmntMS  Routine for Displaying Muni Resident Comments
       // ***********************************************************************
       begsr RTN_CmntMS;

          //      Skip Routine if there is not a unique user selected

          if h_key       = *blanks;
             leavesr;
          endif;

          //      Read GAORDER3 for the comments
          #GT_func = 'GC';
          #GT_fice = hfice;
          #GT_ord#    = 'U' + h_key;
          #GT_applid = h_applid;
          #GT_rectyp = ' ';
          #GT_ob8     = *blanks;
          #GT_ob24    = *blanks;
          #GT_textv   = hTextArea;
          exsr $get_GT;
          if #GT_status <> 'OK';
             // --error
          endif;


          for i = 1 To size_cmnt;
             htmlstmt    = html_cmnt(i);

             // --Show problem button only if app allows problems
             if html_1to8   = '((PROB))';
                iter;
             endif;

             // --Show comment detail only if there is a comment
             if html_1to8   = '((CMNT))';
                if #GT_ary(1)  = *blanks and
                       *in96       = *off;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             // --Show comment button only if user is signed in (did not come via sha)
             if html_1to8   = '((NOSHA)';
                if sha_valid   = #true;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;


             select;

                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                   // Show Comment Info, if no comment then this is skipped (above)
                when html_1to8 = 'RTN_CMNT';
                   frst_cmnt   = #TRUE;
                   clear byte400;

                   // ---Display all Comment TEXT records
                   if #GT_ary(1) <> *blanks;
                      for idx = 1 To 50;
                         if #GT_ary(idx) = *blanks;
                            leave;
                         endif;

                         clear byte400;

                         ord_txt = #GT_ary(idx);

                         //     init work_20 with the comment description

                         exsr Make_Cmnt;

                         byte400     = '<tr valign=top>' +
                             '<td>' + %trim(
                                 DspTmStamp(%dec(ordtxt_dat:9:0):
                                            %dec(ordtxt_tim:6:0):
                                            itime_zone:
                                            '*WEB')) +
                             '</td>' +
                             '<td>' + ordtxt_usr + '</td>' +
                             '<td>' + %trim(work_20) + '</td><td>' +
                             %trim(ordtxt_txt) + '</td></tr>';

                         BufOut = %trimr(BufOut) + byte400;
                         BufOut = %trimr(BufOut) + linefeed;
                         bytesize    = bytesize + 1 +
                                           %len(%trimr(byte400));
                         exsr CheckBufr;
                      endfor;
                   endif;

                   iter;

                   //  This is skipped for muni orders, comments are only by order #
                when html_1to8 = 'RTN_HIST';
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   skip_it     = *blanks;
                   exsr variables;
                   if skip_it     = 'Y';
                      iter;
                   endif;
                   bytesize += 80;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;


       //************************************************************
       //  RTN_DELY:   Write the delivery address section
       //************************************************************
       begsr Rtn_Dely;

       FOR i=1 to size_dely;
           if hscrn_next <> 'OCS';
              htmlstmt = html_dely(i);
           else;
              htmlstmt = html_delys(i);
           endif;

           select;

           when htmlstmt  = *blanks;
                iter;

           when html_1to8 = '((STOP))';
                leave;

           when html_1to8 = '(((MSG))';
                exsr do_a_msg2;
                iter;

           endsl;

           bytesize += 80;
           exsr variables;

           exsr checkbufr;
           BufOut = %trim(BufOut) + %trim(htmlstmt) + linefeed;
           bytesize += 1;

           exsr checkbufr;
       ENDFOR;
       exsr sendbufr;

       endsr;


       // **************************************************************
       //     Rtn_Ext     1. Display number of orders pending
       //                 2. Write any members stored for past 60 days
       // **************************************************************
       begsr Rtn_Ext;

          //   1. Run SQL Query to get count info


       exec sql
          declare xsql_cnt cursor for
             SELECT count(*)
                FROM gaorder1
                WHERE tfice = :hfice and
                      tpullflag = 'T' and
                      tga_paid <> ' ' and
                      tga_paiddt < :cycle_date and
                      tstat_end = ' ';

       exec sql
          OPEN xsql_cnt;

       exec sql
          FETCH xsql_cnt INTO :count_ext;

       exec sql
          CLOSE xsql_cnt;


          byte700     = '<font size=2><b>' +
                      'There are currently ' +
                      count_ext +
                      'pending orders.' +
                      '</b></font><p>' + linefeed;

          //   2. Write any members stored for past 60 days

          byte700     = %trim(byte700) +
                            '<p><table border=1 ' +
              ' cellpadding=3 cellspacing=3><tr>' +
              '<td><b>Files Ready for Download' +
              '</td></tr>' + linefeed;

          // --Loop through member names for 60 days

          for i1 = 0 To 59;

             //   Calculate the day we are checking

             $date = cycle_dt_a;
             $value      = i1;
             $unit       = 'D';
             $result = dateminus($date:$value:$unit);
             date8 = %dec(%xlate(' ':'0':
                   $result):8:0);


             // --Check for mulitple members per day

             idx = 0;
     c*    T_extract     tag
             dow 1=1;
                evalr byte2 = %editc(idx:'X');

                byte10 = 'G' + %subst(adate8yyyy:3:2) +
                         adate8mm + adate8dd +
                         '_' + byte2;

                chkobjcmd = 'CHKOBJ OBJ(*LIBL/GAA_' + hfice +
                            ') OBJTYPE(*FILE) MBR(' + byte10 + ')';

                cmdlen = 70;
                clear command;
                command = chkobjcmd;
                callp(e) qcmdexc(command : cmdlen);
                *in92 = %error;

                if *in92 = *off;
                   byte700 = %trim(byte700) + '<tr>' +
                       '<td align=center>' +
                       '<a href="javascript:dnl_rpt(''' +
                       byte10 + ''');">' + adate8mm + '-' +
                       adate8dd + '-' + adate8yyyy;
                   if idx > 0;
                      byte700 = %trim(byte700) +
                               ' ' + byte2;
                   endif;
                   byte700 = %trim(byte700) +
                            '</a></td></tr>' + linefeed;
                else;
                //iter;
                   leave;
                endif;

                // 3/27/09 MRB Added check to make sure we do not overflow byte700

                if 600 < %len(%trim(byte700));
                   BufOut = %trimr(BufOut) + byte700;
                   clear byte700;
                endif;

                idx = idx + 1;
     c*                  goto      T_Extract
             enddo;
          endfor;

          BufOut = %trimr(BufOut) + byte700;
          BufOut = %trimr(BufOut) + '</table>';
          exsr sendbufr;

       endsr;

       //************************************************************
       //  RTN_LPRSCAN:  Show the LPR Scan History
       //************************************************************
       begsr rtn_lprscan;

       if not %open(lprlot1);
          open lprlot1;
       endif;

       setll (hfice) lprlotrec;
       if %equal(lprlot1);
          lotcnt = 1;
          reade (hfice) lprlotrec schlLots(lotcnt);
          dow not %eof(lprlot1);
             lotcnt += 1;
             reade (hfice) lprlotrec schlLots(lotcnt);
          enddo;
       endif;

       if not %open(lprscan1d);
          open lprscan1d;
       endif;

       setll (hfice) scanhstrec;
       if not %found(lprscan1d);
          leavesr;
       endif;

       hrowcntr = 0;

       reade (hfice) scanhstrec;
       dow not %eof(lprscan1d);
          select;
          when hrowcntr = 0;
             element_wd  = 'MSG';
             element_fl  = '6581';
             element_p1  = ' ';
             exsr wrtpanlmsg;
          when hrowcntr > 50;
             leave;
          endsl;

          hrowcntr += 1;

          td_cell1  = '<td>' + %trim(sscanid);
          if sstatus = 'I';
             td_cell1  = %trim(td_cell1) +
                         '<ul><li><a href="javascript:DsplyImg' +
                         '(''' + %trim(sscanid) + ''',''B'');">' +
                         'Image 1 (Black and White)</a></li>' +
                         '<li><a href="javascript:DsplyImg' +
                         '(''' + %trim(sscanid) + ''',''C'');">' +
                         'Image 2 (Color)</a></li></ul>';
          endif;
          td_cell1  = %trim(td_cell1) + '</td>';

          td_cell2  = '<td>' + %trim(%char(%date(sscandate):*usa)) + '</td>';
          td_cell3  = '<td>' + %trim(%char(%time(sscantime):*hms)) + '</td>';

          clear td_cell4b;
          if svltncode1 <> *blanks;
             td_cell4b = '<ol><li>' + %trim(svltncode1) + '</li>';
             if svltncode2 <> *blanks;
                td_cell4b = %trim(td_cell4b) +
                            '<li>' + %trim(svltncode2) + '</li>';
             endif;
             if svltncode3 <> *blanks;
                td_cell4b = %trim(td_cell4b) +
                            '<li>' + %trim(svltncode3) + '</li>';
             endif;
             td_cell4b = %trim(td_cell4b) + '</ol>';
          endif;

          select;
          when sstatus = 'V';
             td_cell4 = '<td>Valid Plate</td>';
          when sstatus = 'I';
             td_cell4 = '<td>Ignored Citation' + %trim(td_cell4b) + '</td>';
          when sstatus = 'P';
             td_cell4 = '<td>Possible Citation' + %trim(td_cell4b) + '</td>';
          when sstatus = 'R';
             td_cell4 = '<td>Issued Citation' + %trim(td_cell4b) + '</td>';
          other;
             td_cell4 = '<td>' + sstatus + '</td>';
          endsl;

          td_cell5 = '<td>' + %trim(svehplate) + ' - ' + %trim(svehpliss) +
                     '</td>';

          td_cell6 = '<td>' + %trim(socrplate) + ' - ' + %trim(socrpliss) +
                     '</td>';

          lidx = %lookup(slot_id:schlLots(*).llot_id);
          if lidx > 0;
             td_cell7  = '<td>' + %trim(schlLots(lidx).ldescrp) + '</td>';
          else;
             td_cell7  = '<td>' + slot_id + '</td>';
          endif;

          td_cell8  = '<td>' + %char(slatitude) + '</td>';
          td_cell9  = '<td>' + %char(slongitude) + '</td>';

          row = '<tr>' +
                %trim(td_cell1)  + %trim(td_cell2)  + %trim(td_cell3)  +
                %trim(td_cell4)  + %trim(td_cell5)  + %trim(td_cell6)  +
                %trim(td_cell7)  + %trim(td_cell8)  + %trim(td_cell9)  +
                '</tr>';

          bufout = %trim(bufout) + %trim(row) + linefeed;
          exsr sendbufr;

          reade (hfice) scanhstrec;
       enddo;

       element_wd  = 'MSG';
       element_fl  = '6582';
       exsr wrtpanlmsg;

       endsr;

       //************************************************************
       //  RTN_LPRPLATES:  Show the LPR Plate database
       //************************************************************
       begsr rtn_lprplates;

       if not %open(lprplate1);
          open lprplate1;
       endif;

       setll (hfice) platerec;
       if not %equal(lprplate1);
          leavesr;
       endif;

       element_wd  = 'MSG';
       element_fl  = '6631';
       element_p1  = ' ';
       exsr wrtpanlmsg;

       hrowcntr = 0;
       reade (hfice) platerec;
       dow not %eof(lprplate1);
          if pvehplate = *blanks or
             plstscn_dt = 0;
             reade (hfice) platerec;
             iter;
          endif;
          if hrowcntr > 200;
             leave;
          endif;
          hrowcntr += 1;

          td_cell1 = '<td>' + %trim(porder#) + '</td>';
          td_cell2 = '<td>' + pvehplate + ' - ' + pvehpliss + '</td>';
          td_cell3 = '<td>' + plstscnlot + '</td>';
          if plstscn_dt > 0;
             td_cell4 = '<td>' + %trim(%char(%date(plstscn_dt):*iso)) + '</td>';
          else;
             td_cell4 = '<td>0</td>';
          endif;
          if plstscn_tm > 0;
             td_cell5 = '<td>' + %trim(%char(%time(plstscn_tm):*iso)) + '</td>';
          else;
             td_cell5 = '<td>0</td>';
          endif;
          td_cell6 = '<td>' + %char(plstscnlat) + '</td>';
          td_cell7 = '<td>' + %char(plstscnlon) + '</td>';

          row = '<tr>' +
                %trim(td_cell1)  + %trim(td_cell2)  + %trim(td_cell3)  +
                %trim(td_cell4)  + %trim(td_cell5)  + %trim(td_cell6)  +
                %trim(td_cell7)  +
                '</tr>';

          bufout = %trim(bufout) + %trim(row) + linefeed;
          exsr sendbufr;

          reade (hfice) platerec;
       enddo;

       element_wd  = 'MSG';
       element_fl  = '6632';
       exsr wrtpanlmsg;

       endsr;

       //************************************************************
       //  RTN_LPRCITES:  Show the LPR Citation database
       //************************************************************
       begsr rtn_lprcites;

       if not %open(lprcite1);
          open lprcite1;
       endif;

       setll (hfice) lprciterec;
       if not %equal(lprcite1);
          leavesr;
       endif;

       element_wd  = 'MSG';
       element_fl  = '6681';
       element_p1  = ' ';
       exsr wrtpanlmsg;

       reade (hfice) lprciterec;
       dow not %eof(lprcite1);

          td_cell1  = '<td>' + %trim(xscanid) + '<ul>' +
                      '<li><a href="javascript:DsplyImg' +
                      '(''' + %trim(xscanid) + ''',''B'');">' +
                      'Image 1 (Black and White)</a></li>' +
                      '<li><a href="javascript:DsplyImg' +
                      '(''' + %trim(xscanid) + ''',''C'');">' +
                      'Image 2 (Color)</a></li></ul></td>';

          td_cell2  = '<td>' + xorder# + '</td>';
          td_cell3  = '<td>' + %trim(%char(%date(xdate):*iso)) + '</td>';
          td_cell4  = '<td>' + %trim(%char(%time(xtime):*iso)) + '</td>';
          td_cell5  = '<td>' + xuserid + '</td>';
          td_cell6  = '<td>' + %char(xamt_total) + '</td>';
          td_cell7  = '<td>' + xcite_cd1 + '</td>';
          td_cell8  = '<td>' + %char(xamount1) + '</td>';
          td_cell9  = '<td>' + xcite_cd2 + '</td>';
          td_cell10 = '<td>' + %char(xamount2) + '</td>';
          td_cell11 = '<td>' + xcite_cd3 + '</td>';
          td_cell12 = '<td>' + %char(xamount3) + '</td>';

          row = '<tr>' +
                %trim(td_cell1)  + %trim(td_cell2)  + %trim(td_cell3)  +
                %trim(td_cell4)  + %trim(td_cell5)  + %trim(td_cell6)  +
                %trim(td_cell7)  + %trim(td_cell8)  + %trim(td_cell9)  +
                %trim(td_cell10) + %trim(td_cell11) + %trim(td_cell12) +
                '</tr>';

          bufout = %trim(bufout) + %trim(row) + linefeed;
          exsr sendbufr;

          reade (hfice) lprciterec;
       enddo;

       element_wd  = 'MSG';
       element_fl  = '6682';
       exsr wrtpanlmsg;

       endsr;

       //************************************************************
       //  RTN_NEWWIN:  SR puts out NEWwin() to screen
       //************************************************************
       begsr rtn_NEWwin;

       for i=1 to size_NEWwin;
          htmlstmt = NEWwin(i);

          select;
          when htmlstmt = *blanks;
             iter;

          when html_1to8 = '((STOP))';
             leave;
          endsl;

          bufout = %trimr(bufout) + %trimr(htmlstmt) + linefeed;
          exsr CheckBufr;

       endfor;

       exsr sendbufr;

       endsr;


       // **************************************************************
       //     RTN_RUSH:   Write the OTC Rush Service Options section
       // **************************************************************
       begsr Rtn_Rush;

          for i = 1 To size_rush;
             if hscrn_next <> 'OCS';
                htmlstmt    = html_rush(i);
             else;
                htmlstmt    = html_rushs(i);
             endif;

             select;

                when htmlstmt    = *blanks;
                   iter;

                when html_1to8   = '((STOP))';
                   leave;

             endsl;


             select;

                when html_1to8   = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

             endsl;

             bytesize += 80;
             //                   exsr      variables

             //    Do variables here instead
             //  ----search for (CHKRSH) for Rush Radio Box CHECKED

             idx = %scan('(CHKRSH)':htmlstmt:1);
             if idx         > 0;
                $$i = idx - 3;
                byte1 = htm80($$i);
                if hrush       = byte1;
     c*                  movea     'CHECKED '    htm80(idx)
                  %subst(htmlstmt:idx:8) = 'CHECKED ';
                else;
     c*                  movea     '        '    htm80(idx)
                  %subst(htmlstmt:idx:8) = '        ';
                endif;
             endif;

             //  ----search for (RUSHFEE) for Rush Service Fee

             idx = %scan('(RUSHFEE)':htmlstmt:1);
             if idx         > 0;
                byte10      = %char(RUSH_FEE);
     c*                  movea     byte10        htm80(idx)
                %subst(htmlstmt:idx:%len(byte10)) = byte10;
             endif;

             //  ----search for (RUSHSRV) for Rush Service - Summary page

             idx = %scan('(RUSHSRV)':htmlstmt:1);
             if idx         > 0;
                if hrush       = 'Y';
                   byte70      = 'Rush Service - $' +
                                     %char(RUSH_FEE);
                else;
                   byte70      = 'Standard Service';
                endif;
     c*                  movea     byte70        htm80(idx)
                %subst(htmlstmt:idx:%len(byte70)) = byte70;
             endif;


             exsr checkbufr;
             BufOut = %trimr(BufOut) + htmlstmt;
             BufOut = %trimr(BufOut) + linefeed;
             ByteSize += 1;

             exsr checkbufr;
          endfor;
          exsr sendbufr;
       endsr;

       // **************************************************************
       //     RTN_SHIP:   Write the OTC Shipping information section
       // **************************************************************
       begsr Rtn_Ship;

          for i = 1 To size_ship;
             if hscrn_next <> 'OCS';
                htmlstmt    = html_ship(i);
             else;
                htmlstmt    = html_ships(i);
             endif;

             select;

                when htmlstmt    = *blanks;
                   iter;

                when html_1to8   = '((STOP))';
                   leave;

                when html_1to8   = '((CRED))';
                   if origin     <> 'CLLC'  and
                          hfice     <> 'PPMRKT';
                      iter;
                   else;
                      evalr byte72 = htmlstmt;
                      htmlstmt = byte72;
                   endif;

             endsl;


             select;

                when html_1to8   = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

             endsl;

             bytesize += 80;
             //                   exsr      variables

             //    Do variables here instead
             //  ----search for (CHKSH) for Shipping Option Radios

             idx = %scan('(CHKSH)':htmlstmt:1);
             if idx         > 0;
                $$i = idx - 3;
                byte1 = htm80($$i);
                if hship       = byte1;
     c*                  movea     'CHECKED'     htm80(idx)
                   %subst(htmlstmt:idx:8) = 'CHECKED';
                else;
     c*                  movea     '       '     htm80(idx)
                   %subst(htmlstmt:idx:8) = '       ';
                endif;
             endif;

             //  ----search for (SHIPMTH) for Shipping Option Summary screen

             idx = %scan('(SHIPMTH)':htmlstmt:1);
             if idx         > 0;
                if hship       = 'O';
                   byte70      = 'Priority Overnight';
                elseif hship       = 'S';
                   byte70      = 'Standard Overnight';
                elseif hship       = '2';
                   byte70      = 'Two Day';
                elseif hship       = 'X';
                   byte70      = 'Express Saver';
                elseif hship       = 'G';
                   byte70      = 'Ground';
                else;
                   byte70      = 'First Class Mail';
                endif;
                //   Add the shipping cost

                byte70      = %trim(byte70) + ' - $' +
                                  %trim(%editc(otc_ship:'3'));

     c*                  movea     byte70        htm80(idx)
                %subst(htmlstmt:idx:%len(byte70)) = byte70;
             endif;


             exsr checkbufr;
             BufOut = %trimr(BufOut) + htmlstmt;
             BufOut = %trimr(BufOut) + linefeed;
             ByteSize += 1;

             exsr checkbufr;
          endfor;
          exsr sendbufr;
       endsr;

       // **************************************************************
       //    RTN_DP_CS:  Display the Stats/Router Infro for this Order
       // **************************************************************
       begsr Rtn_DP_CS;

          // table header - Router Info
          element_wd  = 'MSG';
          element_fl  = '3190';
          element_p1  = ' ';
          exsr wrtpanlmsg;

          //  order received
          td_frmt     = 'BR';
          td_data     = 'Received:&nbsp;';
          td_i        = td_i + 1;
          td_ary(td_i)= td_line;

          td_frmt     = 'BC';
          td_data     = 'WEBSITE';
          td_i        = td_i + 1;
          td_ary(td_i)= td_line;

          td_data     = dspTmStamp(tdate:
                                       ttime:
                                       itime_zone:
                                       '*WEB');
          td_i        = td_i + 1;
          td_ary(td_i)= td_line;

          exsr bld_row;

          //  approve data
          td_frmt     = 'BR';
          td_data     = 'Approved:&nbsp;';
          td_i        = td_i + 1;
          td_ary(td_i)= td_line;

          td_frmt     = 'BC';
          if tga_apr_cd  = 'Y';
             td_data     = tga_apr_us;
          else;
             td_data     = 'N/A';
          endif;
          td_i        = td_i + 1;
          td_ary(td_i)= td_line;

          if tga_apr_cd  = 'Y';
             td_data     = dspTmStamp(tga_apr_dt:
                                          tga_apr_tm:
                                          itime_zone:
                                          '*WEB');
          else;
             td_data     = 'N/A';
          endif;
          td_i        = td_i + 1;
          td_ary(td_i)= td_line;

          exsr bld_row;

          //  authorized data
          td_frmt     = 'BR';
          td_data     = 'Authorized:&nbsp;';
          td_i        = td_i + 1;
          td_ary(td_i)= td_line;

          date8 = %dec(%subst(%editc(tga_aut_dt:'X'):
                  2:8):8:0);
          time6 = %dec(%subst(%editc(tga_aut_tm:'X'):
                  2:6):6:0);

          td_frmt     = 'BC';
          if tga_aut_cd  = 'Y';
             td_data     = tga_aut_us;
          else;
             td_data     = 'N/A';
          endif;
          td_i        = td_i + 1;
          td_ary(td_i)= td_line;

          if tga_aut_cd  = 'Y';
             td_data     = dspTmStamp(tga_aut_dt:
                                          tga_aut_tm:
                                          itime_zone:
                                          '*WEB');
          else;
             td_data     = 'N/A';
          endif;
          td_i        = td_i + 1;
          td_ary(td_i)= td_line;

          exsr bld_row;


          //  paid stats - only if COD is on
          if gpp_alwcod <> *blanks;
             td_frmt     = 'BR';
             td_data     = 'Paid:&nbsp;';
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             td_frmt     = 'BC';
             if tga_paidus <> *blanks;
                td_data     = tga_paidus;
             else;
                td_data     = 'N/A';
             endif;
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             if tga_paid    = 'Y';
                td_data     = dspTmStamp(tga_paiddt:
                                             tga_paidtm:
                                             itime_zone:
                                             '*WEB');
             else;
                td_data     = 'N/A';
             endif;
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             exsr bld_row;
          endif;

          //  completed stats
          if tga_fin_us <> *blanks;
             td_frmt     = 'BR';
             td_data     = 'Completed:&nbsp;';
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             td_frmt     = 'BC';
             td_data     = tga_fin_us;
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             td_data     = dspTmStamp(tga_fin_dt:
                                          tga_fin_tm:
                                          itime_zone:
                                          '*WEB');
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

          elseif tstat_end  <> *blanks;
             td_frmt     = 'BR';
             td_data     = 'Canceled:&nbsp;';
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             td_frmt     = 'BC';
             td_data     = tstat_e_us;
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             td_data     = dspTmStamp(tstat_e_dt:
                                          tstat_e_tm:
                                          itime_zone:
                                          '*WEB');
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

          else;
             td_frmt     = 'BR';
             td_data     = 'Completed:&nbsp;';
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             td_frmt     = 'BC';
             td_data     = 'N/A';
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             td_data     = 'N/A';
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;
          endif;
          exsr bld_row;

       element_wd = 'MSG';
       element_fl = '3193';
       element_p1 = ' ';
       exsr wrtPanlMsg;

       // * </table> - back button
       //                    eval      element_wd  = 'MSG'
       //                    eval      element_fl  = '3195'
       //                    eval      element_p1  = ' '
       //                    exsr      wrtpanlmsg

       if tga_paiddt > *zero and (tbillcycle <> ' ' or ttestcode <> ' ') and
          tamt_total > *zero and trefnd_amt = *zero and hcntr_dp = 'C' and
          cycle_date < %dec(%date(tdate) + %days(120)) and
          (tcardtype = 'VISA' or tcardtype = 'AMEX' or
          tcardtype = 'DISC' or tcardtype = 'MCRD');

          // refund button
          element_wd = 'MSG';
          element_fl = '3194';
          element_p1 = ' ';
          exsr wrtPanlMsg;
       endif;

       if hcntr_dp = 'C';
          // </table> - back button
          element_wd = 'MSG';
          element_fl = '3196';
          element_p1 = ' ';
          exsr wrtPanlMsg;
       endif;

       // ------------------------------------------------------------
       //     Display the router information for this Order#
       // ------------------------------------------------------------
          if NOT %open(garouter1b);
             cmdlen = 70;
             clear command;
             command = overrid3;
             qcmdexc(command : cmdlen);
             open(e) garouter1b;
             *in97 = %error;
          endif;

          //  table header
          element_wd  = 'MSG';
          element_fl  = '3197';
          element_p1  = ' ';
          exsr wrtpanlmsg;

          //  Position File

          setll horder# garouter1b;
          *in96 = not %found;

          //   Loop until Order# is different

          dow *in96 <> *on;
             reade horder# garouter_b;
             *in96 = %eof;
             if *in96;
                leave;
             endif;

             //   make displayable information
             td_frmt     = 'NB';
             td_data     = dspTmStamp(sreplydate:
                                          sreplytime:
                                          itime_zone:
                                          '*WEB');
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             clear byte25;
             select;
                when saction = 'A';
                   byte25      = 'Authorization Send';
                when saction = 'B';
                   byte25      = 'Auto-Auth Failed  ';
                when saction = 'C';
                   byte25      = 'Order Completed   ';
                when saction = 'D';
                   byte25      = 'Delivery Notification';
                when saction = 'E';
                   comp_msg    = 'Order Acknowledgement';
                when saction = 'G';
                   if %trim(srtr_data) = 'UPDATE';
                      byte25 = 'Tracking# Updated    ';
                   else;
                      byte25 = 'Tracking# Set        ';
                   endif;
                when saction = 'L';
                   byte25      = 'Lost/Stolen       ';
                when saction = 'M';
                   byte25      = 'Auto Auth Complete';
                when saction = 'N';
                   byte25      = 'Authorization Received';
                when saction = 'O';
                   byte25      = 'Order Receipt     ';
                when saction = 'P';
                   byte25      = 'Order Problem     ';
                when saction = 'R';
                   byte25      = 'Order Re-Issued   ';
                when saction = 'T';
                   byte25      = 'Comment';
                when saction = 'X';
                   byte25      = 'Order Canceled    ';
                when saction = 'Y';
                   byte25      = 'Order Refunded';
                when saction = 'V';
                   byte25      = 'Order Voided      ';
                when saction = '8';
                   byte25      = 'PDF Download Part 1';
                when saction = '9';
                   byte25      = 'PDF Download Part 2';
                other;
                   byte25      = '&nbsp;            ';
             endsl;
             td_data     = byte25;
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             //   build email/fax
             select;
                when srpymethod = 'E';
                   td_data     = 'E-mail';
                when srpymethod = 'F';
                   td_data     = 'Fax   ';
                other;
                   td_data     = '&nbsp;';
             endsl;
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;
             td_data     = saddress;
             td_i        = td_i + 1;
             td_ary(td_i)= td_line;

             //   call TD row builder
             exsr bld_row;
          enddo;

          // table ender - 1
          element_wd  = 'MSG';
          element_fl  = '3198';
          element_p1  = ' ';
          exsr wrtpanlmsg;

       endsr;

       //************************************************************
       // RTN_DP_1:  Display the detail info for DPs (Diploma Ord)
       //************************************************************
       begsr Rtn_DP_1;

       if not %open(gaorder1#);
          open gaorder1#;
       endif;
       chain(n) (horder#) garec_#;

       h_applid = tapplid;
       husrtype = tusrtype;
       hrecid   = trecid;
       hproduct = tproduct;
       hship    = tship;

       if not %open(dvclientf2);
          open dvclientf2;
       endif;
       chain(n) (huserid) authority;

       // Move the Tfields to the H-fields for Variables Routine

       // Decrypt the taxno if non-blank
       clear dsp_ssn;
       if tssn_enc <> *blanks;
          clear #ED_dqin;
          clear #ED_dqout;
          #ED_ess_i  = tssn_enc;
          #ED_fice_i = tfice;
          select;
          when issn_cntrl = 'F' or
               hdo_fulssn = 'Y';
             #ED_doss_i = 'D';
             exsr $get_ED;
             if hdo_fulssn = 'Y';
                #M2_func   = 'SM';       // SSN Monitor
                #M2_fice   = hfice;
                #M2_ssnenc = #ED_ess_o;
                #M2_ssnusr = huserid;
                #M2_ssnrc1 = 'RV';
                #M2_ssnrc2 = h_applid;
                #M2_ssnord = horder#;
                exsr $put_m2;
             endif;
          when issn_cntrl = 'M' or       // item display shows last 4
               issn_cntrl = 'L';         // for M or L
             #ED_doss_i = 'X';
             exsr $get_ED;
          when issn_cntrl = ' ';
          endsl;
       endif;
       htaxno = #ED_uss_o;

       if htaxno = ' ';
          dsp_ssn = *blanks;
       elseif iregopttax = 'N';
          dsp_ssn = htaxno;
       else;
          dsp_ssn = %subst(htaxno:1:3) + '-' +
                    %subst(htaxno:4:2) + '-' + %subst(htaxno:6:4);
       endif;

       if ttrue_sid  <> *blanks;
          dsp_sid = ttrue_sid;
       else;
          %subst(dsp_sid:1:10) = tstudnt_id;
       endif;

       if tdob_enc <> ' ';
          hbirth = %dec(srvred_decryptDob(tfice:tdob_enc):9:0);
       else;
          hbirth = 0;
       endif;

          hsfrstn = tsfrstn;
          hsmidln = tsmidln;
          hslastn = tslastn;
          hslastno = tslastno;
          hsuffix = tssuffix;
          htel# = ttel#;
          hemail = temail;

          city_state = %trimr(tcity) + ',';
          city_state = %trimr(city_state) + ' ' +
              tstate;
          city_state = %trimr(city_state) + '  ' +
              tpostcd;

          clear stuaddr;
          a1          = 0;

          if taddr1     <> *blanks;
             a1          = a1 + 1;
             stuaddr(a1) = taddr1;
          endif;

          if taddr2     <> *blanks;
             a1          = a1 + 1;
             stuaddr(a1) = taddr2;
          endif;

          if city_state <> *blanks;
             a1          = a1 + 1;
             stuaddr(a1) = city_state;
          endif;

          if tcntry     <> *blanks;
             ccs_data = validCC(tcntry:'S':ifice);
             a1          = a1 + 1;
             stuaddr(a1) = eshrtname;
          endif;

          // Delivery Info
          clear deladdr;
          a1          = 0;

          hdel_tel# = tdel_tel#;
          hdel_attn = tdel_attn;
          if tdel_cntry  = 'US' or
                 tdel_cntry  = 'USA';
             clear tdel_cntry;
          endif;

          city_state = %trimr(tdel_city) + ',';
          city_state = %trimr(city_state) + ' ' +
              tdel_state;
          city_state = %trimr(city_state) + '  ' +
              tdel_zip;
          city_state = %trimr(city_state) + '  ' +
              tdel_cntry;

          if tdel_addr1 <> *blanks;
             a1          = a1 + 1;
             deladdr(a1) = tdel_addr1;
          endif;

          if tdel_addr2 <> *blanks;
             a1          = a1 + 1;
             deladdr(a1) = tdel_addr2;
          endif;

          if tdel_addr3 <> *blanks;
             a1          = a1 + 1;
             deladdr(a1) = tdel_addr3;
          endif;

          if city_state <> *blanks;
             a1          = a1 + 1;
             deladdr(a1) = city_state;
          endif;

          if tdel_cntry <> *blanks;
             ccs_data = validCC(tdel_cntry:'S':ifice);
             a1          = a1 + 1;
             deladdr(a1) = eshrtname;
          endif;

          // Action Info
          hga_aut_cd = tga_aut_cd;
          hga_apr_cd = tga_apr_cd;
          hga_paidcd = tga_paid;
          hcer_pname  = tapp_data8;
          hcer_pgloc  = tapp_data9;

          for i = 1 To size_dp_1;
             htmlstmt    = html_dp_1(i);

             if html_1to8   = '((CONDS)';
                if html_7      = 'S' and
                       dsp_sid     = *blanks;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             if html_1to8   = '((CONDD)';
                if html_7      = 'D' and
                       hbirth      = 0;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             if html_1to8   = '(DEGINF)';
                if tapp_data0  = *blanks;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             if (html_1to8 = '(DEGYER)');
                if (tapp_data4 <> *blanks and %scan('Y':gdipl_flds) > 0);
                   htmlstmt = %subst(htmlstmt:9);
                else;
                   iter;
                endif;
             endif;

             if (html_1to8 = '(DEGGMY)');
                if (tapp_data4 <> *blanks and %scan('G':gdipl_flds) > 0);
                   htmlstmt = %subst(htmlstmt:9);
                else;
                   iter;
                endif;
             endif;

             if (html_1to8 = '(DEGNAM)');
                if (tapp_data7 <> *blanks);
                   htmlstmt = %subst(htmlstmt:9);
                else;
                   iter;
                endif;
             endif;

             if (html_1to8 = '(DEGDT5)');
                if (tapp_data5 <> *blanks);
                   htmlstmt = %subst(htmlstmt:9);
                else;
                   iter;
                endif;
             endif;

             if (html_1to8 = '(DEGDTC)');
                if (tapp_datac <> *blanks);
                   htmlstmt = %subst(htmlstmt:9);
                else;
                   iter;
                endif;
             endif;

             if html_1to8 = '(DPSPCL)';
                if (tapp_data8 <> *blanks and %scan('I':gdipl_flds) > 0);
                   htmlstmt = %subst(htmlstmt:9);
                else;
                   iter;
                endif;
             endif;

             if html_1to8 = '(DPAPP8)';
                if (tapp_data8 <> *blanks and %scan('8':gdipl_flds) > 0);
                   htmlstmt = %subst(htmlstmt:9);
                else;
                   iter;
                endif;
             endif;

             if html_1to8   = '(DPAPP9)';
                if tapp_data9 = *blanks;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             if html_1to8 = '(SSNBTN)';
                if (%scan('T':cau_ga_dp) > 0 and
                   (issn_cntrl = 'L' or
                   issn_cntrl = 'M') );
                   htmlstmt = %subst(htmlstmt:9:72);
                else;
                   iter;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((VRCP))';
                   the_sectn   = %subst(htmlstmt:9:2);
                   exsr rtn_vrcp;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   skip_it     = *blanks;
                   exsr variables;
                   if skip_it     = 'Y';
                      iter;
                   endif;

                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    RTN_DP_2:  Display the Actions/Buttons - DPs (Diploma Ord)
       // **************************************************************
       begsr Rtn_DP_2;

          // ----IF VIEWING CLOSED ITEMS - SHOW CUSTOMER SERVICE STATS

          exsr rtn_dp_cs;

          if hcntr_dp    = 'C';
             leavesr;
          endif;

          // ----H-FIELDS WERE FILLED FROM Rtn_DP_1 ROUTINE

          for i = 1 To size_dp_2;
             htmlstmt    = html_dp_2(i);

             if html_1to8   = '((ALWCOD';
                if gpp_alwcod <> 'Y';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

       if html_1to8 = '(GAAUTH)';
          if hga_aut_cd <> 'Y';
             htmlstmt = %subst(htmlstmt:9:72);
          else;
             iter;
          endif;
       endif;
             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   skip_it     = *blanks;
                   exsr variables;
                   if skip_it     = 'Y';
                      iter;
                   endif;

                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    RTN_DP_3:  Display the Diploma Database (OPTIONAL)
       // **************************************************************
       begsr Rtn_DP_3;

          if gpgm_$bd    = *blanks;
             leavesr;
          endif;

          // Get GADP_DAT1 Record
          exsr get_dpdat1;

          clear row;
          tr_cell1    = '<tr>';

          // Output Header Message First
          element_wd  = 'MSG';

          if hfice = '001051' or
             hfice = 'XX1051';

             element_fl  = '3186';
          else;
             element_fl  = '3185';
          endif;

          element_p1  = ' ';
          exsr wrtpanlmsg;

          if vdp_dgtype <> *blanks;
             td_cell1    = '<td><b>' +
                 %trim(vdp_dgtype) + '</b></td>';
          else;
             td_cell1    = '<td>&nbsp;</td>';
          endif;

          if vdp_dgmajr <> *blanks;
             td_cell2    = '<td><b>' +
                 %trim(vdp_dgmajr) + '</b></td>';
          else;
             td_cell2    = '<td>&nbsp;</td>';
          endif;

          if vdp_dgdate <> 0 and
               (dates_validDate(%char(vdp_dgdate):'*ISO':#TRUE) or
                dates_validDate(%char(vdp_dgdate):'*ISO':#FALSE));
             td_cell3 = '<td><b>' + %trim(
                             dspTmStamp(vdp_dgdate:
                                      0:0:'*DATE')) +
                               '</b></td>';
          else;
             td_cell3    = '<td>&nbsp;</td>';
          endif;

          if vdp_frstn  <> *blanks;
             td_cell4    = '<td><b>' +
                 %trim(vdp_frstn) + '</b></td>';
          else;
             td_cell4    = '<td>&nbsp;</td>';
          endif;

          if vdp_midln  <> *blanks;
             td_cell5    = '<td><b>' +
                 %trim(vdp_midln) + '</b></td>';
          else;
             td_cell5    = '<td>&nbsp;</td>';
          endif;

          if vdp_lastn  <> *blanks;
             td_cell6    = '<td><b>' +
                 %trim(vdp_lastn) + '</b></td>';
          else;
             td_cell6    = '<td>&nbsp;</td>';
          endif;

          if hfice = '001051' or
             hfice = 'XX1051';

             row = %trim(tr_cell1) +
                   %trim(td_cell1) +
                   %trim(td_cell3) + %trim(td_cell4) +
                   %trim(td_cell5) + %trim(td_cell6) +
                   '</tr></table><hr size=3 noshade><p>';
          else;

             row = %trim(tr_cell1) +
                   %trim(td_cell1) + %trim(td_cell2) +
                   %trim(td_cell3) + %trim(td_cell4) +
                   %trim(td_cell5) + %trim(td_cell6) +
                   '</tr></table><hr size=3 noshade><p>';

          endif;

          BufOut = %trimr(BufOut) + row;
          BufOut = %trimr(BufOut) + linefeed;
          nbytes      = %len(%trimr(row)) + 1;
          ByteSize += nbytes;
          exsr checkbufr;

       endsr;

       // **************************************************************
       //    RTN_DP_4:  Display the delivery info - DPs (Diploma Ord)
       // **************************************************************
       begsr Rtn_DP_4;

          // ----H-FIELDS WERE FILLED FROM RTN_DP_DTL ROUTINE
          for i = 1 To size_dp_4;
             htmlstmt    = html_dp_4(i);

             if html_1to8   = '(NOSHIP)';
                if hship       = *blanks;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             if html_1to8 = '(TRKSET)';
                if tship <> *blanks and
                   tready = 'C' and
                   tga_fin_dt > 0 and
                   ga_es_type <> 'PU' and
                   ga_es_type <> 'EP' and
                   tapp_datab = *blanks;

                   htmlstmt = %subst(htmlstmt:9);

                else;
                   iter;
                endif;
             endif;

             if html_1to8 = '(TRKUPD)';
                if tship <> *blanks and
                   tready = 'C' and
                   tga_fin_dt > 0 and
                   ga_es_type <> 'PU' and
                   ga_es_type <> 'EP' and
                   tapp_datab <> *blanks;

                   htmlstmt = %subst(htmlstmt:9);

                else;
                   iter;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                   // GAOPTION Fields
                when html_1to8 = '((GAOPT)';
                   byte3       = %subst(html_9to12:1:3);
                   exsr do_gaopt;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   skip_it     = *blanks;
                   exsr variables;
                   if skip_it     = 'Y';
                      iter;
                   endif;

                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    RTN_DP_Lst:  Write the List of ALL Diploma Orders
       // **************************************************************
       begsr Rtn_DP_Lst;

          //   Search using other parameters
          if condition   = 'multiple ';//Mutiple Items Found - List all
             exsr $GA_Search;          //Matches
          elseif srchByDate;
             exsr fetchOrdersByDate;
          endif;

          //   No Records Found - Put Message of No Matches
          if condition   = 'not-found';
             element_fl  = '2149';
             element_wd  = 'MSG';
             element_p1  = *blanks;
             exsr wrtpanlmsg;
          endif;

       endsr;

       // **************************************************************
       //    rtnDpoh:  Write the header for DP and CE Orders List
       // **************************************************************
       begsr rtnDpoh;

          for i = 1 To size_dpoh;

             htmlstmt    = html_dpoh(i);

             if html_1to8 = '(SHIPNG)';
                if %scan('M':gscreens:1) > 0;
                   htmlstmt = %subst(htmlstmt:9);
                else;
                   maxDpCols = maxDpCols - 1;
                   iter;
                endif;
             endif;

             if html_1to8 = '(QUANTY)';
                if %scan('Q':gscreens:1) > 0;
                   htmlstmt = %subst(htmlstmt:9);
                else;
                   maxDpCols = maxDpCols - 1;
                   iter;
                endif;
             endif;

             if html_1to8 = '(COMMNT)';
                if (%scan('I':gdipl_flds:1) > 0 or gdipl_flds = *blanks);
                   htmlstmt = %subst(htmlstmt:9);
                else;
                   maxDpCols = maxDpCols - 1;
                   iter;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   skip_it     = *blanks;
                   exsr variables;
                   if skip_it     = 'Y';
                      iter;
                   endif;

                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;

          endfor;
       endsr;

       // **************************************************************
       //    RTN_GOTO1: Write the GOTO HTML 1 Panel
       // **************************************************************
       begsr Rtn_Goto1;

       if pgm_name = 'GACGIADMT';
          testPgm = 'T';
       else;
          testPgm = '';
       endif;
          for i = 1 To 35;
             htmlstmt    = html_Goto1(i);

             select;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   exsr variables;

                   // ----Search for (ADMUSR) for ADM UserID
       htmlstmt = %scanrpl('(ADMUSR)':huserid:htmlstmt);

       //  ----Search for (PP3USR) for 3rd Party Payment Bill User
       htmlstmt = %scanrpl('(PP3USR)':h3pp_user:htmlstmt);

       //  ----Search for (USRTYP) for user type code
       htmlstmt = %scanrpl('(USRTYP)':husrtype:htmlstmt);

       //  ----Search for (KIOSK) for kiosk code
       htmlstmt = %scanrpl('(KIOSK)':hkiosk:htmlstmt);

       // ----Search for (TESTPGM)
       htmlstmt = %scanrpl('(TESTPGM)':%trim(testPgm):htmlstmt);

                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize += 81;

                   exsr checkbufr;
             endsl;

          endfor;

       endsr;

       // **************************************************************
       //    RTN_GOTO2: Write the GOTO HTML 2 Panel
       // **************************************************************
       begsr Rtn_Goto2;

          for i = 1 To 35;
             htmlstmt    = html_Goto2(i);

             select;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   exsr variables;

                   //  ----Search for ++USRP++ USERPIN field
                   idx = %scan('++USRP++':htmlstmt:1);
                   if idx         > 0;
                      clear byte12;
                      byte12      = %trim(user_id8) + '">';
     c*                  movea     byte12        htm80(idx)
                      %subst(htmlstmt:idx:%len(byte12)) = byte12;
                   endif;

                   //  ----Search for :::::::: PASSWORD field
                   idx = %scan('::::::::':htmlstmt:1);
                   if idx         > 0;
                      clear byte12;
                      byte12      = %trim(hpassword) + '">';
     c*                  movea     byte12        htm80(idx)
                      %subst(htmlstmt:idx:%len(byte12)) = byte12;
                   endif;

                   //  ----Search for (ADMUSR) for Admin UserID
                   idx = %scan('(ADMUSR)':htmlstmt:1);
                   if idx         > 0;
                      clear byte12;
                      byte12      = %trim(huserid) + '">  ';
     c*                  movea     byte12        htm80(idx)
                      %subst(htmlstmt:idx:%len(byte12)) = byte12;
                   endif;

                   //  ----Search for (OVRRAT) for override rate flag
                   idx = %scan('(OVRRAT)':htmlstmt:1);
                   if idx         > 0;
                      clear byte12;
                      byte12      = %trim(hovr_rate) + '">';
     c*                  movea     byte12        htm80(idx)
                      %subst(htmlstmt:idx:%len(byte12)) = byte12;
                   endif;

                   //  ----Search for (PSTDAT) for post dated date
                   idx = %scan('(PSTDAT)':htmlstmt:1);
                   if idx         > 0;
                      clear byte12;
                      byte12      = %trim(hpostdate) + '">';
     c*                  movea     byte12        htm80(idx)
                      %subst(htmlstmt:idx:%len(byte12)) = byte12;
                   endif;

                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize += 81;

                   exsr checkbufr;
             endsl;

          endfor;

       endsr;

       // **************************************************************
       //    RTN_GT_Lst:  Write the List of ALL Golf Tournament Orders
       // **************************************************************
       begsr Rtn_GT_Lst;

          //   Mutiple Items Found - List all Matches
          if condition   = 'multiple ';
             exsr $GA_Search;
          endif;

          //   No Records Found - Put Message of No Matches
          if condition   = 'not-found';
             element_fl  = '2149';
             element_wd  = 'MSG';
             element_p1  = *blanks;
             exsr wrtpanlmsg;
          endif;

       endsr;


       //************************************************************
       // Rtn_Histry  Write the phone call log history of calls
       //************************************************************
       begsr Rtn_Histry;

       have_cmt = *off;

       if horder# <> *blanks;

          if NOT %OPEN(dvcallsf1);
             open dvcallsf1;
          endif;

          // Setll on the low value to get oldest transcript ORDER
          setll (horder#) dvcallsf1;
          dow not %eof(dvcallsf1);
             reade (horder#) callrec;
             if %eof(dvcallsf1);
                leave;
             endif;

             // If this is the first comment output header

             if have_cmt = *off;
                have_cmt = *on;
                row  = '<tr valign=top>' +
                       '<td colspan=5 align="center">' +
                       'Credentials Customer ' +
                       'Service Comments</td></tr>' +
                       linefeed;

                BufOut = %trim(BufOut) + row;
                ByteSize = %len(%trim(BufOut));
                exsr checkBufr;
             endif;


             // TD-1 contains the Entry Date and Time
             td_cell1 = '<td>' + %trim(dspTmStamp(pdate:
                                                  ptime:
                                                  itime_zone:
                                                  '*WEB')) +
                           '</td>';
             clear td_cell2;

             // TD-3 contains the EnteredBy
             td_cell3 = '<td>' + penteredby + '</td>';


             // TD-4 contains the Call Type (source - man, aut, 400)
             td_cell4 = '<td>' + psource + '</td>';

             // TD-5 contains the Call Details
             exsr get_C_text;

             td_cell5 = '<td>';

             if cd_3to69 <> *blanks;
                td_cell5 = %trim(td_cell5) + %trim(cd_3to69) + dash +
                           %trim(pcalltext) + '</td>';
             else;
                td_cell5 = %trim(td_cell5) + %trim(pcalltext) + '</td>';
             endif;

             // Build the actual ROW - tr_cell1 + tdcell1 - 5
             row  = '<tr valign=top>' +
                    %trim(td_cell1) +
                    %trim(td_cell2) +
                    %trim(td_cell3) +
                    %trim(td_cell4) +
                    %trim(td_cell5) +
                    '</tr>' +
                    linefeed;

             BufOut = %trim(BufOut) + row;
             ByteSize = %len(%trim(BufOut));
             exsr checkBufr;
          enddo;
       endif;
       exsr sendbufr;

       endsr;


       // **************************************************************
       //    RTN_ERRS:  Write the summary of errors from the Err array
       // **************************************************************
       begsr Rtn_Errs;

          if ei > 0;
             bufout = %trimr(bufout) + err_tableh;
             bytesize += 70;
             for i = 1 To ei;
                errtext     = errs(i);

                select;

                      // ----Error message contains an error message number only

                   when err_indic = '#';
                      clear element_ds;
                      %subst(err_lit1:1:8) = ' DVERROR';
                      err_num     = err_msg#;
                      %subst(element_ds:1:17) = error_arg;
                      element_vf  = err_vf;
                      exsr WrtPanlMsg;

                      // ----Error message contains an COMMON error message
                   when err_indic = '@';
                      clear element_ds;
                      %subst(err_lit1:1:9) = ' DVCOMMON';
                      err_num     = err_msg#;
                      %subst(element_ds:1:17) = error_arg;
                      element_vf  = err_vf;
                      exsr WrtPanlMsg;

                      // ----Error message contains full text of error message
                   other;
                      BufOut = %trimr(BufOut) + errline;
                      BufOut = %trimr(BufOut) + linefeed;
                      bytesize += 95;
                endsl;

                exsr checkbufr;
             endfor;
             bufout = %trimr(bufout) + err_tablet;
             bytesize += 40;
          endif;

       endsr;
       // **************************************************************
       //    RtnAlerts: Writes a modal out with the alerts messages
       // **************************************************************
       begsr rtnAlerts;

          //make the call to cgialrt to get active alert messages
          if pgm_name = TEST_NAME;
             isTest = #TRUE;
          else;
             isTest = #FALSE;
          endif;
          callp(e) cgialrt(cfreefice: cdismissdt: cdismisstm
                           :isTest :alertMsgArray: alertCount);

          if %error;
             alertCount = 0;
             clear alertMsgArray;
          endif;

          if alertCount > 0;
             for i = 1 to size_modal;
                htmlstmt = alert_modal(i);

                select;

                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                when html_1to8 = '((BODY))';
                   for idx = 1 to alertCount;
                      alertMessage = alertMsgArray(idx);
                      BufOut = %trimr(BufOut) + alertMessage;
                      BufOut = %trimr(BufOut) + linefeed;
                      ByteSize += 1501;
                      exsr checkbufr;
                   endfor;
                other;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize += 81;
                   exsr checkbufr;
                endsl;
             endfor;
          endif;
       endsr;
       // **************************************************************
       //    RTN_HDRS: Write the RS header variables to buffer
       // **************************************************************
       begsr Rtn_Hdrs;

          for i = 1 To size_hdrs;
             htmlstmt    = html_hdrs(i);

             select;

                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize += 81;
                   exsr checkbufr;
             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    RTN_HEAD:  Write the header variables to buffer
       // **************************************************************
       begsr Rtn_Head;

          for i = 1 To size_head;
             htmlstmt    = html_head(i);

             select;

                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize += 81;
                   exsr checkbufr;
             endsl;
          endfor;

       endsr;


        //**********************************************************************
        //  RTN_JQFUNCS:  Write out JQuery functions to big for message files
        //**********************************************************************
       begsr rtn_jqFuncs;

       if testing <> #true;
          leavesr;
       endif;

       for i = 1 to size_jqfunc;
          htmlstmt = jqry_funcs(i);

          select;
          when htmlstmt = *blanks;
             iter;
          when html_1to8 = '((STOP))';
             leave;
          other;
             exsr variables;
             Bufout = %trim(BufOut) + htmlstmt + linefeed;
             bytesize = bytesize + %len(%trimr(htmlstmt)) + 1;
             exsr CheckBufr;
          endsl;
       endfor;

       endsr;

       // **************************************************************
       //    Rtn_ML_Rtn:   Routine for Municiple Mail Returned
       // **************************************************************
       begsr Rtn_ML_rtn;


          for i = 1 To size_mrtn;
             htmlstmt    = html_mrtn(i);

             //   Only display option for Mark for testing
             if html_1to8   = '(MRBTST)';
                if huserid    <> 'MRBRSS';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Barcode Input only used when mail type is selected
             if html_1to8   = '(MAILTP)';
                if hmailtype   = ' ';
                   iter;
                elseif hmailtype   = 'M' and
                       h_key      <> *blanks;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Barcode Input only used when mail type is selected
             if html_1to8   = '(MOVRES)';
                if hmailtype   = 'M' and
                       h_key      <> *blanks;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;


             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                when html_1to8 = '(OLDRES)';
                   exsr dsp_resold;
                   iter;

                when html_1to8 = '(NEWRES)';
                   exsr dsp_resnew;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;
          exsr sendbufr;

       endsr;

       // **************************************************************
       //    RTN_MN_Srh:   Routine for Municiple Searching
       // **************************************************************
       begsr Rtn_MN_Srh;

          if hsrch_tarea = *blanks;
             hsrch_tarea = '847';
          endif;

          //   Default State if Issue to DVINSTITF1 State
          if hstate      = *blanks;
             hstate      = istate;
          endif;

          for i = 1 To size_msrh;
             htmlstmt    = html_msrh(i);

             //   These lines are skipped if we are in RES2 Mode
             if html_1to8   = '(NORES2)';
                if hres2mode   = 'Y';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;
             //   Barcode Input only used for non-deleted mode
             if html_1to8   = '((BARC))';
                if hres2mode   = 'Y';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Row Size NOT used on QUICK ORDER ENTRY
             if html_1to8   = '((DELM))';
                if hres2mode   = 'Y';
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;


             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                when html_1to10 = '(SLCT_STA)';
                   the_state = hstate;
                   slct_type   = 'STA';
                   exsr do_select;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;
          exsr sendbufr;

       endsr;

       // **************************************************************
       //    RTN_MS_1:  Write the Municipal Service Detail
       // **************************************************************
       begsr Rtn_MS_1;

          for i = 1 To size_ms;
             htmlstmt    = html_ms(i);

       // NON-ACTIVE Status does NOT show Lost/Stolen Button
       if html_1to8 = '((CONDL)';
          if tstat_end <> *blanks or tstat_ini = 'F' or
             tqty > 1 or tga_paid = *blanks or
             'Expired' = GAORD_orderstat(orderds) or
              hviewonly = #true;
             iter;
          else;
             htmlstmt = %subst(htmlstmt:9);
          endif;
       endif;

       //    UN-ASSIGNED OTC permit does not show resend email
             if html_1to8   = '((CONDE)';
                if tstat_ini   = 'F' or
                       tqty        > 1   or
                       hviewonly   = #true;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

       // Cancel/Refund button, do not show if un-assigned OTC, expired
       // over three months ago, or view only
       if html_1to8 = '((CONDX)';
          if tstat_ini = 'F' or
             (tvalidto <> 0 and
              3 <= %diff(%date():%date(tvalidto):*months)) or
              hviewonly = #true;
             iter;
          else;
             htmlstmt = %subst(htmlstmt:9);
          endif;
       endif;

       // MAIL RETURNED only shows for ACTIVE Status, NOT over Counter
       if html_1to8 = '((CONDM)';
          if tstat_end <> *blanks or tsource = 'OTC' or
             tga_paid = *blanks or
             'Expired' = GAORD_orderstat(orderds) or
              hviewonly = #true;
             iter;
          else;
             htmlstmt = %subst(htmlstmt:9);
          endif;
       endif;

       // RE-ISSUE Button does not show unless status is ACTIVE and Paid and not expired
       if html_1to8   = '((CONDR)';
          if tstat_end = 'M' or tstat_end = 'R' or           // Mail Returned or Reissued
             tstat_ini = 'F' or tqty > 1 or                  // Batch OTC order
             tga_paid = *blanks or                           // Paid
             'Expired' = GAORD_orderstat(orderds) or         // Permit is expired
             hviewonly = #true;
             iter;
          else;
             htmlstmt = %subst(htmlstmt:9);
          endif;
       endif;

       //    ACTIVATE only shows for a MAIL RETUEND item
             if html_1to8   = '((CONDA)';
                if tstat_end  <> 'M' or
                       hviewonly   = #true;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //    NEW ISSUE only shows for a FREEBIE Item
             if html_1to8   = '((CONDN)';
                if tstat_ini  <> 'F' or
                       tstat_end  <> ' ' or
                       tqty        > 1   or
                       hviewonly   = #true;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //    Only show date/time paid if it is a COD order
             if html_1to8   = '(((COD))';
                if tcardtype   = 'COD';
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;

             //    Only show ((CNTR)) if this is a COUNTER order
             if html_1to8   = '((CNTR))';
                if tga_fin_us  = 'COUNTER';
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;

             //    Only show ((NCNTR) if this is a non counter order
             if html_1to8   = '((NCNTR)';
                if tga_fin_us <> 'COUNTER';
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;

             //    Only show end status date/time if it is not blank
             if html_1to8   = '(((END))';
                if tstat_end  <> *blanks;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((VRCP))';
                   the_sectn   = %subst(htmlstmt:9:2);
                   exsr rtn_vrcp;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    Rtn_Msg:  Write the batch order tax exempt error msg
       // **************************************************************
       begsr Rtn_Msg;

       byte1200 = '<br/><p><table width=650 border=0><tr><td colspan=2><h2>' +
                  'You cannot place batch permit orders at this time because ' +
                  'we do not have required documentation from your institution'+
          '. Please contact your CRM and provide the name, phone number, and ' +
                  'email address of the person in your finance/accounting ' +
                  'department responsible for handling your sales and use tax' +
                  ' filings</h2></p><p>Please  refer to our Client Service ' +
                  'Bulletin regarding this issue for more information<br/> ' +
                  '<a href="javascript:openPopup(''PDFCGI2'',null,' +
                  '''SK,USERID'',''CSBviewer'',700,600,''WHATTODO:RSS_CSBVWR,' +
                  'CSB_I:CSB_17021,CSB_P:1'');" target="_blank">New_Policy_for'+
                  '_Pre-Printed_Permits.pdf</a></p></td></tr></table>';


       BufOut = %trimr(BufOut) + byte1200;
       BufOut = %trimr(BufOut) + linefeed;
       bytesize = bytesize + %len(%trimr(byte1200)) + 1;
       exsr CheckBufr;


       endsr;

       // **************************************************************
       //    RTN_Move:     Routine for confirm MOVING of a Resident
       // **************************************************************
       begsr Rtn_Move;

          have_vehs   = 'N';
          num_vehs    = 0;
          have_pets   = 'N';
          num_pets    = 0;
          lock_addr   = 'N';

          //   Retrieve the resident record by userid
          have_res    = #false;
          exsr get_resu;
          if %found(gam_res1u);

             //   First Row - (Left TD) CURRENT Resident Information
             clear row;
             row  = '<tr><td>' +
                        '<table border=3 width=100%>' +
                        '<tr bgcolor="silver">' +
                        '<td align=left>' +
                        '<b>CURRENT RESIDENCE<b>' +
                        '<td><b>MOVE TO RESIDENCE</b>' +
                        '</td></tr>' +
                        '<tr><td valign=top ' +
                        'align=left>'+
                        %trim(rfrstname) + ' ' +
                        %trim(rmidlname) + ' ' +
                        %trim(rlastname) + ' ' +
                        %trim(rsuffix) + '<br>' +
                        %trim(raddr1) + '<br>' +
                        %trim(rcity) + ', ' +
                        %trim(rstate) + '  ' +
                        %trim(rpostcd) + '<br>' +
                        %trim(rtel#) +
                        '</td>' + linefeed;

             BufOut = %trimr(BufOut) + row;
             bytesize    = bytesize +
                               %len(%trimr(row)) + 1;
             exsr sendbufr;

             //   First Row - (Right TD) NEW Resident Name/Drop Down for Subaccnts
             clear row;
             clear work_1000;
             if trnsfr_new  = #TRUE;
                lock_addr   = 'Y';
                work_1000   = '<input type="hidden" ' +
                                  'name="SACCT" ' +
                                  'value="YY">' + linefeed +
                                  '[CREATE NEW RESIDENT]';
             elseif trnsfr_sub  = #TRUE;
                lock_addr   = 'Y';
                work_1000   = '<input type="hidden" ' +
                                  'name="SACCT" ' +
                                  'value="XX">' + linefeed +
                                  '[CREATE NEW SUB ACCOUNT]';
             elseif wfrstname   = *blanks and
                    wlastname   = *blanks;
                work_1000   = '[Resident Name Appears +
                                  Here]';
             else;
                if have_suba   = 'Y';
                   lock_addr   = 'Y';
                   zn2         = 0;
                   work_1000   = '<SELECT name="SACCT" ' +
                                     'size=1>' + linefeed;
                   for NForIdx0001 = 1 to 99;
                      zn2         = zn2 + 1;
                      if ar_sbnm(zn2)= *blanks;
                         leave;
                      endif;
                      work_1000   = %trim(work_1000) +
                                        '<option value="' +
                                        %subst(ar_sbnm(zn2):1:2) +
                                        '">' +
                                   %trim(%subst(ar_sbnm(zn2):3)) +
                                        linefeed;
                   endfor;
                   work_1000   = %trim(work_1000) +
                                     '</SELECT>' + linefeed;
                else;
                   work_1000   = '<input type="hidden" ' +
                                     'name="SACCT" ' +
                                     'value="' + hsubacct +
                                     '">' + linefeed +
                                     %trim(wfrstname) + ' ' +
                                     %trim(wmidlname) + ' ' +
                                     %trim(wlastname) + ' ' +
                                     %trim(wsuffix);
                   lock_addr   = 'Y';
                endif;
             endif;

             row  = '<td valign=top align=left>' +
                        %trim(work_1000) +
                        '<br>' + linefeed;

             BufOut = %trimr(BufOut) + row;
             bytesize    = bytesize +
                               %len(%trimr(row)) + 1;
             exsr sendbufr;

             //   Second ROW - (Right TD) NEW Resident Address Input
             if lock_addr   = 'Y';
                html_msgs   = '57131        ';
             else;
                html_msgs   = '57141        ';
             endif;
             exsr do_a_msg2;

             //   Third ROW - Radio to MOVE Resident - Yes or No
             html_msgs   = '5716         ';
             exsr do_a_msg2;

             //   Show all Vehicles eligible for moving
             if not %open(gam_veh1);
                open gam_veh1;
             endif;

             //setll (hfice : rstr_dir : rstr_name :
             //      rstr_hnum : rstr_prequ : rstr_type :
             //      rstr_postD : rstr_postQ : rstr_apt :
             //      rsubacct) ga_vehrec;
             //if not %equal(gam_veh1);
                //condition   = 'not-found';
     c*                  goto      e_veh_mov
             //else;
             //   html_msgs   = '5718         ';
             //   exsr do_a_msg2;
             //endif;

     c*    t_veh_move    tag

             //reade(n) (hfice : rstr_dir : rstr_name :
             //      rstr_hnum : rstr_prequ : rstr_type :
             //      rstr_postD : rstr_postQ : rstr_apt :
             //      rsubacct) ga_vehrec;
             //*in96 = %eof;
             //if *in96       = *on;
     c*                  goto      e_veh_mov
             //endif;

             // Build rows of data for this Vehicle
             //num_vehs    = num_vehs + 1;
             //exsr Row_MV_Veh;

     c*                  goto      t_veh_move

     c*    e_veh_mov     tag


             setll (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct) ga_vehrec;
             if %equal(gam_veh1);

                html_msgs   = '5718         ';
                exsr do_a_msg2;

                reade(n) (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct) ga_vehrec;
                dow not %eof(gam_veh1);

                // Build rows of data for this Vehicle
                num_vehs    = num_vehs + 1;
                exsr Row_MV_Veh;

                reade(n) (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct) ga_vehrec;
                enddo;
             else;
                condition   = 'not-found';
             endif;

             if num_vehs    > 0;
                BufOut = %trimr(BufOut) + '</table>';
                BufOut = %trimr(BufOut) + '</td>';
                BufOut = %trimr(BufOut) + '</tr>';
                bytesize = bytesize + 20;
                exsr checkbufr;
             endif;

             //   CHAIN to Pet Database using the RAddress key found from
             //   the RES record above.
             //   Build row - that holds the Row Header Field Names
             if not %open(gam_pet1);
                open gam_pet1;
             endif;

             //setll (hfice : rstr_dir : rstr_name :
             //      rstr_hnum : rstr_prequ : rstr_type :
             //      rstr_postD : rstr_postQ : rstr_apt :
             //      rsubacct) ga_petrec;
             //if not %equal(gam_pet1);
             //   condition   = 'not-found';
     c*                  goto      e_pet_mov
             //else;
             //   html_msgs   = '5719         ';
             //   exsr do_a_msg2;
             //endif;

     c*    t_pet_move    tag

             //reade(n) (hfice : rstr_dir : rstr_name :
             //      rstr_hnum : rstr_prequ : rstr_type :
             //      rstr_postD : rstr_postQ : rstr_apt :
             //      rsubacct) ga_petrec;
             //*in96 = %eof;
             //if *in96       = *on;
     c*                  goto      e_pet_mov
             //endif;

             // Build rows of data for this Pet
             //num_pets    = num_pets + 1;
             //exsr Row_MV_Pet;

     c*                  goto      t_pet_move

     c*    e_pet_mov     tag

             setll (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct) ga_petrec;
             if %equal(gam_pet1);

                html_msgs   = '5719         ';
                exsr do_a_msg2;

                reade(n) (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct) ga_petrec;
                dow not %eof(gam_pet1);

                // Build rows of data for this Pet
                num_pets    = num_pets + 1;
                exsr Row_MV_Pet;

                reade(n) (hfice : rstr_dir : rstr_name :
                   rstr_hnum : rstr_prequ : rstr_type :
                   rstr_postD : rstr_postQ : rstr_apt :
                   rsubacct) ga_petrec;
                enddo;
             else;
                condition   = 'not-found';
             endif;

             if num_pets    > 0;
                BufOut = %trimr(BufOut) + '</table>';
                BufOut = %trimr(BufOut) + '</td>';
                BufOut = %trimr(BufOut) + '</tr>';
                bytesize = bytesize + 20;
                exsr checkbufr;
             endif;

          endif;

       endsr;

       // **************************************************************
       //    RTN_Move2:    Routine to confirm MOVING of DELETED Resident
       // **************************************************************
       begsr Rtn_Move2;

          have_vehs   = 'N';
          num_vehs    = 0;
          have_pets   = 'N';
          num_pets    = 0;
          lock_addr   = 'N';

          //   Retrieve the resident record by userid
          have_res2   = #false;
          exsr get_res2;
          if %found(gam_res2);

             //   First Row - (Left TD) CURRENT Resident Information
             clear row;
             row  = '<tr><td>' +
                        '<table border=3 width=100%>' +
                        '<tr bgcolor="silver">' +
                        '<td align=left>' +
                        '<b>CURRENT RESIDENCE<b>' +
                        '<td><b>MOVE TO RESIDENCE</b>' +
                        '</td></tr>' +
                        '<tr><td valign=top ' +
                        'align=left>'+
                        %trim(rfrstname) + ' ' +
                        %trim(rmidlname) + ' ' +
                        %trim(rlastname) + ' ' +
                        %trim(rsuffix) + '<br>' +
                        %trim(raddr1) + '<br>' +
                        %trim(rcity) + ', ' +
                        %trim(rstate) + '  ' +
                        %trim(rpostcd) + '<br>' +
                        %trim(rtel#) +
                        '</td>' + linefeed;

             BufOut = %trimr(BufOut) + row;
             bytesize    = bytesize +
                               %len(%trimr(row)) + 1;
             exsr sendbufr;

             //   First Row - (Right TD) NEW Resident Name/Drop Down for Subaccnts
             clear row;
             clear work_1000;
             if trnsfr_new  = #TRUE;
                lock_addr   = 'Y';
                work_1000   = '<input type="hidden" ' +
                                  'name="SACCT" ' +
                                  'value="YY">' + linefeed +
                                  '[CREATE NEW RESIDENT]';
             elseif trnsfr_sub  = #TRUE;
                lock_addr   = 'Y';
                work_1000   = '<input type="hidden" ' +
                                  'name="SACCT" ' +
                                  'value="XX">' + linefeed +
                                  '[CREATE NEW SUB ACCOUNT]';
             elseif wfrstname   = *blanks and
                    wlastname   = *blanks;
                work_1000   = '[Resident Name Appears +
                                  Here]';
             else;
                if have_suba   = 'Y';
                   lock_addr   = 'Y';
                   zn2         = 0;
                   work_1000   = '<SELECT name="SACCT" ' +
                                     'size=1>' + linefeed;
                   for NForIdx0002 = 1 to 99;
                      zn2         = zn2 + 1;
                      if ar_sbnm(zn2)= *blanks;
                         leave;
                      endif;
                      work_1000   = %trim(work_1000) +
                                        '<option value="' +
                                        %subst(ar_sbnm(zn2):1:2) +
                                        '">' +
                                   %trim(%subst(ar_sbnm(zn2):3)) +
                                        linefeed;
                   endfor;
                   work_1000   = %trim(work_1000) +
                                     '</SELECT>' + linefeed;
                else;
                   work_1000   = '<input type="hidden" ' +
                                     'name="SACCT" ' +
                                     'value="' + hsubacct +
                                     '">' + linefeed +
                                     %trim(wfrstname) + ' ' +
                                     %trim(wmidlname) + ' ' +
                                     %trim(wlastname) + ' ' +
                                     %trim(wsuffix);
                   lock_addr   = 'Y';
                endif;
             endif;

             row  = '<td valign=top align=left>' +
                        %trim(work_1000) +
                        '<br>' + linefeed;

             BufOut = %trimr(BufOut) + row;
             bytesize    = bytesize +
                               %len(%trimr(row)) + 1;
             exsr sendbufr;

             //   Second ROW - (Right TD) NEW Resident Address Input
             if lock_addr   = 'Y';
                html_msgs   = '57131        ';
             else;
                html_msgs   = '57141        ';
             endif;
             exsr do_a_msg2;

             //   Third ROW - Radio to MOVE Resident - Yes or No
             html_msgs   = '5716         ';
             exsr do_a_msg2;

             //   Show all Vehicles eligible for moving/restoring
             if not %open(gam_veh2i);
                open gam_veh2i;
             endif;

             //setll (rfice : rinstance#) vehrec_2i;
             //if not %equal(gam_veh2i);
             //   condition   = 'not-found';
     c*                  goto      e_veh2mov
             //else;
             //   html_msgs   = '5718         ';
             //   exsr do_a_msg2;
             //endif;

     c*    t_veh2move    tag

             //reade (rfice : rinstance#) vehrec_2i;
             //*in96 = %eof;
             //if *in96       = *on;
     c*                  goto      e_veh2mov
             //endif;

             // Build rows of data for this Vehicle
             //num_vehs    = num_vehs + 1;
             //exsr Row_MV_Veh;

     c*                  goto      t_veh2move

     c*    e_veh2mov     tag

             setll (rfice : rinstance#) vehrec_2i;
             if %equal(gam_veh2i);

                html_msgs   = '5718         ';
                exsr do_a_msg2;

                reade (rfice : rinstance#) vehrec_2i;
                dow not %eof(gam_veh2i);

                   // Build rows of data for this Vehicle
                   num_vehs = num_vehs + 1;
                   exsr Row_MV_Veh;

                   reade (rfice : rinstance#) vehrec_2i;
                enddo;
             else;
                condition   = 'not-found';
             endif;

             if num_vehs    > 0;
                BufOut = %trimr(BufOut) + '</table>';
                BufOut = %trimr(BufOut) + '</td>';
                BufOut = %trimr(BufOut) + '</tr>';
                bytesize = bytesize + 20;
                exsr checkbufr;
             endif;

             //   CHAIN to Pet Database using the RAddress key found from
             //   the RES record above.
             //   Build row - that holds the Row Header Field Names
             if not %open(gam_pet2i);
                open gam_pet2i;
             endif;

             //setll (rfice : rinstance#) petrec_2i;
             //if not %equal(gam_pet2i);
                //condition   = 'not-found';
     c*                  goto      e_pet2mov
             //else;
                //html_msgs   = '5719         ';
                //exsr do_a_msg2;
             //endif;

     c*    t_pet2move    tag

             //reade (rfice : rinstance#) petrec_2i;
             //*in96 = %eof;
             //if *in96       = *on;
     c*                  goto      e_pet2mov
             //endif;

             // Build rows of data for this Pet
             //num_pets    = num_pets + 1;
             //exsr Row_MV_Pet;

     c*                  goto      t_pet2move

     c*    e_pet2mov     tag

             setll (rfice : rinstance#) petrec_2i;
             if %equal(gam_pet2i);

                html_msgs   = '5719         ';
                exsr do_a_msg2;

                reade (rfice : rinstance#) petrec_2i;
                dow not %eof(gam_pet2i);

                // Build rows of data for this Pet
                num_pets = num_pets + 1;
                exsr Row_MV_Pet;

                reade (rfice : rinstance#) petrec_2i;
                enddo;
             else;
                condition   = 'not-found';
             endif;

             if num_pets    > 0;
                BufOut = %trimr(BufOut) + '</table>';
                BufOut = %trimr(BufOut) + '</td>';
                BufOut = %trimr(BufOut) + '</tr>';
                bytesize = bytesize + 20;
                exsr checkbufr;
             endif;

          endif;

       endsr;

       // **************************************************************
       //     RTN_MUNI:  Write the pass-on variables to the screen
       // **************************************************************
       begsr Rtn_Muni;

          //   Search Variables Pass on
          sv_m_tarea = hsrch_tarea;
          sv_m_tnum = hsrch_tnum;
          sv_m_nam = hsrch_nam;
          sv_m_dta5 = hsrch_dta5;
          sv_m_dta6 = hsrch_dta6;
          sv_m_addr1 = haddr1;
          sv_m_mtype = hmailtype;
          clear byte400;

          byte400     = '<input type="hidden" '+
                            'name="PASSMUNI" ' +
                            'value="' +
                            %trimr(pass_muni) +
                            '">' + linefeed;
          BufOut = %trimr(BufOut) + byte400;
          exsr sendbufr;

       endsr;

       // **************************************************************
       //    Rtn_NAMLst:    Write out list of Addresses with hsrch_nam
       // **************************************************************
       begsr Rtn_NAMLst;

          //   Table Header
          html_msgs   = '5542         ';
          exsr do_a_msg2;

          if hres2mode   = 'Y';
             if NOT %open(gam_res2n);
                open gam_res2n;
             endif;
             setll (hfice : hsrch_nam) gam_res2n;

          else;
             if NOT %open(gam_res1n);
                open gam_res1n;
             endif;
             setll (hfice : hsrch_nam) gam_res1n;

          endif;

          LENLN       = %len(%trim(hsrch_nam));
          //    Setll and read the list of residents with hsrch_nam

     c*    t_nm_lst      tag
          if hres2mode   = 'Y';
             reade hfice resrec_2n;
             *in96 = %eof;
          else;
             reade hfice resrec_1n;
             *in96 = %eof;
          endif;
          //if *in96 = *off and
          dow *in96 = *off and
                 %subst(rlastname:1:LENLN) = hsrch_nam;

             //    write out table row with hyperlink
             if rsubacct    = '  ';
                rsubacct    = '00';
             endif;

             wrk_avsmlv  = rav_smlv;
             exsr get_restyp;

             if rfice       = 'V09998';
                byte400     = '<tr><td>' +
                    %trim(rlastname) + '</td><td>' +
                    %trim(rfrstname) + '&nbsp;</td><td>' +
                    '<a href="javascript:change(document' +
                    '.form1.KEY,''' + rpin_user +
                    ''');setsubmit(document.form1.ACTION,' +
                    '''SRH'');">' +
                    %trim(raddr1) + '</a></td>' +
                    '<td align=center>' +
                    %trim(res_type) + '</td></tr>';
             else;
                //   Deleted Mode uses INSTANCE# as unique key
                if hres2mode   = 'Y';
                   byte400     = '<tr><td>' +
                       %trim(rlastname) + '</td><td>' +
                       %trim(rfrstname) + '&nbsp;</td><td>' +
                       '<a href="javascript:setsubmitKEY(''' +
                       %trim(%char(rinstance#)) +
                       ''');">' +
                       %trim(raddr1) + '</a></td>' +
                       '<td align=center>' +
                       %trim(res_type) + '</td></tr>';
                else;
                   byte400     = '<tr><td>' +
                       %trim(rlastname) + '</td><td>' +
                       %trim(rfrstname) + '&nbsp;</td><td>' +
                       '<a href="javascript:setAddr(''' +
                       %trim(raddr1) + ''',''' + rsubacct +
                       ''');">' +
                       %trim(raddr1) + '</a></td>' +
                       '<td align=center>' +
                       %trim(res_type) + '</td></tr>';
                endif;
             endif;

             BufOut = %trimr(BufOut) + byte400;
             BufOut = %trimr(BufOut) + linefeed;
             bytesize    = bytesize +
                 %len(%trimr(byte400)) + 1;
             exsr CheckBufr;

     c*                  goto      t_nm_lst
          //endif;
             if hres2mode   = 'Y';
                reade hfice resrec_2n;
                *in96 = %eof;
             else;
                reade hfice resrec_1n;
                *in96 = %eof;
             endif;
          enddo;

          //    end the table
          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '</center>';
          BufOut = %trimr(BufOut) + '<p>';
          bytesize = bytesize + 20;
          exsr checkbufr;

       endsr;

       // **************************************************************
       //    Rtn_VEHLst:    Write out list of Addresses with veh plate
       // **************************************************************
       begsr Rtn_VEHLst;

          //   Table Header
          html_msgs   = '5542         ';
          exsr do_a_msg2;

          if hres2mode   = 'Y';
             if NOT %open(gam_veh2p);
                open gam_veh2p;
             endif;
             setll (hfice : hstate : hsrch_dta5) vehrec_2p;

          else;
             if NOT %open(gam_veh1p);
                open gam_veh1p;
             endif;
             setll (hfice : hstate : hsrch_dta5) vehrec_1p;

          endif;

          //    Setll and read the list of vehicles with hsrch_nam

     c*    t_veh_lst     tag
          if hres2mode   = 'Y';
             reade (hfice : hstate : hsrch_dta5) vehrec_2p;
             *in96 = %eof;
          else;
             reade (hfice : hstate : hsrch_dta5) vehrec_1p;
             *in96 = %eof;
          endif;
          //if *in96 = *off;
          dow *in96 = *off;
             // get the res record
             instance#   = vinstance#;

             if not %open(gam_res1);
                open gam_res1;
             endif;
             chain (hfice : instance#) ga_resrec;

             //    write out table row with hyperlink
             if wsubacct    = '  ';
                wsubacct    = '00';
             endif;

             wrk_avsmlv  = wav_smlv;
             exsr get_restyp;

             //   Deleted Mode uses INSTANCE# as unique key
             if hres2mode   = 'Y';
                byte400     = '<tr><td>' +
                    %trim(wlastname) + '</td><td>' +
                    %trim(wfrstname) + '&nbsp;</td><td>' +
                    '<a href="javascript:setsubmitKEY(''' +
                    %trim(%char(winstance#)) +
                    ''');">' +
                    %trim(waddr1) + '</a></td>' +
                    '<td align=center>' +
                    %trim(res_type) + '</td></tr>';
             else;
                byte400     = '<tr><td>' +
                    %trim(wlastname) + '</td><td>' +
                    %trim(wfrstname) + '&nbsp;</td><td>' +
                    '<a href="javascript:setAddr(''' +
                    %trim(waddr1) + ''',''' + wsubacct +
                    ''');">' +
                    %trim(waddr1) + '</a></td>' +
                    '<td align=center>' +
                    %trim(res_type) + '</td></tr>';
             endif;

             BufOut = %trimr(BufOut) + byte400;
             BufOut = %trimr(BufOut) + linefeed;
             bytesize    = bytesize +
                 %len(%trimr(byte400)) + 1;
             exsr CheckBufr;

     c*                  goto      t_veh_lst
          //endif;
             if hres2mode   = 'Y';
                reade (hfice : hstate : hsrch_dta5) vehrec_2p;
                *in96 = %eof;
             else;
                reade (hfice : hstate : hsrch_dta5) vehrec_1p;
                *in96 = %eof;
             endif;
          enddo;

          //    end the table
          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '</center>';
          BufOut = %trimr(BufOut) + '<p>';
          bytesize = bytesize + 20;
          exsr checkbufr;

       endsr;

       // **************************************************************
       //    Rtn_NCOA:  Display Rows of NCOA (Change of Address)
       // **************************************************************
       begsr Rtn_NCOA;

          city_UC = %xlate(xlc:xuc:icity);
          cnt_wtrn    = 0;
          cnt_wtro    = 0;

          //   Table Header
          html_msgs   = '6031         ';
          exsr do_a_msg2;

          //   Table Row Header
          html_msgs   = '6032         ';
          exsr do_a_msg2;

          //   Build row - that holds data from GAM_COA1A - NCOA Database
          if not %open(gam_coa1a);
             open gam_coa1a;
          endif;

          setll hfice gam_coa1a;
     c*    t_coa_lst     tag

          reade(n) hfice ga_coarec;
          *in96 = %eof;
          //if *in96 = *off;
          dow *in96 = *off;

             clear wkfullname;
             wkfullname  = %trim(clastname) + ', ' +
                               %trim(cfrstname);

             td_cell1    = '<td>' +
                               %trim(wkfullname)+'</td>';

             byte100     = caddr1;
             if ccity      <> city_UC;
                byte100     = %trim(byte100) + '<br>' +
                                  ccity + ', ' + cstate;
             endif;

             if cvflg_wtro  = 'Y';
                cnt_wtro    = cnt_wtro + 1;
                td_cell2    = '<td bgcolor="66FF77">' +
                                  %trim(byte100) + '</td>';
             else;
                td_cell2    = '<td>' +
                                  %trim(byte100) + '</td>';
             endif;

             byte100     = cnu_addr1;
             if cnu_city   <> city_UC;
                byte100     = %trim(byte100) + '<br>' +
                                  cnu_city + ', ' +
                                  cnu_state;
             endif;

             if cvflg_wtrn  = 'Y';
                cnt_wtrn    = cnt_wtrn + 1;
                td_cell3    = '<td bgcolor="66FF77">' +
                                  %trim(byte100) + '</td>';
             else;
                td_cell3    = '<td>' +
                                  %trim(byte100) + '</td>';
             endif;

             //    cell 4 is the effective date

             evalr byte2 = ceffect_dt;
             byte4 = ceffect_dt;
             td_cell4    = '<td>' + byte2 + '-' +
                               %trim(byte4) + '</td>';

             //    cell 5 is the weight

             td_cell5    = '<td>' +
                               %editc(cweightfac:'P') +
                               '</td>';

             //    cell 6 is the status mod

             if cstatusmod <> *blanks;
                td_cell6    = '<td>' +
                                  cstatusmod + '</td>';
             else;
                td_cell6    = '<td>&nbsp;</td>';
             endif;

             //    write out table row with hyperlink
             row  = '<tr valign=top align=left>' +
                 %trim(td_cell1) +
                 %trim(td_cell2) +
                 %trim(td_cell3) +
                 %trim(td_cell4) +
                 %trim(td_cell5) +
                 %trim(td_cell6) +
                 '</tr>';

             BufOut = %trimr(BufOut) + row;
             BufOut = %trimr(BufOut) + linefeed;
             bytesize = bytesize +
                 %len(%trimr(row)) + 1;
             exsr checkbufr;

     c*                  goto      t_coa_lst
          //endif;
             reade(n) hfice ga_coarec;
          enddo;

          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '</center>';
          BufOut = %trimr(BufOut) + '<p>';
          bytesize = bytesize + 20;
          exsr checkbufr;

          //   Outut some Total Lines
          clear row;
          row         = '<b>' +
              '# of Water Matches to OLD Address: ' +
              %trim(%editc(cnt_wtro:'3')) + '<br>' +
              '# of Water Matches to NEW Address: ' +
              %trim(%editc(cnt_wtrn:'3')) + '</b>';
          BufOut = %trimr(BufOut) + row;
          bytesize = bytesize + 150;
          exsr checkbufr;


       endsr;

       // **************************************************************
       //    Rtn_Ord_Srch1:  Write order search page
       // **************************************************************
       begsr Rtn_Ord_Srch1;

        //    Showing the OPEN diploma orders - no searching

          if (h_applid    = 'DP' or
                 h_applid    = 'CE') and
                 hcntr_dp    = 'O';
             leavesr;
          endif;

          for i = 1 To size_osrh;
             htmlstmt = html_OrdSrch(i);

             select;
             when htmlstmt = *blanks;
                iter;

             when html_1to8 = '(DOSLCT)';
                slct_type = %subst(htmlstmt:9:3);
                exsr do_select;
                iter;

             when html_1to8 = '(((MSG))';
                exsr do_a_msg2;
                iter;

             when html_1to8 = '((STOP))';
                leave;

             other;
                exsr variables;
                BufOut = %trimr(BufOut) + htmlstmt;
                BufOut = %trimr(BufOut) + linefeed;
                bytesize    = bytesize +
                    %len(%trimr(htmlstmt)) + 1;
                exsr CheckBufr;

             endsl;
          endfor;

       endsr;
       // **************************************************************
       //    RTN_OTC_P:  Write the hidden pass on variables for OTC
       // **************************************************************
       begsr Rtn_OTC_p;

          for i = 1 To size_otcp;
             htmlstmt    = html_otcp(i);

             select;

                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize += 81;
                   exsr checkbufr;
             endsl;
          endfor;

       endsr;

       // **************************************************************
       //     RTN_PASS:  Write the pass-on variables to the screen
       // **************************************************************
       begsr Rtn_Pass;

          //   Search Variables Pass on
          sv_s_sid = hsrch_sid;
          sv_s_nam = hsrch_nam;
          sv_s_ord = hsrch_ord;
          sv_s_dta5 = hsrch_dta5;
          sv_s_dta8 = hsrch_dta8;
          sv_s_tag = hsrch_tag;
          sv_s_type = hsrch_type;
          clear byte400;

          byte400     = '<input type="hidden" '+
                            'name="PASSSRCH" ' +
                            'value="' +
                            %trimr(pass_srch) +
                            '">' + linefeed;
          BufOut = %trimr(BufOut) + byte400;
          exsr sendbufr;

       endsr;

       //*******************************************************************
       //   Rtn_PassVal: Routine to pass on the search val to PP2
       //*******************************************************************
       begsr rtn_passval;

       clear byte400;
       byte400 = '<input type="hidden" name="SRCH_VAL" value="' +
                  %trim(hsrch_value) +
                 '">';

       bufout = %trim(bufout) + byte400;
       exsr sendbufr;

       endsr;

       // ******************************************************************
       //    Rtn_PayLst: Output the Paid Item List - Parking Permits
       // ******************************************************************
       begsr Rtn_PayLst;

          if show_paid  <> #TRUE;
             leavesr;
          endif;

          if NOT %open(gaorder1c);
             open(e) gaorder1c;
             *in97 = %error;
          endif;

          // ---------------------------------------------------------------
          //    Show the table of paid Parking permit orders
          // ---------------------------------------------------------------

          frstflag    = #TRUE;
          ttl_amt     = 0;
          ttl_cnt     = 0;

          if hpaid_date  = *blanks;
             kpaid_date = %dec(%subst(%editc(kpaid_date
                 :'X'):1:1)
                    + %editc(cycle_date:'X')
                       :9:0);
          else;
             kpaid_date = %dec(%xlate(' ':'0':
                   %subst(hpaid_date:2:9)):9:0);
          endif;

          date8 = %dec(%subst(%editc(kpaid_date:'X'):
                  2:8):8:0);
          dsply_date  = dspTmStamp(kpaid_date:
                                       0:0:'*DATE');

          *in90 = %tlookup(adate8mm : tabdig : tablet);
       // *CVTWNG : %Equal & %Found are not updated by %TLookup
          if *in90;
             thism = tablet;
          endif;
          *in90 = %tlookup(adate8dd : tabdig : tablet);
       // *CVTWNG : %Equal & %Found are not updated by %TLookup
          if *in90;
             thisd = tablet;
          endif;
          evalr thisy = adate8yyyy;

          kbillcycle  = thisy + thism + thisd;
          kcardtype   = 'COD ';

          // table header
          element_wd  = 'MSG';
          element_fl  = '2481';
          element_p1  = 'D';
          exsr wrtpanlmsg;

          // ----Setll on the low value to get oldest ORDER
          setll (hfice : h_applid : kbillcycle :
                kcardtype) gaorder1c;
          *in96 = not %found;

          dow *in96 <> *on;
             reade (hfice : h_applid : kbillcycle :
                   kcardtype) garec_c;
             *in96 = %eof;
             if *in96;
                leave;
             endif;

             //  Skip the OVER the Counter Items
             if tsource     = 'OTC';
                iter;
             endif;

             frstflag    = #FALSE;


       // TD-1 contains Order Number
       td_cell1 = '<td aria-labelledby="TH1"><a href="javascript:setsubmitORD(+
                   document.form1.ORDERNO, ''' + torder# +
                   ''')">' + torder# + '</a></td>';



       // TD-2 contains the Paid Date and Time
       td_cell2    = '<td aria-labelledby="TH2">' + %trim(
           dspTmStamp(tga_paiddt:
           tga_paidtm:
           itime_zone:
           '*WEB')) +
           '</td>';
       clear td_cell3;

       // TD-4 contains the Parking Permit Type
       if h_applid    = 'PP' or
              h_applid    = 'MS';
          if tqty        > 1;
             td_cell4    = '<td aria-labelledby="TH3">' +
                 %trim(%char(tqty)) + ' ' +
                 %trim(tapp_data9) + '</td>';
          else;
             td_cell4    = '<td aria-labelledby="TH3">' +
                 %trim(tapp_data9) + '</td>';
          endif;
       else;
          exsr get_option;
          if tqty        > 1;
             td_cell4    = '<td aria-labelledby="TH3">' +
                 %trim(%char(tqty)) + ' ' +
                 %trim(ga_rpt2dsc) + '</td>';
          else;
             td_cell4    = '<td aria-labelledby="TH3">' +
                 %trim(ga_rpt2dsc) + '</td>';
          endif;
       endif;

       // TD-5 contains the Amount
       td_cell5    = '<td aria-labelledby="TH4">$' +
           %trim(%EDITC(tamt_total:'3')) + '</td>';

       // TD-6 contains the Name
       clear wkfullname;
       wkfullname  = %trim(tsfrstn) + ' ' + %trim(tslastn);

       td_cell6 = '<td aria-labelledby="TH5">' + %trim(wkfullname) +
                  '&nbsp;</td>';

       // TD-7 contains the ID number
       clear wk_idnum;
       if tstudnt_id <> *blanks;
          wk_idnum    = tstudnt_id;
       elseif tssn_enc   <> *blanks;
          clear #ED_dqin;
          clear #ED_dqout;
          #ED_doss_i  = '4';
          #ED_fice_i  = tfice;
          #ED_ess_i   = tssn_enc;
          exsr $get_ED;
          ssn_last4   = #ED_uss_o;

          wk_idnum    = ' ...' + ssn_last4;
       endif;
       td_cell7 = '<td aria-labelledby="TH6">' + %trim(wk_idnum)+ '&nbsp;</td>';

       // Build the actual ROW - tr_cell1 + tdcell1 - 6
       row = '<tr>' + %trim(td_cell1) + %trim(td_cell2) + %trim(td_cell3) +
             %trim(td_cell4) + %trim(td_cell5) + %trim(td_cell6) +
             %trim(td_cell7) + '</tr>' + linefeed;

       // ---------------------------------------------------------------
       //     add the row to the buffer

             BufOut = %trimr(BufOut) + row;

             bytesize = bytesize +
                 %len(%trimr(row)) + 1;
             exsr checkbufr;

             // --total up the totatl amount for the day
             ttl_cnt     = ttl_cnt + 1;
             ttl_amt     = ttl_amt + tamt_total;

          enddo;

          // ---if we have transcript items, then put out the </table>
          if frstflag    = #TRUE;
             element_wd  = 'MSG';
             element_fl  = '2482';
             element_p1  = 'D';
             exsr wrtpanlmsg;
          else;

             row  = '<tr>' +
                 '<td><b>TOTALS</b></td>' +
                 '<td>&nbsp;</td>' +
                 '<td>&nbsp;</td>' +
                 '<td>&nbsp;</td>' +
                 '<td><b>' +
                 %trim(%editc(ttl_amt:'3')) +
                 '</b></td><td colspan=2><b>' +
                 %trim(%editc(ttl_cnt:'3')) +
                 ' Orders</b></td></tr></table>' +
                 linefeed;
             BufOut = %trimr(BufOut) + row;
             exsr sendbufr;
          endif;


       endsr;

       // **************************************************************
       //    RTN_PP_1:  Write the Parking Permit Detail
       // **************************************************************
       begsr Rtn_PP_1;

          for i = 1 To size_pp;
             htmlstmt    = html_pp(i);

             //    Do not show the go back button if the user came in via sha (not signed in)
             if html_1to8   = '((NOSHA)';
                if sha_valid   = #true;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

       // NON-ACTIVE Status does NOT show Lost/Stolen Button
       if html_1to8 = '((CONDL)';
          if tstat_end <> *blanks or tstat_ini = 'F' or
             tqty > 1 or tga_paid = *blanks or
             'Expired' = GAORD_orderstat(orderds) or
              hviewonly = #true or tformid = 'LPRPERMIT';
             iter;
          else;
             htmlstmt = %subst(htmlstmt:9);
          endif;
       endif;

       //    UN-ASSIGNED OTC permit does not show resend e-mail
             if html_1to8   = '((CONDE)';
                if tstat_ini   = 'F' or
                       tqty        > 1   or
                       hviewonly   = #true;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

       // Cancel/Refund button, do not show if un-assigned OTC, expired
       // over three months ago, or view only
       if html_1to8 = '((CONDX)';
          if tstat_ini = 'F' or
             (tvalidto <> 0 and
              3 <= %diff(%date():%date(tvalidto):*months)) or
              hviewonly = #true;
             iter;
          else;
             htmlstmt = %subst(htmlstmt:9);
          endif;
       endif;

       // MAIL RETURNED only shows for ACTIVE Status, NOT over Counter
       if html_1to8 = '((CONDM)';
          if tstat_end <> *blanks or tsource = 'OTC' or
             tga_paid = *blanks or
             'Expired' = GAORD_orderstat(orderds) or
              hviewonly = #true or tformid = 'LPRPERMIT';
             iter;
          else;
             htmlstmt = %subst(htmlstmt:9);
          endif;
       endif;

       // RE-ISSUE Button does not show unless status is ACTIVE and Paid and not expired
       if html_1to8   = '((CONDR)';
          if tstat_end = 'M' or tstat_end = 'R' or           // Mail Returned or Reissued
             tstat_ini = 'F' or tqty > 1 or                  // Batch OTC order
             tga_paid = *blanks or                           // Paid
             'Expired' = GAORD_orderstat(orderds) or         // Permit is expired
             hviewonly = #true or tformid = 'LPRPERMIT';
             iter;
          else;
             htmlstmt = %subst(htmlstmt:9);
          endif;
       endif;

       //    ACTIVATE only shows for a MAIL RETUEND item
             if html_1to8   = '((CONDA)';
                if tstat_end  <> 'M' or
                       hviewonly   = #true;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //    NEW ISSUE only shows for a FREEBIE Item
             if html_1to8   = '((CONDN)';
                if tstat_ini  <> 'F' or
                       tstat_end  <> ' ' or
                       tqty        > 1   or
                       hviewonly   = #true;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //    Only show date/time paid if it is a COD order
             if html_1to8   = '(((COD))';
                if tcardtype   = 'COD';
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;

             if html_1to8   = '(((RCV))';
                if trcvbl_dt  <> 0;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;


       // Only show for Orders that were mailed
       if html_1to8 = '(MAILED)';
          if tsource <> 'OTC' and ttempperm# = *blanks;
             htmlstmt = %subst(htmlstmt:9:72);
          else;
             iter;
          endif;
       endif;

       // Only show for Handed out Over the Counter Orders
       if html_1to8 = '(HANDED)';
          if (tsource = 'OTC' and tqty = 1) or
             ttempperm# <> *blanks;
             htmlstmt = %subst(htmlstmt:9:72);
          else;
             iter;
          endif;
       endif;


       //    Only show end status date/time if it is not blank
             if html_1to8   = '(((END))';
                if tstat_end  <> *blanks;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((VRCP))';
                   the_sectn   = %subst(htmlstmt:9:2);
                   exsr rtn_vrcp;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    RTN_PP_Pay:  Write not Found /  Detail of UnPaid item
       // **************************************************************
       begsr Rtn_PP_Pay;

          if show_paid   = #TRUE;
             leavesr;
          endif;

          //   Mutiple Items Found - List all Matches
          if condition   = 'multiple ';
             exsr $PP_Search;
             leavesr;
          endif;

          //   No Records Found - Put Message of No Matches
          if condition   = 'not-found';
             element_fl  = '2149';
             element_wd  = 'MSG';
             element_p1  = *blanks;
             exsr wrtpanlmsg;
             leavesr;
          endif;

          //   Unique Items Found - Display Detail of root order
          if condition   = 'unique   ';
             exsr get_order;

             if torder#    <> troot_ord#;
                horder#     = troot_ord#;
                exsr get_order;
             endif;

             //   Get the # of orders for the root order #
             if not %open(gaorder1t);
                open gaorder1t;
             endif;

             clear hveh_qty;
             clear rate_total;
             clear rate_handl;
             clear rate_800;

             setll (hfice : horder#) garec_t;
             reade(n) (hfice : horder#) garec_t;
             dow not %eof;
                if gmult_ords  = 'Y';
                   //   Keep track of any info we need on multiple orders here
                   if tstat_end   = *blanks and
                          tbillcycle  = *blanks;
                      have_unpd   = #true;
                   elseif tbillcycle <> *blanks;
                      have_paid   = #true;
                   endif;
                   if tstat_end   = *blanks or
                          tbillcycle <> *blanks;
                      rate_total += tamt_total;
                      rate_handl += tamt_handl;
                      rate_800 += tamt_800;
                   endif;
                else;
                   hveh_qty += 1;
                   rate_total += tamt_total;
                   rate_handl += tamt_handl;
                   rate_800 += tamt_800;
                endif;
                reade(n) (hfice : horder#) garec_t;
             enddo;

             //    chain back to the root order #

             chain(n) horder# garec_#;
             *in90 = not %found;

             for i = 1 To size_ppp;
                htmlstmt    = html_ppp(i);

                //    Application Specific Conditions

                if html_1to8   = '((PP_AP)' or
                       html_1to8   = '((MS_AP)' or
                       html_1to8   = '((MT_AP)' or
                       html_1to8   = '((GT_AP)' or
                       html_1to8   = '((DP_AP)';
                   if %subst(html_1to8:3:2) <> h_applid;
                      iter;
                   else;
                      evalr byte72 = htmlstmt;
                      htmlstmt = byte72;
                   endif;
                endif;

       // Cancel/Refund button, do not show if un-assigned OTC, expired
       // over three months ago
       if html_1to8 = '((CONDX)';
          if tstat_end = *blanks and
             (tvalidto = 0 or
              3 > %diff(%date():%date(tvalidto):*months));
             htmlstmt = %subst(htmlstmt:9);
          else;
             iter;
          endif;
       endif;

       //    Only show UnCancel button if canceled

                if html_1to8   = '((CONDU)';
                   if tstat_end   = 'X';
                      evalr byte72 = htmlstmt;
                      htmlstmt = byte72;
                   else;
                      iter;
                   endif;
                endif;

                //    Only show date/time paid if it is a COD order

                if html_1to8   = '(((COD))';
                   if tcardtype   = 'COD';
                      evalr byte72 = htmlstmt;
                      htmlstmt = byte72;
                   else;
                      iter;
                   endif;
                endif;

                if html_1to8   = '(((RCV))';
                   if trcvbl_dt  <> 0;
                      evalr byte72 = htmlstmt;
                      htmlstmt = byte72;
                   else;
                      iter;
                   endif;
                endif;


       // Only show for Orders that were mailed
       if html_1to8 = '(MAILED)';
          if tsource <> 'OTC' and ttempperm# = *blanks;
             htmlstmt = %subst(htmlstmt:9:72);
          else;
             iter;
          endif;
       endif;

       // Only show for Handed out Over the Counter Orders
       if html_1to8 = '(HANDED)';
          if (tsource = 'OTC' and tqty = 1) or
             ttempperm# <> *blanks;
             htmlstmt = %subst(htmlstmt:9:72);
          else;
             iter;
          endif;
       endif;



                select;
                   when htmlstmt = *blanks;
                      iter;

                   when html_1to8 = '((VRCP))';
                      the_sectn   = %subst(htmlstmt:9:2);
                      exsr rtn_vrcp;
                      iter;

                   when html_1to8 = '(((MSG))';
                      exsr do_a_msg2;
                      iter;
                   when html_1to8 = '((STOP))';
                      leave;

                   other;
                      exsr variables;
                      BufOut = %trimr(BufOut) + htmlstmt;
                      BufOut = %trimr(BufOut) + linefeed;
                      bytesize    = bytesize +
                          %len(%trimr(htmlstmt)) + 1;
                      exsr CheckBufr;

                endsl;
             endfor;

          endif;


       endsr;

       // **************************************************************
       //    RTN_PP_Hot:  Write List Items PP Hot Sheet
       // **************************************************************
       begsr Rtn_PP_Hot;


       // Calculate date 10 months ago
       cutoff = %dec(%date() - %months(10):*iso);


       //   Mutiple Items Found - List all Matches
          if condition   = 'multiple ';
             //                   exsr      $PP_Search
             exsr $GA_Search;
          endif;

          //   No Records Found - Put Message of No Matches
          if condition   = 'not-found';
             element_fl  = '2149';
             element_wd  = 'MSG';
             element_p1  = *blanks;
             exsr wrtpanlmsg;
          endif;

       endsr;

       // **************************************************************
       //    RTN_PP_Lst:  Write Search/List Items for Parking Permits
       // **************************************************************
       begsr Rtn_PP_Lst;

          //   Mutiple Items Found - List all Matches
          if condition   = 'multiple ';
             if not searchLpr;
                exsr $PP_Search;
             else;
                exsr ppSearchLpr;
             endif;
          endif;

          //   No Records Found - Put Message of No Matches
          if condition   = 'not-found';
             element_fl  = '2149';
             element_wd  = 'MSG';
             element_p1  = *blanks;
             exsr wrtpanlmsg;
          endif;

       endsr;

       // **************************************************************
       //    RTN_PP_Sts:  Write PP Statistical Tables
       // **************************************************************
       begsr Rtn_PP_Sts;

          //if show_stats  = #FALSE;
     c*                  goto      E_Stat_Rtn
          //endif;

          if show_stats = #true;

          if NOT %open(gatrack2);
             open(e) gatrack2;
             *in97 = %error;
          endif;

          frstflag    = #TRUE;

          adate8      = hyear4 + hmonth2 + '99';
          the_date = %dec(%subst(%editc(the_date
              :'X'):1:1)
                + %xlate(' ':'0':
                  adate8) :9:0);

          element_wd  = 'MSG';
          element_fl  = '2535';
          element_p1  = 'M';
          element_p2  = 'Y';
          exsr wrtpanlmsg;

          setll (hfice : h_applid : the_date) gatrack2;

          // ----Loop until fice, month or year changes

     c*    Top_PPStat    tag
          //reade hfice track_rec;
          //*in96 = %eof;
          //date8 = %dec(%subst(%editc(sdate:'X'):
          //        2:8):8:0);
          //if adate8mm   <> hmonth2 or
          //       adate8yyyy <> hyear4;
          //   *in96       = *on;
          //endif;
          //if *in96;
     c*                  goto      End_PPStat
          //endif;

          reade hfice track_rec;
          dow not %eof(gatrack2);

          date8 = %dec(%subst(%editc(sdate:'X'):
                  2:8):8:0);

          if adate8mm <> hmonth2 or
             adate8yyyy <> hyear4;
             leave;
          endif;

          frstflag    = #FALSE;

          // ----Build PP Statistical Rows
          clear row;

          //  Permit Type

          td_cell1    = '<td>' + s_text_1
                           + '</td>';

          //  Date
          td_cell2 = '<td>' + %trim(
                            dspTmStamp(rlastactd:
                                       0:0:
                                       '*DATE')) +
                         '</td>';

          //  Credit Card Count
          //                   eval      td_cell3 = '<td>' +
          //                             %trim(%editc(s#_ga_cc:'3')) + '</td>'

          //  COD Count
          //                   eval      td_cell4 = '<td>' +
          //                             %trim(%editc(s#_ga_cod:'3')) + '</td>'

          row = '<tr valign=top>' +
              %trim(td_cell1) +
              %trim(td_cell2) +
              %trim(td_cell3) +
              %trim(td_cell4) +
              '</tr>';

          //                   eval      ttl_ccs     = ttl_ccs  + s#_ga_cc
          //                   eval      ttl_cods    = ttl_cods + s#_ga_cod

          BufOut = %trimr(BufOut) + row;
          bytesize    = bytesize +
              %len(%trimr(row));
          exsr checkbufr;

     c*                  goto      Top_PPStat

     c*    End_PPStat    tag

          reade hfice track_rec;
          enddo;

          if frstflag    = #TRUE;
             element_wd  = 'MSG';
             element_fl  = '2540';
             element_p1  = 'M';
             element_p2  = 'Y';
             exsr wrtpanlmsg;
          else;
             row  = '<tr>' +
                 '<td><b>TOTALS</b></td>' +
                 '<td>&nbsp;</td><td><b>' +
                 %trim(%editc(ttl_ccs:'3')) +
                 '</b></td><td><b>' +
                  %trim(%editc(ttl_cods:'3')) +
                 '</b></td>' +
                 '</tr>' + linefeed;
             BufOut = %trimr(BufOut) + row;
             bytesize    = bytesize +
                 %len(%trimr(row));
             exsr checkbufr;
          endif;

          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '<p>';

          endif;                   //show_stats = #true;
     c*    E_Stat_Rtn    tag
          exsr sendbufr;

       endsr;

       // **************************************************************
       //    RTN_PT_Edt     Write the Pet Info to be added/edited
       // **************************************************************
       begsr Rtn_PT_Edt;

          for i = 1 To size_petd;
             htmlstmt = html_petd(i);

             //   Only display ((ADD)) line for Adding

             if html_1to8   = '(((ADD))';
                if h_kname    <> ' ';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Only display ((UPD)) line for Editing/Updating

             if html_1to8   = '(((UPD))';
                if h_kname     = ' ';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Only input   ((ORD-Y) - Have an Order# already this field it not
             //                           allowed to be updated

             if html_1to8   = '((ORD-Y)';
                if hlastordr# <> ' ';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Only display ((ORD-N) - Do NOT have an Order# yet, so this field
             //                           should be shown as an editable field

             if html_1to8   = '((ORD-N)';
                if hlastordr#  = ' ';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                when html_1to10 = '(SLCT_MTH)';
                   slct_type   = 'RMM';
                   exsr do_select;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;
          exsr sendbufr;

       endsr;

       // **************************************************************
       //    RTN_REPT1: Set up the Title for a table and writes
       //               table with the title and drop down list box
       //               containing report file.
       // **************************************************************
       begsr Rtn_Rept1;

          last_fice   = hfice;
          rpt_fice    = hfice;

          //                                              Parking Permit Reports
          if h_applid    = 'PP';
             rpt_title   = 'Parking ' +
                                'Permit Requests';
             rpt_slct    = 'PP1';
             rpt_hdr     = 'P';
             slct_type   = 'RPT';
             exsr do_select;
          endif;

          //                                              Muni Reports
          if h_applid    = 'MS';
             rpt_title   = 'Municipal +
                                Requests';
             rpt_slct    = 'MS1';
             rpt_hdr     = 'S';
             slct_type   = 'RPT';
             exsr do_select;
          endif;

          //                                              Diploma Order Reports
          if h_applid    = 'DP';
             rpt_title   = 'Diploma ' +
                                'Order Requests';
             rpt_slct    = 'DP1';
             rpt_hdr     = 'R';
             slct_type   = 'RPT';
             exsr do_select;
          endif;

          //                                              Certification Reports
          if h_applid    = 'CE';
             rpt_title   = 'Certification ' +
                                'Order Requests';
             rpt_slct    = 'CE1';
             rpt_hdr     = 'C';
             slct_type   = 'RPT';
             exsr do_select;
          endif;

          // ---Close the </SELECt> and </Table>
          element_wd  = 'MSG';
          element_fl  = '5248';
          element_p1  = 'R';
          exsr wrtpanlmsg;

       endsr;

       // ****************************************************************
       //    RTN_REPTPP:  Display the different Reports that may be
       //                 Emailed as a PDF Report for the PP application
       //    4/6/07 - added MS to use these reports
       //
       //                 1.  Report for Remaining Over the Counter Stock
       //                 2.  Accouting Report by Day, by Paid Users
       // ****************************************************************
       begsr Rtn_ReptPP;

          if h_applid   <> 'PP' and
                 h_applid   <> 'MS';
             leavesr;
          endif;

          for i = 1 To size_rpPP;
             htmlstmt    = html_rpPP(i);

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                when html_1to10 = '((NOTLPR))';
                   if (glive_lpr = 'Y');
                      iter;
                   endif;
                   htmlstmt = %subst(htmlstmt:11);
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

                when html_1to8 = '(SLTMNTH';
                   slct_type   = 'MTH';
                   exsr do_select;
                   iter;
                when html_1to8 = '(SLTYEAR';
                   slct_type   = 'YEA';
                   exsr do_select;
                   iter;
                when html_1to8 = '(SLTDAYS';
                   slct_null   = 'Y';
                   slct_type   = 'DAY';
                   exsr do_select;
                   iter;
                when html_1to8 = '((STOP))';
                   leave;

                other;
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;
          exsr sendbufr;

       endsr;

       // **************************************************************
       //    RTN_Resend:   Display the Resend Options
       // **************************************************************
       begsr Rtn_Resend;

          if hemail      = *blanks;
             hemail = temail;
          endif;

          for i = 1 To size_snd;
             htmlstmt    = html_snd(i);


           if html_1to8 = '(TMPDAT)';
              if NOT %open(gaoption1);
                 open gaoption1;
              endif;
              chain (hfice:h_applid:hrecid:husrtype:hproduct)
                    ga_parms;
              if (h_applid = 'PP' or h_applid = 'MS') and
                 cycle_date >= ga_tempdat and ga_tempdat > 0 and
                 ga_tempdys  > 0 and tstat_end = *blanks;
                 if NOT %open(dvclientf2);
                    open dvclientf2;
                 endif;
                 chain(n) (huserid) authority;
                 if %found(dvclientf2);
                    byte2 = 'A';
                 endif;
                 if %scan('T':cau_ga_pp:1) > 0 or
                    %scan('T':cau_ga_ms:1) > 0;
                    htmlstmt = %subst(htmlstmt:9:72);
                 else;
                  iter;
                 endif;
              else;
                 iter;
              endif;
           endif;

           if html_1to8 = '(NOTEMP)';
              if NOT %open(gaoption1);
                 open gaoption1;
              endif;
              chain (hfice:h_applid:hrecid:husrtype:hproduct)
                    ga_parms;
              if (h_applid = 'PP' or h_applid = 'MS') and
                 cycle_date  < ga_tempdat and
                 ga_tempdys  > 0 and tstat_end = *blanks;
                 if NOT %open(dvclientf2);
                    open dvclientf2;
                 endif;
                 chain(n) (huserid) authority;
                 if %found(dvclientf2);
                    byte2 = 'A';
                 endif;
                 if %scan('T':cau_ga_pp:1) > 0 or
                    %scan('T':cau_ga_ms:1) > 0;
                    htmlstmt = %subst(htmlstmt:9:72);
                 else;
                  iter;
                 endif;
              else;
                 iter;
              endif;
           endif;


             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '((OPTS))';
                   exsr rtn_SndOpt;
                   iter;

                when html_1to8 = '(((RTR))';
                   exsr Rtn_Router;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;
          exsr sendbufr;

       endsr;

       // **************************************************************
       //    Rtn_ResErr:  Display Rows of Residents with Errors
       // **************************************************************
       begsr Rtn_ResErr;

          //   Only show this routine if the Error_Button was set on
          if res_errors <> 'Y';
             leavesr;
          endif;

          clear h_key;

          //   Table Header AND Code Legend
          html_msgs   = '5531         ';
          exsr do_a_msg2;

          //   Table Row Header 1&2
          html_msgs   = '5532         ';
          exsr do_a_msg2;
          html_msgs   = '5533         ';
          exsr do_a_msg2;

          //   Switch this list to SQL list


       // Set sort field
       select;
       when hsort_fld = 'ravstat';
          order_by = 'ravstat';
       when hsort_fld = 'rerrcode';
          order_by = 'rerrcode';
       when hsort_fld = 'rlastname';
          order_by = 'rlastname';
       when hsort_fld = 'raddr1';
          order_by = 'rstr_name, rstr_dir, rstr_hnum';
       other;
          order_by = 'raction, rerrcode, rlastname, raddr1';
       endsl;

       // Build the query

       eval sql_stmt = 'SELECT rfice, rpin_user, ravstat, rerrcode, +
                               rfrstname, rlastname, raddr1, +
                               rtel#, rlastactd +
                        FROM gam_res1p +
                        WHERE rfice = ''' + hfice + '''+
                        ORDER BY ' + order_by;

        aFICE     =   rFICE;
        aPIN_USER =   rPIN_USER;
        aAVSTAT   =   rAVSTAT;
        aERRCODE  =   rERRCODE;
        aFRSTNAME =   rFRSTNAME;
        aLASTNAME =   rLASTNAME;
        aADDR1    =   rADDR1;
        aTEL#     =   rTEL#;
        aLASTACTD =   rLASTACTD;

       // SQL injection is not a possibility in this program because
       // the program has only one prepare statement and the construct
       // of this statement is shown above.  It uses only hfice, a
       // 6 character field, and order_by which is 40 characters.
       // order_by is always set by the program above, and is never
       // set by a user input value

       exec sql
          prepare av_reserr from :sql_stmt;
       exec sql
          declare cur_reserr cursor for av_reserr;

       exec sql
          open cur_reserr;

       DOW SQLCODE = 0;
       exec sql
          fetch cur_reserr
             into :afice, :apin_user, :aavstat, :aerrcode, :afrstname,
                  :alastname, :aaddr1, :atel#, :alastactd;



             clear byte30;
             if rfice       = 'V09998';
                byte30      = ravstat + ' - ' +
                                  dspTmStamp(rlastactd:
                                             0:0:'*DATE');
             else;
                byte30      = ravstat;
             endif;

             clear wkfullname;
             wkfullname  = %trim(rlastname) + ', ' +
                               %trim(rfrstname);

             //    write out table row with hyperlink
             row  = '<tr align=left><td><b>&nbsp;' +
                        %trim(byte30) +
                        '</b></td><td><b>&nbsp;' +
                        %trim(rerrcode) +
                        '</b></td><td><b>' +
                        %trim(wkfullname) +
                        '</b></td><td><a href="'+
                 'javascript:setsubmitRES(''' +
                 rpin_user + ''',''DSP'');">' +
                 %trim(raddr1) + '</a></td><td>' +
                 '<nobr>' + %trim(rtel#) + '&nbsp;' +
                 '</nobr></td></tr>';

             BufOut = %trimr(BufOut) + row;
             BufOut = %trimr(BufOut) + linefeed;
             bytesize = bytesize +
                 %len(%trimr(row)) + 1;
             exsr checkbufr;

          enddo;

          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '</center>';
          BufOut = %trimr(BufOut) + '<p>';
          exsr checkbufr;


       endsr;

       // **************************************************************
       //    RTN_Router:    Display the Router History Data
       // **************************************************************
       begsr Rtn_Router;

          // ------------------------------------------------------------
          //     Display the router information for this Order#
          // ------------------------------------------------------------
          if NOT %open(garouter1b);
             open(e) garouter1b;
             *in97 = %error;
          endif;

          // ----Position File and Loop until Order# is Different
          setll horder# garouter_b;
          *in96 = not %found;

          dow *in96 <> *on;
             reade horder# garouter_b;
             *in96 = %eof;
             if *in96;
                leave;
             endif;

             clear byte50;
             clear exp_date;
             clear expires;

             gaRouterTextDs = gartr_getActionText(saction:sapplid:
                                                  srtr_data:ga_tempdys);

             byte50 = gaRouterTextDs.text;
             if (gaRouterTextDs.subText <> *blank);
                byte50 = %trim(byte50) + '<br>' + gaRouterTextDs.subText;
             endif;

             clear byte6;
             select;
                when srpymethod = 'E';
                   byte6       = 'E-mail';
                when srpymethod = 'F';
                   byte6       = 'Fax   ';
                other;
                   byte6       = '&nbsp;';
             endsl;

             date8 = %dec(%subst(%editc(sreplydate:'X'):
                     2:8):8:0);
             time6 = sreplytime;

             // ----build table row line
             byte500 = '<tr><td><b>' +
                           DspTmStamp(sreplydate:
                                      sreplytime:
                                      itime_zone:
                                      '*WEB') +
                               '</b></td><td><b>' +
                               %trim(byte50) +
                               %trim(expires) +
                               '</b></td><td><b>' +
                               byte6 +
                               '</b></td><td><b>' +
                               saddress +
                               '</td></tr>';

             BufOut = %trimr(BufOut) + byte500;
             BufOut = %trimr(BufOut) + linefeed;
             bytesize    = bytesize +
                               %len(%trimr(byte500)) + 2;
             exsr checkbufr;
          enddo;

       endsr;

       // **************************************************************
       //    RTN_RS_Edt     Write Residence/Sub Info to be added/edited
       // **************************************************************
       begsr Rtn_RS_Edt;

          for i = 1 To size_resd;
             htmlstmt = html_resd(i);

             //   Only display ((HID)) line for City/State/Zip

             if html_1to8   = '(((HID))';
                if hfice       = 'V09998';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Only display ((INP)) line for City/State/Zip

             if html_1to8   = '(((INP))';
                if hfice      <> 'V09998';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Only display ((ADD)) line for Adding

             if html_1to8   = '(((ADD))';
                if h_key      <> ' ';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Only display ((UPD)) line for Editing/Updating

             if html_1to8   = '(((UPD))';
                if h_key       = ' ';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to10 = '(SLCT_SAL)';
                   slct_type   = 'SAL';
                   exsr do_select;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;
          exsr sendbufr;

       endsr;

       // **************************************************************
       //    RTN_SNDOPT: Write the Transcript ReSend Options
       // **************************************************************
       begsr Rtn_SndOpt;

          //   Scan the router to see the type of e-mails we have sent
          clear actions;
          idx = 1;

          if not %open(garouter1b);
             open(e) garouter1b;
          endif;

          // ----Position File and Loop until Order# is Different
          setll (horder#) garouter_b;

          dow not %eof(garouter1b);
             reade (horder#) garouter_b;
             if %eof(garouter1b);
                leave;
             endif;
             if 0 = %lookup(saction:actions);
                actions(idx) = saction;
                idx += 1;
             endif;
          enddo;

          for i2 = 1 To 10;
             if ar_opt(i2)  = '((STOP))';
                leave;
             endif;

             slct_line = ar_opt(i2);

             idx = %lookup(slct_valu1:actions);
             if idx = 0;
                if slct_valu1 = 'O' and tga_paiddt > 0 and tsource <> 'OTC';
                   //   Display order receipt no matter what if order was paid for
                else;
                   iter;
                endif;
             endif;

             clear field_150;
             field_150   = '<option value="' +
                               slct_valu1 +
                               '">' + slct_name1;

             BufOut = %trimr(BufOut) + field_150;
             BufOut = %trimr(BufOut) + linefeed;

             nbytes = 1 + %len(%trimr(field_150));
             ByteSize += nbytes;
             exsr CheckBufr;
          endfor;
          exsr sendbufr;

       endsr;

       //**************************************************************
       // RTN_SRCHN:  Write the Top Search Portion of the Screen (NEW)
       //**************************************************************
       begsr Rtn_Srchn;
       if (h_applid = 'DP' or h_applid = 'CE') and hcntr_dp = 'O';
          leavesr;
       endif;

       for i=1 to size_srch;
          htmlstmt = html_srchn(i);

          if html_1to8 = '((PP_AP)' or html_1to8   = '((MS_AP)' or
              html_1to8 = '((DP_AP)' or html_1to8   = '((CE_AP)';
             if %subst(html_1to8:3:2) <> h_applid;
                iter;
             endif;
             htmlstmt = %subst(htmlstmt:9);
          endif;

          if html_1to5 = '(!PP)';
             if h_applid = 'PP';
                iter;
             else;
                htmlstmt = %subst(htmlstmt:6);
             endif;
          endif;

          select;
          when html_1to8 = '(((MSG))';
             exsr do_a_msg2;
          when html_1to8 = '((STOP))';
             leave;
          other;
             exsr variables;
             bufout = %trim(bufout) + htmlstmt +  linefeed;
             bytesize = bytesize + %len(%trimr(htmlstmt)) + 1;
             exsr CheckBufr;
          endsl;
       endfor;

       endsr;

       // **************************************************************
       //    RTN_SRCH1:  Write the Top Search Portion of the Screen
       // **************************************************************
       begsr Rtn_Srch1;

       if testing = #true;
          exsr rtn_srchn;
          leavesr;
       endif;

       //    Showing the OPEN diploma orders - no searching

          if (h_applid    = 'DP' or
                 h_applid    = 'CE') and
                 hcntr_dp    = 'O';
             leavesr;
          endif;

          for i = 1 To size_srch;
             htmlstmt    = html_srch(i);

             //    Application Specific Conditions - PP
             if html_1to8   = '((PP_AP)' or
                    html_1to8   = '((MS_AP)' or
                    html_1to8   = '((DP_AP)' or
                    html_1to8   = '((CE_AP)';
                if %subst(html_1to8:3:2) <> h_applid;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;
                when html_1to8 = '((STOP))';
                   leave;

                other;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    RTN_SRCH2:  Top Search Portion of the Screen - PP CODs
       // **************************************************************
       begsr Rtn_Srch2;

          for i = 1 To size_srch2;
             htmlstmt    = html_srch2(i);

             //    Application Specific Conditions

             if html_1to8   = '((PP_AP)' or
                    html_1to8   = '((MS_AP)';
                if %subst(html_1to8:3:2) <> h_applid or
                       1 > %scan('V':gscreens);
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             elseif html_1to8   = '((MT_AP)' or
                    html_1to8   = '((GT_AP)';
                if %subst(html_1to8:3:2) <> h_applid;
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             elseif html_1to8   = '(((SID))';
                if 0 < %scan('I':gname_flds) or
                       hfice       = '008918' or
                       hfice       = '025395' or
                       hfice       = '004480' or
                       hfice       = '001199';
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;


             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;
                when html_1to8 = '(LSTDAYS';
                   slct_type   = 'IPD';
                   exsr do_select;
                   iter;
                when html_1to8 = '(SLTMNTH';
                   slct_type   = 'MTH';
                   exsr do_select;
                   iter;
                when html_1to8 = '(SLTYEAR';
                   slct_type   = 'YEA';
                   exsr do_select;
                   iter;
                when html_1to8 = '(SLTDAYS';
                   slct_type   = 'DAY';
                   exsr do_select;
                   iter;
                when html_1to8 = '((STOP))';
                   leave;

                other;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   bytesize    = bytesize +
                       %len(%trimr(htmlstmt)) + 1;
                   exsr CheckBufr;

             endsl;
          endfor;

       endsr;

       // **************************************************************
       //    RTN_Street  Write the street list to the user
       // **************************************************************
       begsr Rtn_Street;

          //    valid streets are listed in gam_str1

          //    Open the file
          if not %open(gam_str1);
             open gam_str1;
          endif;

          //    Set on first street for this fice

          setll hfice ga_strrec;

          if NOT %found(gam_str1);
             leavesr;
          endif;

          dou %eof(gam_str1);
             reade(n) hfice ga_strrec;
             if %eof(gam_str1);
                leave;
             endif;

             vald_addr1 = svaldaddr1;
             vald_addr2 = svaldaddr2;

             //    Use data to create a table row
             BufOut = %trim(BufOut) + '<tr><td>' +
                          '<a href="javascript:edit(''' +
                          sstr_name + sstr_type + sstr_postd +
                          ''');">' + %trim(sstr_name) +
                          '</a></td><td align=center>&nbsp;' +
                          %trim(sstr_type) + '</td>' +
                          '<td align=center>&nbsp;' +
                          %trim(sstr_postd) +
                          '</td><td>' + vald_dir1 +
                          '&nbsp;' + vald_str1 + '- ' +
                          vald_end1 + '<br>' +
                          vald_dir2 + '&nbsp;' +
                          vald_str2 + '- ' + vald_end2 +
                          '</td></tr>' + linefeed;

             //    Update the buffer length (estimate)
             BufOutLn = %len(%trimr(BufOut));
             Bytesize = bytesize + bufoutln;

             //    Check buffer length
             exsr CheckBufr;

          enddo;


       endsr;

       // **************************************************************
       //    RTN_Stredt  Write the street to be edited
       // **************************************************************
       begsr Rtn_Stredt;

          for i = 1 To size_str;
             htmlstmt = html_str(i);

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                when html_1to8   = '(SLTSTY)';
                   slct_type   = 'STY';
                   exsr do_select;
                   iter;

                when html_1to8   = '(SLTDIR1' or
                       html_1to8   = '(SLTDIR2';
                   slct_type   = 'DIR';
                   if html_1to8   = '(SLTDIR1';
                      the_dir     = hstr_dir;
                   elseif html_1to8   = '(SLTDIR2';
                      the_dir     = hstr_postd;
                   endif;
                   exsr do_select;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;
          exsr sendbufr;


       endsr;

       // **************************************************************
       //    Rtn_TELLst:    Write out list of Addresses with ksrch_tel#
       // **************************************************************
       begsr Rtn_TELLst;

          //   Table Header
          html_msgs   = '5542         ';
          exsr do_a_msg2;

          //    Setll and read the list of residents with key_res1t

          if NOT %open(gam_res1t);
             open gam_res1t;
          endif;

          setll (hfice : ksrch_tel#) gam_res1t;
     c*    t_tl_lst      tag
          reade hfice resrec_1t;
          dow not %eof(gam_res1t);
          //*in96 = %eof;
          //if *in96 = *off and
          //       rtel# = ksrch_tel#;

          if rtel# = ksrch_tel#;
             // write out table row with hyperlink
             if rsubacct    = '  ';
                rsubacct    = '00';
             endif;

             wrk_avsmlv  = rav_smlv;
             exsr get_restyp;

             byte400     = '<tr><td>' +
                 %trim(rlastname) + '</td><td>' +
                 %trim(rfrstname) + '&nbsp;' +
                 '</td><td>' +
                 '<a href="javascript:setAddr(''' +
                 %trim(raddr1) + ''',''' + rsubacct +
                 ''');">' +
                 %trim(raddr1) + '</a></td>' +
                 '<td align=center>' +
                 %trim(res_type) + '</td></tr>';

             BufOut = %trimr(BufOut) + byte400;
             BufOut = %trimr(BufOut) + linefeed;
             bytesize    = bytesize +
                 %len(%trimr(byte400)) + 1;
             exsr CheckBufr;

     c*                  goto      t_tl_lst
          endif;
          reade hfice resrec_1t;
          enddo;

          //    end the table
          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '</center>';
          BufOut = %trimr(BufOut) + '<p>';
          bytesize = bytesize + 20;
          exsr checkbufr;

       endsr;


       //**********************************************************************
       // Rtn_Trak:   Routine for Displaying IMB Tracking data
       //*********************************************************************
       begsr Rtn_Trak;

       // Make sure this is a permit that might have tracking data
       if tsource <> 'OTC';
          have_trak = #false;
          have_del  = #false;
          idx = 0;

          if not %open(imbtrack1j);
             open imbtrack1j;
          endif;

          setll (torder_yyy:torder#) trackrec;
          dow not %eof(imbtrack1j);
              reade (torder_yyy:torder#) trackrec;
              idx += 1;
              if %eof(imbtrack1j) or idx > 50;
                 leave;
              endif;

              if have_trak = #false;
                 html_msgs = '2176';             // table header
                 exsr do_a_msg2;
                 have_trak = #true;
              endif;

              if ucity <> *blanks;
                 location = %trim(ucity) + ', ' + ustate;
              else;
                 location = upostcd;
              endif;

              if not %open(imbcodes1);             // Get the Sort Desc
                 open imbcodes1;
              endif;
              chain (uop_code) imbcodes;
              if %found(imbcodes1);
                 byte80 = cdescrp;
              else;
                 byte80 = uop_code;
              endif;

              select;
              when ugroupcd = 'D' and have_del = #false;
                   have_del  = #true;
              when ugroupcd = 'D';
                   ugroupcd = 'S';
              when ugroupcd = 'F' or ugroupcd = 'N' or
                   ugroupcd = 'E' or ugroupcd = 'R';
                   have_del  = #false;
              endsl;

              idx2 = %lookup(ugroupcd:dgroupcd);   // Get the Sort Desc
              if idx2 <= 0;
                 idx2 = 1;  // Default 'Sorting Scan' description is in position 1
              endif;

              byte400  = '<tr valign=top><td>' + %trim(
                         DspTmStamp(uentrydate:uentrytime:
                                    itime_zone:'*WEB')) +
                         '</td><td>' +
                         %trim(location) + '</td><td>' +
                         %trim(ddescrp(idx2)) + '</td></tr>' + linefeed;
       //       if %subst(uorder#:1:1) = 'T';
       //          byte400 = %trim(byte400) +
       //                    %char(usequence) + ' -&nbsp;';
       //       endif;
       //       byte400 = %trim(byte400) +
       //                  %trim(byte80) +
       //                  '</td></tr>' + linefeed;

              BufOut   = %trim(BufOut) + byte400;
              bytesize += %len(%trimr(byte400));
              exsr checkbufr;
          enddo;
          if have_trak = #true;
             html_msgs = '2177';                    // table ender
             exsr do_a_msg2;
          endif;
       endif;

       endsr;



       // **************************************************************
       //    RTN_VE_Edt     Write the Vehcile Info to be added/edited
       // **************************************************************
       begsr Rtn_VE_Edt;

          //   Default State of Issue to DVINSTITF1 State
          if hveh_pliss  = *blanks;
             hveh_pliss  = istate;
          endif;

          for i = 1 To size_vehd;
             htmlstmt = html_vehd(i);

             //   Only display (MSTEST) for MSTEST fice
             //    NOW Lake Forest as well until evanston is told about it

             if html_1to8   = '(MSTEST)';
                if hfice       = 'MSTEST' or
                       hfice       = 'V60045';
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;

             //   Only display (SENR_D) when senior discount is Drivers License
             //   This is also the default option

             if html_1to8   = '(SENR_D)';
                if gdisa_senr  = 'D' or
                       gdisa_senr  = *blanks;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;

             //   Only display (SENR_A) when senior discount is Admin Only

             if html_1to8   = '(SENR_A)';
                if gdisa_senr  = 'A';
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                else;
                   iter;
                endif;
             endif;

             //   Only display ((ADD)) line for Adding

             if html_1to8   = '(((ADD))';
                if h_kplate   <> ' ';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Only display ((UPD)) line for Editing/Updating

             if html_1to8   = '(((UPD))';
                if h_kplate    = ' ';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Only input   ((ORD-Y) - Have an Order# already this field it not
             //                           allowed to be updated

             if html_1to8   = '((ORD-Y)';
                if hlastordr# <> ' ';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Only display ((ORD-N) - Do NOT have an Order# yet, so this field
             //                           should be shown as an editable field

             if html_1to8   = '((ORD-N)';
                if hlastordr#  = ' ';
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             //   Only display (XVCL_O) if we NOT excluding the choice of
             //   vehicle class "Other"

             if html_1to8   = '(XVCL_O)';
                if 0 < %scan('O':gexc_vcats);
                   iter;
                else;
                   evalr byte72 = htmlstmt;
                   htmlstmt = byte72;
                endif;
             endif;

             select;
                when htmlstmt = *blanks;
                   iter;

                when html_1to10 = '(SLCT_VMK)';
                   slct_type   = 'VMK';
                   exsr do_select;
                   iter;

                when html_1to10 = '(SLCT_VMD)';
                   slct_type   = 'VMD';
                   exsr do_select;
                   iter;

                when html_1to10 = '(SLCT_STA)';
                   the_state = hveh_pliss;
                   slct_type   = 'STA';
                   exsr do_select;
                   iter;

                when html_1to8 = '(((MSG))';
                   exsr do_a_msg2;
                   iter;

                when html_1to8 = '((STOP))';
                   leave;

                other;
                   bytesize += 80;
                   exsr variables;
                   BufOut = %trimr(BufOut) + htmlstmt;
                   BufOut = %trimr(BufOut) + linefeed;
                   ByteSize += 1;
                   exsr CheckBufr;

             endsl;
          endfor;
          exsr sendbufr;

       endsr;

       // **************************************************************
       //    Rtn_ReVePe:  Display Table/Row of Vehicles at Address
       //                 Search Vehicle Database by either Address or
       //                 by Plate.  If search by plate and found, then
       //                 use the address from the plate to show all the
       //                 vehicles at that address.
       // **************************************************************
       begsr Rtn_ReVePe;

          num_vehs    = -1;
          num_pets    = -1;

          //   If we found multiple results that were searched then
          //   list all the names/addresses that we found instead
          select;
             when use_adrsrh  = 'Y';
                exsr Rtn_ADRLst;
                leavesr;
             when use_namsrh  = 'Y';
                exsr Rtn_NAMLst;
                leavesr;
             when use_vehsrh  = 'Y';
                exsr Rtn_VEHLst;
                leavesr;
             when use_telsrh  = 'Y';
                exsr Rtn_TELLst;
                leavesr;
             when h_key       = *blanks;
                leavesr;
          endsl;

          //   The Quick Order Entry Screen does not show any Resident Data
          if hscrn_next = 'MSQ';
             leavesr;
          endif;

          //   Create the first Table of the Resident Info and some Actions
          exsr do_res_tbl;

          //   CHAIN to Vehicle Database using the Addreess key found from
          //   the RES record above.
          //   11/12/08 MRB Switched to lookup vehicles by instance
          //   Build row - that holds the Row Header Field Names
          // --beg
          //if rstr_name  = *blanks;
     c*                  goto      e_veh_lst
          //endif;

          //num_vehs    = 0;
          //html_msgs   = '5543         ';
          //exsr do_a_msg2;

          //if not %open(gam_veh1i);
          //   open gam_veh1i;
          //endif;

          //setll (rfice : rinstance#) vehrec_1i;
          //if not %equal(gam_veh1i);
          // condition   = 'not-found';
     c*                  goto      e_veh_lst
          //endif;

     c*    t_veh_read    tag

          //reade(n) (rfice : rinstance#) vehrec_1i;
          //*in96 = %eof;
          //if *in96       = *on;
     c*                  goto      e_veh_lst
          //endif;

          // Build rows of data for this Vehicle
          //exsr Row_MS_Veh;
          //num_vehs    = num_vehs + 1;

     c*                  goto      t_veh_read

     c*    e_veh_lst     tag

          if rstr_name <> *blanks;

             num_vehs    = 0;
             html_msgs   = '5543         ';
             exsr do_a_msg2;

             if not %open(gam_veh1i);
                open gam_veh1i;
             endif;

             setll (rfice : rinstance#) vehrec_1i;
             if %equal(gam_veh1i);

                reade(n) (rfice : rinstance#) vehrec_1i;
                dow not %eof(gam_veh1i);

                // Build rows of data for this Vehicle
                exsr Row_MS_Veh;
                num_vehs    = num_vehs + 1;

                reade(n) (rfice : rinstance#) vehrec_1i;
                enddo;

             else;
                condition   = 'not-found';
             endif;
          endif;

          if num_vehs    > -1;
             row  = '<tr align=center>' +
                        '<td colspan=8><b>' +
                 '<input type="button" ' +
                 'value="Add Vehicle" onClick="' +
                 'javascript:setsubmitPLT('''','''',' +
                 '''EDT'');"></td></tr>' + linefeed;
             BufOut = %trimr(BufOut) + row;
             bytesize = bytesize +
                 %len(%trimr(row)) + 1;
             exsr checkbufr;
          endif;

          BufOut = %trimr(BufOut) + '</table>';
          bytesize = bytesize + 20;
          exsr checkbufr;

          //   CHAIN to Pet Database using the RAddress key found from
          //   the RES record above.
          //   11/12/08 MRB Switched to lookup vehicles by instance
          //   Build row - that holds the Row Header Field Names
          if not %open(gam_pet1i);
             open gam_pet1i;
          endif;

          //if rstr_name  = *blanks or
          //       gdisa_pets = 'Y';
     c*                  goto      e_pet_lst
          //endif;

          //num_pets    = 0;
          //html_msgs   = '5544         ';
          //exsr do_a_msg2;

          //setll (rfice : rinstance#) petrec_1i;
          //if not %equal(gam_pet1i);
          //   condition   = 'not-found';
     c*                  goto      e_pet_lst
          //endif;

     c*    t_pet_read    tag

          //reade(n) (rfice : rinstance#) petrec_1i;
          //*in96 = %eof;
          //if *in96       = *on;
     c*                  goto      e_pet_lst
          //endif;

          //   Build rows of data for this Pet
          //exsr Row_MS_Pet;
          //num_pets    = num_pets + 1;

     c*                   goto      t_pet_read

     c*     e_pet_lst     tag

          if rstr_name <> *blanks or
             gdisa_pets <> 'Y';

             num_pets    = 0;
             html_msgs   = '5544         ';
             exsr do_a_msg2;

             setll (rfice : rinstance#) petrec_1i;
             if %equal(gam_pet1i);

                reade(n) (rfice : rinstance#) petrec_1i;
                dow not %eof(gam_pet1i);

                // Build rows of data for this Pet
                exsr Row_MS_Pet;
                num_pets    = num_pets + 1;

                reade(n) (rfice : rinstance#) petrec_1i;
                enddo;
             else;
                condition   = 'not-found';
             endif;
          endif;

          if num_pets    > -1;
             row  = '<tr align=center>' +
                        '<td colspan=8><b>' +
                 '<input type="button" ' +
                 'value="Add Pet" onClick="' +
                 'javascript:setsubmitNAM('''','''',' +
                 '''EDT'');">' +
                 '</td></tr>' +  linefeed;
             BufOut = %trimr(BufOut) + row;
             BufOut = %trimr(BufOut) + '</table>';
             bytesize = bytesize +
                 %len(%trimr(row)) + 1;
             exsr checkbufr;
          endif;

          // ---end

          //   11/12/08 MRB Uncommented this section because we do not need
          //                to end the table.
          //   11/18/08 MRB We do need to end one table, but not the
          //                second one
          //   03/16/09 MRB Now I think we need two end both tables but
          //                I stopped the end td and tr after the veh routine
          //  3/16/09 MRB moved change user here so it will only display
          //              when we are showing one resident info
          BufOut = %trimr(BufOut) + '</td>';
          BufOut = %trimr(BufOut) + '</tr>';
          html_msgs   = '5540Zz       ';
          exsr do_a_msg2;
          BufOut = %trimr(BufOut) + '</table>';
          //     BufOut        cat       '</center>':0 BufOut
          //     BufOut        cat       '<p>':0       BufOut
          bytesize = bytesize + 8;
          exsr checkbufr;


       endsr;

       // **************************************************************
       //                 DELETED DB
       //    Rtn_ReVe2:   Display Table/Row of Vehicles at Address
       //                 Search Vehicle Database by either Address or
       //                 by Plate.  If search by plate and found, then
       //                 use the address from the plate to show all the
       //                 vehicles at that address.
       // **************************************************************
       begsr Rtn_ReVe2;

          num_vehs    = -1;
          num_pets    = -1;

          //   If we found multiple results that were searched then
          //   list all the names/addresses that we found instead
          select;
             when use_adrsrh  = 'Y';
                exsr Rtn_ADRLst;
                leavesr;
             when use_vehsrh  = 'Y';
                exsr Rtn_VEHLst;
                leavesr;
             when use_namsrh  = 'Y';
                exsr Rtn_NAMLst;
                leavesr;
             when h_key       = *blanks;
                leavesr;
          endsl;

          //   Create the first Table of the Resident2 Info and some Actions
          exsr do_res2tbl;

          //   CHAIN to Vehicle Database using the Addreess key found from
          //   the RES2 record above.
          //   Build row - that holds the Row Header Field Names
          // --beg
          //if rstr_name  = *blanks;
     c*                  goto      e_veh2lst
          //endif;

          //num_vehs    = 0;
          //html_msgs   = '5543         ';
          //exsr do_a_msg2;

          //if not %open(gam_veh2i);
          //   open gam_veh2i;
          //endif;

          //setll (rfice : rinstance#) vehrec_2i;
          //if not %equal(gam_veh2i);
          //   condition   = 'not-found';
     c*                  goto      e_veh2lst
          //endif;

     c*    t_veh2read    tag

          //reade (rfice : rinstance#) vehrec_2i;
          //*in96 = %eof;
          //if *in96 = *on;
     c*                  goto      e_veh2lst
          //endif;

          // Build rows of data for this Vehicle
          //exsr Row_MS_Veh;
          //num_vehs    = num_vehs + 1;

     c*                  goto      t_veh2read

     c*    e_veh2lst     tag

          if rstr_name <> *blanks;

             num_vehs    = 0;
             html_msgs   = '5543         ';
             exsr do_a_msg2;

             if not %open(gam_veh2i);
                open gam_veh2i;
             endif;

             setll (rfice : rinstance#) vehrec_2i;
             if %equal(gam_veh2i);

                reade (rfice : rinstance#) vehrec_2i;
                dow not %eof(gam_veh2i);

                // Build rows of data for this Vehicle
                exsr Row_MS_Veh;
                num_vehs    = num_vehs + 1;

                reade (rfice : rinstance#) vehrec_2i;
                enddo;

             else;
                condition   = 'not-found';
             endif;
          endif;

          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '</td>';
          BufOut = %trimr(BufOut) + '</tr>';
          bytesize = bytesize + 20;
          exsr checkbufr;

          //   CHAIN to Pet2 Database using the RAddress key found from
          //   the RES2 record above.
          //   Build row - that holds the Row Header Field Names
          //if rstr_name  = *blanks or
          //       gdisa_pets = 'Y';
     c*                  goto      e_pet2lst
          //endif;

          //if not %open(gam_pet2i);
          //   open gam_pet2i;
          //endif;

          //num_pets    = 0;
          //html_msgs   = '5544         ';
          //exsr do_a_msg2;

          //setll (rfice : rinstance#) petrec_2i;
          //if not %equal(gam_pet2i);
          //   condition   = 'not-found';
     c*                  goto      e_pet2lst
          //endif;

     c*    t_pet2read    tag

          //reade (rfice : rinstance#) petrec_2i;
          //*in96 = %eof;
          //if *in96       = *on;
     c*                  goto      e_pet2lst
          //endif;

          //   Build rows of data for this Pet
          //exsr Row_MS_Pet;
          //num_pets    = num_pets + 1;

     c*                  goto      t_pet2read

     c*    e_pet2lst     tag

          if rstr_name <> *blanks or
                 gdisa_pets <> 'Y';

             if not %open(gam_pet2i);
                open gam_pet2i;
             endif;

             num_pets    = 0;
             html_msgs   = '5544         ';
             exsr do_a_msg2;

             setll (rfice : rinstance#) petrec_2i;
             if %equal(gam_pet2i);
                reade (rfice : rinstance#) petrec_2i;
                Dow not %eof(gam_pet2i);

                // Build rows of data for this Pet
                exsr Row_MS_Pet;
                num_pets    = num_pets + 1;

                reade (rfice : rinstance#) petrec_2i;
                enddo;
             else;
                condition   = 'not-found';
             endif;
          endif;



       // ---end

          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '</td>';
          BufOut = %trimr(BufOut) + '</tr>';
          html_msgs   = '5540Zz       ';
          exsr do_a_msg2;
          BufOut = %trimr(BufOut) + '</table>';
          BufOut = %trimr(BufOut) + '</center>';
          BufOut = %trimr(BufOut) + '<p>';
          bytesize = bytesize + 20;
          exsr checkbufr;


       endsr;

       // **************************************************************
       //     RTN_VRCP: Write order recap sections
       // **************************************************************
       begsr Rtn_vrcp;

          select;

                //   Output the product section

             when the_sectn   = 'GP';
                if not %open(GAOPTION1);
                   open(e) gaoption1;
                   *in90 = %error;
                endif;

                clear text_prod;
                clear text_secp;
                clear text_ship;
                clear text_hndl;
                clear text_800;
                clear text_totl;

                clear amt_prod;
                clear amt_secp;
                clear amt_ship;
                clear amt_hndl;
                clear amt_800;
                clear amt_totl;

                //    format the base product

                chain (hfice : h_applid : hrecid : husrtype :
                      hproduct) ga_parms;
                if %found;
                   if ga_applid   = 'PP' or
                          ga_applid   = 'MS';
                      text_prod   = %trim(tapp_data9) + '<br>';
                   elseif ga_text_1  <> *blanks;
                      text_prod   = %trim(ga_text_1) + '<br>';
                   else;
                      text_prod   = %trim(ga_text) + '<br>';
                   endif;

                   //   Check if we need to add the quantity to the description
                   if tqty        > 1;
                      text_prod   = %trim(%char(tqty)) + ' ' +
                                        %trim(text_prod);
                   endif;

                   //  6/10/09 MRB Code Below is used when someone orders 5 of the SAME
                   //              product and we write 5 order records
                   exsr set_rate;
                   if hveh_qty    > 1;
                      text_prod   = %trim(%editc(hveh_qty:'3')) +
                                        ' ' + %trim(text_prod);
                      amt_prod    = %trim(%editc(
                                        work_rate * hveh_qty:'3')) +
                                         '<br>';
                   else;
                      amt_prod    =  %trim(%editc(work_rate:'3')) +
                                         '<br>';
                   endif;

                else;
                   if hveh_qty    > 1;
                      text_prod   = %trim(%editc(hveh_qty:'3')) +
                                        ' ' + %trim(tapp_data9) +
                                        '<br>';
                      amt_prod    = %trim(%editc(
                                        tamt_total * hveh_qty:'3'))
                                         + '<br>';
                   else;
                      text_prod   = %trim(tapp_data9) + '<br>';
                      amt_prod    = %trim(%editc(tamt_total:'3'))
                                         + '<br>';
                   endif;
                endif;

                //  06/12/09 MRB Since we added mult orders, show canceled text
                //               when the user is on the payment screen if canceled

                if gmult_ords  = 'Y' and
                       hscrn_type  = 'PAY' and
                       tstat_end  <> *blanks;
                   amt_prod    = 'Canceled<br>';
                endif;

         if tvalidfr <> 0;
            text_prod = %trim(text_prod) + '&nbsp;&nbsp;&nbsp;Valid: ' +
                                           dspTmStamp(tvalidfr:0:0:'*DATE');
            if tvalidto <> 0;
               text_prod = %trim(text_prod) + ' To: ' +
                                           dspTmStamp(tvalidto:0:0:'*DATE');
            endif;
            text_prod = %trim(text_prod) + '<br />';
            amt_prod  = %trim(amt_prod) + '<br />';
         endif;




       //    format the secondary products lines & costs

                if tsecprods  <> *blanks;
                   for i4 = 1 To 24;

                      byte1       = %subst(tsecprods:i4:1);
                      if byte1       = *blanks;
                         leave;
                      endif;

                      the_recid   = trecid;
                      the_value   = byte1;
                      chain (hfice : h_applid : the_recid : husrtype :
                            the_value) ga_parms;
                      if %found;
                         text_secp   = %trim(text_secp) +
                                           %trim(ga_text) + '<br>';
                         exsr set_rate;
                         amt_secp    = %trim(amt_secp) +
                                           %trim(%editc(work_rate:'3')) +
                                           '<br>';
                      endif;

                   endfor;

                   //  06/10/09 MRB For mult orders - Only list all items in the
                   //               order when user is on the Items Waiting Payment
                   //               screen

                elseif gmult_ords  = 'Y' and
                       hscrn_type  = 'PAY';
                   //   If this is Items waiting payment screen, the we have root
                   //   if that changes we need to add a check to get root here

                   //   Get the # of orders for the root order #
                   if not %open(gaorder1t);
                      open gaorder1t;
                   endif;

                   setll (hfice : horder#) garec_t;
                   reade(n) (hfice : horder#) garec_t;
                   dow not %eof;
                      reade(n) (hfice : horder#) garec_t;
                      if %eof;
                         leave;
                      endif;

                      text_secp   = %trim(text_secp) +
                                        %trim(tapp_data9) + ' - ' +
                                        %trim(torder#) + '<br>';

                      //   If an order has been canceled, it cannot be marked as paid
                      //   and should not be included in the totals

                      if tstat_end  <> *blanks;
                         amt_secp    = %trim(amt_secp) +
                                           'Canceled<br>';
                      else;
                         amt_secp    = %trim(amt_secp) +
                                           %trim(%editc(tamt_total:'3')) +
                                           '<br>';
                      endif;
                   enddo;

                   //    chain back to the root order #

                   chain(n) horder# garec_#;
                   *in90 = not %found;

                endif;


                //    format the shipping line & cost

                the_recid   = 'GS';
                the_value   = hship;
                chain (hfice : h_applid : the_recid : husrtype :
                      the_value) ga_parms;
                if %found;
                   text_ship   = %trim(ga_text) + '<br>';
                   amt_ship    =  %trim(%editc(ga_rate:'3')) +
                                      '<br>';
                endif;

                //    format the handling charges

                if rate_handl  > 0;
                   text_hndl   = %trim(ghandl_wrd) + '<br>';
                   amt_hndl    =  %trim(%editc(rate_handl:'3'))+
                                      '<br>';
                endif;

                if rate_800    > 0;
                   text_800    = 'Telephone Operator Surcharge'+
                                      '<br>';
                   amt_800     =  %trim(%editc(rate_800:'3'))+
                                      '<br>';
                endif;

                //    put them all together for the order total line & cost

                text_totl   = 'Order Total';
                amt_totl    = '$' +
                                   %trim(%editc(rate_total:'3'))+
                                   '<br>';

                clear byte900;
                byte900     = '<tr valign=top>' +
                                  '<td width=150>' +
                                  '<b>Purchased:</b>';

                //   Button to mark COD as paid, and also to print a COD pdf permit
                if tcardtype   = 'COD';
                   //   only show paid button(s) on 'Items Waiting Payment' for MS
                   if (tapplid    <> 'MS' or
                           (tapplid    = 'MS' and
                            hscrn_type = 'PAY')) AND
                      //  06/11/09 MRB Limited Mark as Paid to Items Waiting Payment
                      //               when Multiple orders are allowed
                          (gmult_ords <> 'Y' or
                           (gmult_ords = 'Y' and
                            hscrn_type = 'PAY'));
                      if tstat_ini  <> 'F' and
                             (tstat_end  <> 'X' or
                              have_unpd   = #true ) and
                             torder#     = troot_ord# and
                             (tga_paid   = *blanks or
                              tga_paid   = 'R') and
                         //  09/17/09 MRB Make sure order does not have a problem
                             tready     <> 'P' and
                         //  03/01/11 MRB Make sure order is not in use
                             (tinuseby   = *blanks or
                              tinuseby   = huserid) and
                             hviewonly   = #false;

                         byte900     = %trim(byte900) +
                                           '<center>' +
                                           '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
                                           '<b><input type="button" ' +
                                           'value="Mark as Paid" ' +
                                           'onClick="javascript:';

                         //  If this is a temp permit #, call PPwin to assign new one
       if 'T' = %subst(tapp_data8:1:1) and tapplid = 'PP';
          byte900 = %trim(byte900) + 'PPpaywin(''PP_ASS'', 450, 325, ' +
                    'document.form1.CHECKNO.value);">';
       else;
          byte900 = %trim(byte900) + 'chk_COD();">';
       endif;

       //  THE CHECK # FIELD
       byte900 = %trim(byte900) + '<br><label for="CHECKNO"><b>Check#:</b>' +
                 '</label><input name="CHECKNO" ' +
                 'id="CHECKNO" type="text" size=10 maxlength=10 value="">';
       endif;

       //   Mark as 3rd Party Payment
       if gthird_pp   = 'Y' and tga_paid    = ' ' and
           tstat_end   = ' ' and hviewonly   = #false;
          byte900     = %trim(byte900) +
              '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
              '<b><input type="button" ' +
              'value="3rd Party Payment" ' +
              'onClick="javascript:chk_3PP();"><br>' +
              '<SELECT name="PP3USER" aria-label="Third Party User" size=1>';

          //  Write out Buffer - Before we Start 3 Party Receivable list
                         BufOut = %trimr(BufOut) + byte900;
                         BufOut = %trimr(BufOut) + linefeed;
          bytesize    = %len(%trimr(BufOut));
          exsr checkbufr;

          clear byte900;
          slct_type   = '3RD';
          exsr do_select;
          byte900     = %trim(byte900) +
              '</SELECT></center>';
       endif;
       endif;
       ENDIF;

       //    Only display temp permit if not past expiration date and
       //    COD is enabled
       //  05/19/09 MRB Added Check that cycle date >= temp date, before
       //               this we just checked that the temp date was not
       //               blank, allowing admin users to print temp permits
       //               early
       chain (hfice : h_applid : hrecid : husrtype :
                      hproduct) ga_parms;
       IF cycle_date >= ga_tempdat and ga_tempdat > 0 and
          ga_tempdys > 0 and tga_paid <> *blanks and tstat_end = *blanks and
          ttempperm# = *blanks and tsource <> 'OTC' and hviewonly = #false;

          // Calculate the expiration date
          if tga_paid <> 'R' and tga_paid <> 'C';
             // Use PAID ORDER Date as Original Date
             date8 = tga_paiddt;
          elseif trcvbl_dt <> 0;       // this is a 3rd party payment
             date8 = trcvbl_dt;
          else;
             date8 = telig_date;
          endif;
          exsr bld_exp_dt;

          if cycle_date <= exp_date;
             //   Calculate sha value for print temp permit button (when present)
             if pgm_name = TEST_NAME;
                byte900 = %trim(byte900) + '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
                          '<b><input type="button" value="Print Temp Permit"' +
                          'onclick="javascript:prnt_pdf(''ADM_MULTMP'');">';

             else;
                sha_ssn   = %trim(torder#);
                sha_salt  = %trim(isha_salt);
                sha_bytes = sha_hashSha1(sha_ssn:sha_salt);

                byte900     = %trim(byte900) +
                 '<p><b><input type="button" value="Print Temp Permit"' +
                 'onClick="javascript:prnt_temp(''MULTMP'',''' +
                 %trim(sha_bytes) + ''');"></p>';
             endif;
          endif;
       ENDIF;

       //    Only display extend temp permit if not canceled and user
       //    has authority to do so
       // if gaord_prmtstat(orderds) <> 'EXPIRED' and
       //    cycle_date >= ga_tempdat and
       //    ga_tempdat > 0 and
       //    ga_tempdys > 0 and
       //    tga_paid <> *blanks and
       //    tstat_end = *blanks and
       //    ttempperm# = *blanks and
       //    tsource <> 'OTC' and
       //    hviewonly = #false;

                if cycle_date >= ga_tempdat and
                       ga_tempdat  > 0 and
                       ga_tempdys  > 0 and
                       tga_paid   <> *blanks  and
                       tstat_end   = *blanks  and
                       ttempperm# = *blanks and
                       tsource    <> 'OTC' and
                       hviewonly   = #false;

                   if NOT %open(dvclientf2);
                      open(e) dvclientf2;
                      *in97 = %error;
                   endif;
                   chain(n) huserid authority;
                   *in90 = not %found;
                   if (%scan('T':cau_ga_pp:1) > 0 or
                           %scan('T':cau_ga_ms:1) > 0);
                      //    Calculate sha value for print temp permit button (when present)

          if pgm_name = TEST_NAME;
             byte900 = %trim(byte900) + '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
                       '<b><input type="button" value="Print Extended Temp"' +
                       'onclick="javascript:prnt_pdf(''ADM_EXTTMP'',''' +
                       %trim(cycle_dt_a) + ''');"><br>Valid for ' +
                       %char(ga_tempdys) + ' Days' + '</p>';

          else;

             sha_ssn   = %trim(torder#) + %trim(cycle_dt_a);
             sha_salt  = %trim(isha_salt);
             sha_bytes = sha_hashSha1(sha_ssn:sha_salt);

             byte900 = %trim(byte900) + '<p><b>' +
                    '<input type="button" value="Print Extended Temp" +
                     onClick="javascript:prnt_temp(''MULTMP'',''' +
                    %trim(sha_bytes) + %trim(cycle_dt_a) +
                    ''');"><br>Valid for ' +
                    %char(ga_tempdys) + ' Days' + '</p>';
          endif;

                   endif;
                endif;

                //    Only display Print Permit this order was a PDF permit order
                if tga_paid   <> *blanks  and
                       tstat_end   = *blanks  and
                       tga_fin_us  = 'PDFPERMIT' and
                       hviewonly   = #false;

         if pgm_name = TEST_NAME;
            byte900 = %trim(byte900) + '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
                      '<b><input type="button" value="Print Permit"' +
                      'onclick="javascript:prnt_pdf(''ADM_PPPASS'');">';

         else;

       //    Calculate sha value for print temp permit button (when present)

                      sha_ssn   = %trim(torder#);
                      sha_salt  = %trim(isha_salt);
                      sha_bytes =
                             sha_hashSha1(sha_ssn:sha_salt);

                      byte900     = %trim(byte900) +
                                        '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
                                        '<b><input type="button" ' +
                                        'value="Print Permit"' +
                                        'onClick="javascript:' +
                                        'prnt_pdf(''PPPASS'',''' +
                                        %trim(sha_bytes) +
                                        ''');">';
         endif;
                endif;

                //    Only display PRINT RECEIPT if MS and NOT an Un-assigned OTC order
                if tapplid     = 'MS' and
                       tstat_ini  <> 'F' and
                       hviewonly   = #false;

         if pgm_name = TEST_NAME;
            byte900 = %trim(byte900) + '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
                      '<b><input type="button" value="Print Permit"' +
                      'onclick="javascript:prnt_pdf(''ADM_MSRCPT'');">';

         else;
       //    Calculate sha value for print receipt button (when present)

                      sha_ssn   = %trim(torder#);
                      sha_salt  = %trim(isha_salt);
                      sha_bytes =
                             sha_hashSha1(sha_ssn:sha_salt);

                      byte900     = %trim(byte900) +
                                        '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
                                        '<b><input type="button" ' +
                                        'value="Print Receipt"' +
                                        'onClick="javascript:' +
                                        'prnt_pdf(''MSRCPT'',''' +
                                        %trim(sha_bytes) +
                                        ''');">';
         endif;
                endif;

                //  Write out Buffer
                BufOut = %trimr(BufOut) + byte900;
                BufOut = %trimr(BufOut) + linefeed;
       bytesize    = %len(%trimr(BufOut));
       exsr checkbufr;
       clear byte900;

       byte900     = %trim(byte900) + '</td><td width=400>' +
           '<table border=0><tr><td width=350 align=left>' +
           %trim(text_prod) + %trim(text_secp) + %trim(text_ship) +
           %trim(text_hndl) + %trim(text_800) + '------------------' +
           '------------------<br>' + %trim(text_totl) +
           '</td><td width=50 align=right>' + %trim(amt_prod) +
           %trim(amt_secp) + %trim(amt_ship) + %trim(amt_hndl) + %trim(amt_800)+
           '---------<br>' + %trim(amt_totl) + '</td></tr></table></td></tr>';

       //  Write out Buffer
                BufOut = %trimr(BufOut) + byte900;
                BufOut = %trimr(BufOut) + linefeed;
       bytesize    = %len(%trimr(BufOut));
       exsr checkbufr;

       //   Output the delivery Address section
             when the_sectn   = 'DA';
                if tdel_attn   = *blanks;
                   leavesr;
                endif;


          clear byte400;
          byte400 = '<tr><td style="width: 150; vertical-align: top;">' +
                    '<b>Deliver to:</b>';

                if tstat_end   = ' '  and
                       tga_fin_dt  = 0;
                   byte400     = %trim(byte400) +
                                     '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
                                     '<b><input type="button" ' +
                                     'value="Edit/Update"' +
                                     'onClick="javascript:' +
                                     'EdtDA(''PP_EDA'',450,450);">';
                endif;

                byte400     = %trim(byte400) +
                                  '</td><td width=400>' +
                                  %trim(tdel_attn) + '<br>' +
                                  %trim(tdel_addr1) + '<br>';

                if tdel_addr2 <> *blanks;
                   byte400     = %trim(byte400) +
                                     %trim(tdel_addr2) + '<br>';
                endif;

                if tdel_addr3 <> *blanks;
                   byte400     = %trim(byte400) +
                                     %trim(tdel_addr3) + '<br>';
                endif;

                byte400     = %trim(byte400) +
                                  %trim(tdel_city) + ',' +
                                  %trim(tdel_state) + ' ' +
                                  %trim(tdel_zip) + '<br>';

                if tdel_cntry <> 'US';
                   byte400     = %trim(byte400) +
                                     %trim(tdel_cntry) + '<br>';
                endif;

                byte400     = %trim(byte400) +
                                  %trim(tdel_tel#) + '<br>';

                if ttran_code  = 'Y';
                   byte400     = %trim(byte400) +
                                     '<font color=#df0000> +
                                      (address not verified +
                                      with USPS)</font><br>';
                endif;

                byte400     = %trim(byte400) +
                                  '</td></tr>';

                BufOut = %trimr(BufOut) + byte400;
                BufOut = %trimr(BufOut) + linefeed;
                exsr sendbufr;


                //   Output the Name/Billing address section

             when the_sectn   = 'NM';
                if tsfrstn     = *blanks;
                   leavesr;
                endif;

                clear byte700;
                byte700 = '<tr><td style="width: 150; vertical-align: top;">' +
                          '<b>Personal Data:</b>' + linefeed;
                if hviewonly = #false;
                   byte700 = %trim(byte700) +
                             '<p>&nbsp;&nbsp;&nbsp;&nbsp; +
                              <input type="button" value="Edit/Update" +
                              onClick="javascript:PPwin(''PP_NAM'',450,450);">';
                endif;

                byte700 = %trim(byte700) + '</td><td width=400>' +
                          %trim(tsfrstn) + ' ' + %trim(tsmidln) + ' ' +
                          %trim(tslastn) + '<br>';

                if tslastno   <> *blanks;
                   byte700     = %trim(byte700) +
                                     %trim(tslastno) + '<br>';
                endif;

                if tcompany   <> *blanks;
                   byte700     = %trim(byte700) +
                                     %trim(tcompany) + '<br>';
                endif;

                if taddr1     <> *blanks;
                   byte700     = %trim(byte700) +
                                     %trim(taddr1) + '<br>';
                endif;

                if taddr2     <> *blanks;
                   byte700     = %trim(byte700) +
                                     %trim(taddr2) + '<br>';
                endif;

                if tcity      <> *blanks or
                       tstate     <> *blanks or
                       tpostcd    <> *blanks;
                   byte700     = %trim(byte700) +
                                     %trim(tcity) + ',' +
                                     %trim(tstate) + ' ' +
                                     %trim(tpostcd) + '<br>';
                endif;

                if tcntry     <> 'US'  and
                       tcntry     <> *blanks;
                   byte700     = %trim(byte700) +
                                     %trim(tcntry) + '<br>';
                endif;

                if ttel#      <> *blanks;
                   byte700     = %trim(byte700) +
                                     %trim(ttel#) + '<br>';
                endif;

                if temail     <> *blanks;
                   byte700     = %trim(byte700) +
                                     '<a href="mailto:' +
                                     %trim(temail) + '">' +
                                     %trim(temail) + '</a><p>';
                endif;

                if tstudnt_id <> *blanks;
                   if tfice       = 'V98124';
                      byte700     = %trim(byte700) +
                                        'Contact ID: ' +
                                        %trim(tstudnt_id) + '<br>';
                   else;
                      byte700     = %trim(byte700) +
                                        'Student ID: ' +
                                        %trim(tstudnt_id) + '<br>';
                   endif;
                endif;

                //    finish the table row
                byte700     = %trimr(byte700) +
                                  '</td></tr>';
                BufOut = %trimr(BufOut) + byte700;
                BufOut = %trimr(BufOut) + linefeed;
                exsr sendbufr;


                //   Output the credit card section

             when the_sectn   = 'CC';
                //   9/23/09 MRB Removed code to show CC last 4, users see card
                //               type only

                clear byte400;
                byte400     = '<tr><td width=150>' +
                                  '<b>Payment Method:</b>' +
                                  '</td><td width=400>';


                clear cc_last4;
                if tga_paidck <> *blanks;
                   cc_last4    = tga_paidck;
                endif;

                byte400     = %trim(byte400) +
                                  %trim(tcardtype) + ': ' +
                                  cc_last4 + '<br>';

                byte400     = %trim(byte400) +
                                  '</td></tr>';

                BufOut = %trimr(BufOut) + byte400;
                BufOut = %trimr(BufOut) + linefeed;
                exsr sendbufr;

                //   Output the vehicle info section

             when the_sectn   = 'VE';
                if tcategry    = 'C' or
                       tcategry    = 'D';
                   leavesr;
                endif;

          if tlicplate1 <> *blanks;

            exsr do_sumveh;
          else;

                   clear byte1200;
                   byte1200    = '<tr><td width=150>' +
                                     '<b>Vehicle Data:</b>';

                   if tstat_end   = ' '  and
                          tstat_ini  <> 'F'  and
                          %scan('V':gscreens) > 0 and
                          hviewonly   = #false;
                      byte1200    = %trim(byte1200) +
                                        '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
                                        '<b><input type="button" ' +
                                        'value="Edit/Update"' +
                                        'onClick="javascript:' +
                                        'PPwin(''PP_EDV'',450,450);">';
                   endif;

                   byte1200    = %trim(byte1200) +
                                     '</td><td width=400>' +
                       '<table border=0 cellpadding=0 ' +
                       'cellspacing = 0>';

                   byte1200    = %trim(byte1200) +
                       '<tr><td align=left>Permit#:</td>' +
                       '<td align=left>&nbsp;' + %trim(tapp_data8) +
                       '</td></tr>';

                   if %scan('V':gscreens) > 0 or
                          h_applid    = 'MS';
                      if tapp_data5 <> *blanks or
                             %scan('P':gveh_flds) > 0;
                         byte1200    = %trim(byte1200) +
                             '<tr><td align=left>Plate:</td>' +
                             '<td align=left>&nbsp;' + %trim(tapp_data5) +
                             '</td></tr>';
                      endif;
                      if tapp_data4 <> *blanks or
                             %scan('S':gveh_flds) > 0;
                         byte1200    = %trim(byte1200) +
                             '<tr><td align=left>State:</td>' +
                             '<td align=left>&nbsp;' + %trim(tapp_data4) +
                             '</td></tr>';
                      endif;
                      if tapp_data1 <> *blanks or
                             %scan('M':gveh_flds) > 0;
                         if tfice       = 'V98124';
                            byte1200    = %trim(byte1200) +
                                '<tr><td align=left>RPZ Permit #:</td>' +
                                '<td align=left>&nbsp;' + %trim(tapp_data1) +
                                '</td></tr>';
                         else;
                            byte1200    = %trim(byte1200) +
                                '<tr><td align=left>Make:</td>' +
                                '<td align=left>&nbsp;' + %trim(tapp_data1) +
                                '</td></tr>';
                         endif;
                      endif;
                      if tapp_data2 <> *blanks or
                             %scan('O':gveh_flds) > 0;
                         byte1200    = %trim(byte1200) +
                             '<tr><td align=left>Model:</td>' +
                             '<td align=left>&nbsp;' + %trim(tapp_data2) +
                             '</td></tr>';
                      endif;
                      if tapp_data6 <> *blanks or
                             %scan('Y':gveh_flds) > 0;
                         byte1200    = %trim(byte1200) +
                             '<tr><td align=left>Year:</td>' +
                             '<td align=left>&nbsp;' + %trim(tapp_data6) +
                             '</td></tr>';
                      endif;
                      if tapp_data7 <> *blanks or
                             %scan('B':gveh_flds) > 0;
                         byte1200    = %trim(byte1200) +
                             '<tr><td align=left>Type:</td>' +
                             '<td align=left>&nbsp;' + %trim(tapp_data7) +
                             '</td></tr>';
                      endif;
                      if tapp_data3 <> *blanks or
                             %scan('C':gveh_flds) > 0;
                         byte1200    = %trim(byte1200) +
                             '<tr><td align=left>Color:</td>' +
                             '<td align=left>&nbsp;' + %trim(tapp_data3) +
                             '</td></tr>';
                      endif;
                      if tapp_data0 <> *blanks or
                             %scan('R':gveh_flds) > 0;
                         if tfice       = 'V98124';
                            byte1200    = %trim(byte1200) + '<tr>' +
                                 '<td align=left>Blockface #:</td>'       +
                                 '<td align=left>&nbsp;' +
                                 %trim(tapp_data0) +
                                 '</td></tr>';
                         else;
                            byte1200    = %trim(byte1200) + '<tr>' +
                                 '<td align=left>Registration Name:</td>' +
                                 '<td align=left>&nbsp;' +
                                 %trim(tapp_data0) +
                                 '</td></tr>';
                         endif;
                      endif;
                   endif;

                   byte1200    = %trim(byte1200) +
                       '</table>' +
                       '</td></tr>';

                   BufOut = %trimr(BufOut) + byte1200;
                   BufOut = %trimr(BufOut) + linefeed;
                   exsr sendbufr;

       endif;                                    // End of old vehicle section

       //   Output the Pet info section

             when the_sectn   = 'PE';
                if tcategry   <> 'C' and
                       tcategry   <> 'D';
                   leavesr;
                endif;

                clear byte1200;
                byte1200    = '<tr><td width=150>' +
                                  '<b>Pet Data:</b>';

                if tstat_end   = ' ';
                   byte1200    = %trim(byte1200) +
                                     '<p>&nbsp;&nbsp;&nbsp;&nbsp;' +
                                     '<b><input type="button" ' +
                                   'value="Edit/Update" DISABLED ' +
                                     'onClick="javascript:' +
                                     'PPwin(''PP_EDV'',450,450);">';
                endif;

                byte1200    = %trim(byte1200) +
                                  '</td><td width=400>' +
                    '<table border=0 cellpadding=0 ' +
                    'cellspacing = 0>' +
                    '<tr><td align=left>Name:</td>' +
                    '<td align=left>&nbsp;' + tapp_data7 +
                    '</td></tr>' +
                    '<tr><td align=left>Type:</td>' +
                    '<td align=left>&nbsp;' + tapp_data4 +
                    '</td></tr>' +
                    '<tr><td align=left>Color:</td>' +
                    '<td align=left>&nbsp;' + tapp_data3 +
                    '</td></tr>' +
                    '<tr><td align=left>Gender:</td>' +
                    '<td align=left>&nbsp;' + tapp_data5 +
                    '</td></tr>' +
                    '<tr><td align=left>Breed:</td>' +
                    '<td align=left>&nbsp;' + tapp_data0 +
                    '</td></tr>' +
                    '<tr><td align=left>Tag #:</td>' +
                    '<td align=left>&nbsp;' + tapp_data8 +
                    '</td></tr>' +
                    '</table>' +
                    '</td></tr>';

                BufOut = %trimr(BufOut) + byte1200;
                BufOut = %trimr(BufOut) + linefeed;
                exsr sendbufr;

             other;
          endsl;

       endsr;

       // **************************************************************
       //     RTR_ChgEm  Write a change email notice to the old email
       //                address
       // **************************************************************
       begsr rtr_chgem;

          clear overrides;
          overrides   = 'OVRDBF FILE(GAROUTER1) TOFILE(*LIBL/GAROUTER1) ' +
                        'SEQONLY(*NO)';

          cmdlen = 70;
          clear command;
          command = overrides;
          qcmdexc(command : cmdlen);

          if not %open(garouter1);
             open(e) garouter1;
             *in97 = %error;
          endif;

     c*                  time                    td14
          td14date = %char(%date():*usa0);
          td14time = %dec(%Time():*iso);

          date8yyyy = td14yyyy;
          date8mmdd = td14mmdd;
          cycle_date  = today;
          cycle_time  = curtime;

          suserid     = rpin_user;
          sfice       = hfice;
          sorder_yyy  = cycle_yyy;
          clear sorder#;
          sstatus     = 'T';
          sapplid     = h_applid;
          saction     = 'E';
          ssource     = 'ADM';
          senteredby  = huserid;
          sentrydate  = cycle_date;
          sentrytime  = cycle_time;
          selig_date  = cycle_date;
          selig_time  = cycle_time;

          clear sreplydate;
          clear sreplytime;
          clear srtr_data;
          clear scell#;
          clear scell#co;

          srpymethod  = 'E';
          saddress    = remail;

          write garouter;

       endsr;


       //*********************************************************************
       //  resendAuth: Chain gaorder1# table and call pp_ga_rtr subroutine
       //********************************************************************
       begsr resendAuth;

       if not %open(gaorder1#);
          open gaorder1#;
       endif;
       chain(n) (horder#) garec_#;

       rtr_action = 'A';
       exsr pp_ga_rtr;

       endsr;
       //*********************************************************************
       //  SENDBUFR:   Dump the buffer to StdOut
       //********************************************************************
       begsr sendbufr;

       BufOutLn = %len(%trimr(BufOut));
       if bufoutln > 0;
          callp APIStdOut(Bufout:bufoutln:qusec);
       endif;
       clear BufOut;
       clear BufOutLn;
       clear ByteSize;

       endsr;


       // ***********************************************************************
       //     set_elg_DT:   Set the eligibility date for the new stage         **
       // ***********************************************************************
       begsr set_elg_dt;

          if tstage = ' ';
             leavesr;
          endif;

          i3          = 1;
          i3 = %lookup(tstage : st_arr : i3);
          *in90 = (i3 > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
          if i3 = 0;
             i3 = 1;
          endif;
          if not *in90;
             leavesr;
          endif;

          #formula    = st_edf(i3);

          select;
             // Expedited orders need to complete right away.
          when tapplid = 'DP' and #formula <> *blank and
               (tdel_airbc = 'CP' or tdel_airbc = 'EC' or tdel_airbc = 'PC');
                telig_date = cycle_date;

                //   The 1st and the 15th of each month
             when #formula    = '1';

                today       = cycle_date;
                if date8dd    >= 15;
                   date8dd     = 1;

                   //    increment the month by 1
                   if date8mm    <> 12;
                      date8mm += 1;
                   else;
                      date8yyyy += 1;
                      date8mm     = 1;
                   endif;

                else;
                   date8dd     = 15;
                endif;

                telig_date  = today;

                //   every two weeks from base date is an elig date
             when #formula    = '2';

                evalr ad_from = %editc(gstage_bd1:'X');
                ad_to = %editc(cycle_date:'X');

                #days_diff  = daystil(ad_from:ad_to);
                #periods    = #days_diff/14;
                #days       = #periods * 14;
                #days       = #days_diff - #days;

                if #days       > 0;
                   #periods    = #periods + 1;
                endif;

                #days       = #periods * 14;
                $unit       = 'D';
                ad_to       = dateplus(ad_from:
                                    #days:$unit);
                telig_date = %dec(%subst(%editc(telig_date
                    :'X'):1:1)
                      + %xlate(' ':'0':
                        ad_to) :9:0);

                //   every week from base date is an elig date
             when #formula    = 'W';

                evalr ad_from = %editc(gstage_bd1:'X');
                //  01/12/08 MRB found problem with an order finished on friday,
                //               get's an eligiblity date of that friday, instead of
                //               a week later, switched to set ad_to to cycle_date+1
                //               instead of just cycle date
                ad_to = %editc(cycle_date:'X');
                $unit       = 'D';
                ad_to       = dateplus(ad_to:1:$unit);

                #days_diff  = daystil(ad_from:ad_to);
                #periods    = #days_diff/7;
                #days       = #periods * 7;
                #days       = #days_diff - #days;

                if #days       > 0;
                   #periods    = #periods + 1;
                endif;

                #days       = #periods * 7;
                $unit       = 'D';
                ad_to       = dateplus(ad_from:
                                    #days:$unit);
                telig_date = %dec(%subst(%editc(telig_date
                    :'X'):1:1)
                      + %xlate(' ':'0':
                        ad_to) :9:0);

                //   Parking Permits - set elig date based on PP_Shutoff
             when #formula    = 'P';

                //    Do not bother to check option record here
                if cycle_date  < ga_prt_beg;
                   telig_date  = ga_prt_beg;
                elseif cycle_time  < PP_shutoff;
                   telig_date  = cycle_date;
                else;
                   $Date = %editc(cycle_date:'X');
                   $days = 1;
                   $unit       = 'D';
                   byte8       = dateplus($Date:$Days:$unit);
                   telig_date = %dec(%subst(%editc(telig_date
                       :'X'):1:1)
                         + %xlate(' ':'0':
                           byte8) :9:0);
                endif;
          endsl;

       endsr;

       //***********************************************************************
       //  scan_POBox:
       //***********************************************************************
       begsr scan_POBox;

       // build a big string of all address lines so we only scan each
       // string value one time

       clear po_addrs;

       po_addra = hdel_attn;
       po_addr1 = hdel_addr1;
       po_addr2 = hdel_addr2;
       po_addr3 = hdel_addr3;

       po_addrs = %xlate(xlc:xuc:po_addrs);

       if %scan('PO BOX':po_addrs:1) > 0 or
          %scan('PO. BOX':po_addrs:1) > 0 or
          %scan('P.O BOX':po_addrs:1) > 0 or
          %scan('P.O  BOX':po_addrs:1) > 0 or
          %scan('P  O BOX':po_addrs:1) > 0 or
          %scan('P O BOX':po_addrs:1) > 0 or
          %scan('P O  BOX':po_addrs:1) > 0 or
          %scan('P.O. BOX':po_addrs:1) > 0 or
          %scan('P. O. BOX':po_addrs:1) > 0 or
          %scan('P.O   BOX':po_addrs:1) > 0 or
          %scan('POST OFFICE BOX':po_addrs:1) > 0;
          ei += 1;
          errs(ei) = '#7680';
          condition = 'parm-bad';
       endif;

       endsr;

       // ************************************************************************
       //   Set_Rate: Set the working rate field (work_rate)
       // ************************************************************************
       begsr set_rate;

          // ---   Calculate rate from the order record, except for meetings
          //       which we get the rate from the option record
          //  06/10/09 MRB Added multiple orders to this

          // ---   Determine the rate by subtracting real handle fees

          work_rate = tamt_total - tamt_800 - tamt_ship - tamt_handl;


       endsr;

       // ***********************************************************************
       //   Shift_Err:   shift the error array and insert error heading        **
       //                and trailer
       // ***********************************************************************
       begsr shift_err;
          for i1 = 1 To ei;
             errs(ei-i1+2) = errs(ei-i1+1);
          endfor;

          ei          = i1 +2;
          clear errs(1);
          %subst(errs(1):1:66) = err_header;
          %subst(errs(ei):1:11) = err_trailr;
       endsr;

       //************************************************************************
       //   Snd_Email:   Send a receipt e-mail to the user and to Mark         **
       //                and Terry
       //************************************************************************
       begsr snd_email;

          //   Get the option that is being ordered
          if NOT %open(gaoption1);
             open gaoption1;
          endif;
          the_recid   = hrecid;
          the_value   = hproduct;
          chain (hfice : h_applid : the_recid : husrtype :
                the_value) ga_parms;

          mail_subj   = 'CI-F02: Receipt of Batch Parking ' +
                        'Permit Request #: ' +
                        horder#;

          byte13 = '2580nS       ';
          exsr get_a_msg;


          mail_msg = %trim(msg_text) + %trim(hnumpmits) + ' ' +
                                       %trim(ga_text_1) + ' Permits - $' +
                                       %char(otc_cost) + ' ' + eml_break;

          if hrush = 'Y';
             mail_msg = %trimr(mail_msg) + 'Rush Processing Fee - $' +
                                           %char(RUSH_FEE) + ' ' + eml_break;
          endif;

          if hship = 'O';
             work_40 = 'FedEx Priority Overnight';
          elseif hship = 'S';
             work_40 = 'FedEx Standard Overnight';
          elseif hship = '2';
             work_40 = 'FedEx Two Day';
          elseif hship = 'X';
             work_40 = 'FedEx Express Saver';
          elseif hship = 'G';
             work_40 = 'FedEx Ground';
          else;
             work_40 = 'First Class Mail';
          endif;
          mail_msg = %trimr(mail_msg) + 'Shipping Method: ' +
                                        %trim(work_40) + ' - $' +
                                        %char(otc_ship) + ' ' + eml_break +
                                        'Total Cost: $' + %char(tamt_credt) +
                                        eml_break + eml_break;

          mail_msg = %trim(mail_msg) + 'To be mailed to:' + eml_break +
                                       hdel_attn + eml_break +
                                       hdel_addr1 + eml_break;

          if hdel_addr2 <> *blanks;
             mail_msg    = %trimr(mail_msg) +
                               hdel_addr2 + eml_break;
          endif;
          if hdel_addr3 <> *blanks;
             mail_msg    = %trimr(mail_msg) +
                               hdel_addr3 + eml_break;
          endif;
          mail_msg    = %trimr(mail_msg) +
                            %trimr(hdel_city) +
                            ', ' + %trim(hdel_state) +
                            ' ' + hdel_zip + eml_break +
                            hdel_tel# + eml_break +
                            hemail + eml_break + eml_break;

          byte13      = '2581cUfe     ';
          exsr get_a_msg;
          mail_msg    = %trim(mail_msg) +
                            %trim(msg_text);

          //   Check for any ' quotes

          mail_msg = %xlate('''':'`':mail_msg);
          mail_msg = %scanrpl(':/N':EML_BREAK:mail_msg);
          mail_msg = %scanrpl(linefeed:eml_break:mail_msg);

          javaRC = mailmsg('TEXT':hemail:mail_subj:mail_msg);

          IF glive_appl = 'Y';

             // Add internal only section and send to the Northfield Print Group

             mail_msg = %trimr(mail_msg) + newln + newln + newln + newln +
                'Authorized By:   __________________     __________' +
                '     ' + ga_formid + '     ' + ga_labelid + newln +
                '                    Signature              Date' + newln +
                newln + newln +
                'Control Copy:    __________________     __________' +
                '     __________     __________' + newln +
                '                    Printed by           Check by ' +
                '     Start Time      End Time' + newln +
                newln + newln +
                'Printed By:      __________________     __________' +
                '     __________     __________' + newln +
                '                    Signature              Date   ' +
                '     Start Time      End Time' + newln +
                newln + newln +
                'Tabbed By:       __________________     __________' +
                '     __________     __________' + newln +
                '                    Signature              Date   ' +
                '     Start Time      End Time' + newln +
                newln + newln +
                'Quality Check:   __________________     __________' +
                '     __________     __________' + newln +
                '                    Signature              Date   ' +
                '     Start Time      End Time';

             credUser = crmfunc_getUser('NKB');
             emlToaddr(1) = credUser.email;
             emlToaddr(2) = 'graphics@credentialssolutions.net';

             mail_msg = %scanrpl(':/N':eml_break:mail_msg);
             mail_msg = %scanrpl(linefeed:eml_break:mail_msg);

             //Send email to school with bcc to internal emails
             javaRC = mailall('TEXT':mail_subj:emlToaddr:emlCcaddr:emlBcaddr:
                              'noreply@credentialssolutions.com':mail_msg:
                              *blank:*blank:*blank);

             doEmail('CRM':mail_subj:mail_msg:hfice:horder#);

          ELSE;
             mail_msg = %scanrpl(':/N':eml_break:mail_msg);
             mail_msg = %scanrpl(linefeed:eml_break:mail_msg);
             doEmail('TDR':mail_subj:mail_msg:hfice:horder#);
          ENDIF;

          clear emlToaddr;
          clear emlCcaddr;
          clear emlBcaddr;
          clear mail_subj;
          clear mail_msg;
       endsr;

       // ***********************************************************************
       //   squeeze_it:  Squeeze out the blanks from a field                   **
       // ***********************************************************************
       begsr squeeze_it;

          //   Squeeze all embedded blanks out of the squeze_var
     c*    top_squeeze   tag
          //i1 = %scan(' ':squeze_var);
          //if i1 > 0 and
               //i1 < %len(%trim(squeze_var));
             //squeze_var   =
             //    %subst(squeze_var:1:i1-1) +
             //    %subst(squeze_var:i1+1);
     c*                  goto      top_squeeze
          //endif;

          dow i1 > 0 and
              i1 < %len(%trim(squeze_var));

             squeze_var   =
                 %subst(squeze_var:1:i1-1) +
                 %subst(squeze_var:i1+1);
             i1 = %scan(' ':squeze_var);

          enddo;

       endsr;

       // *******************************************************************
       //     Undo a display format date field
       // *******************************************************************
       begsr Undo_Date;

          if dsply_yyyy  = *blanks;
             date8       = 99999999;
          else;
             adate8mm    = dsply_mm;
             adate8dd    = dsply_dd;
             adate8yyyy  = dsply_yyyy;
          endif;

       endsr;

       // *******************************************************************
       //     Update Dvclientf1 with the dismissal date and time for ALL alerts
       // *******************************************************************
       begsr updateDismissDt;
          if %scan('application/x-www-form-urlencoded':
                   curContentType.contentType) > 0;
             chain huserid client;

             if %found(dvclientf1);
                if hsignonkey = csignonkey and hfice = cfreefice;
                   cdismissDt = %dec(%date():*iso);
                   cdismissTm = %dec(%time():*iso);
                   update client;
                   BufOut = %trimr(BufOut) + 'Content-type: text/json' +
                              linefeed + linefeed + '{"STATUS":"OK"}';
                   byteSize += 42;
                else;
                   BufOut = %trimr(BufOut) + 'Content-type: text/json' +
                            linefeed + linefeed + '{"STATUS":"ERROR"}';
                   unlock dvclientf1;
                   byteSize += 45;
                endif;
                exsr sendbufr;
             endif;
          endif;

       endsr;

       // *******************************************************************
       //     Update the Contact Record
       // *******************************************************************
       begsr upd_cntct;

          if not %open(dvinstitl4);
             open DVINSTITL4;
          endif;

          chain (hfice : otc_code) contact;

          if %found;
             //   set del_attn to last name since they are same length

             clear mfrstname;
             clear mmidlname;
             mlastname   = hdel_attn;

             if hdel_addr3 <> *blanks;
                mcompany    = hdel_addr1;
                maddr1      = hdel_addr2;
                maddr2      = hdel_addr3;
             else;
                maddr1      = hdel_addr1;
                maddr2      = hdel_addr2;
                clear mcompany;
             endif;
             mcity       = hdel_city;
             mstate      = hdel_state;
             mpostcd     = hdel_zip;
             mtelnum     = hdel_tel#;
             if mtelextn   <> *blanks;
                hdel_tel#   = %trimr(hdel_tel#) +
                                  '  x' + mtelextn;
             endif;
             memail      = hemail;

             update contact;
          endif;

       endsr;

       // *******************************************************************
       //  ----Subroutine (copied) to replace standard variables in html
       // *******************************************************************
       begsr Variables;

          //  @@@@@@ for FICE Number
          idx = %scan('@@@@@@':htmlstmt:1);
          if idx         > 0;
     c*                  movea     hfice         htm80(idx)
             %subst(htmlstmt:idx:%len(hfice)) = hfice;
          endif;

          //  {AP{     to insert application ID
          idx = %scan('{AP{':htmlstmt:1);
          if idx         > 0;
             byte4       = h_applid + '">';
     c*                  movea     byte4         htm80(idx)
             %subst(htmlstmt:idx:%len(byte4)) = byte4;
          endif;

          //  ----search for {{{ FORMS ID
          idx = %scan('{{{':htmlstmt:1);
          if idx         > 0;
     c*                  movea     hscrn_next    htm80(idx)
             %subst(htmlstmt:idx:%len(hscrn_next)) = hscrn_next;
          endif;

          //  ----search for }}} ACTION
          idx = %scan('}}}':htmlstmt:1);
          if idx         > 0;
     c*                  movea     h_action      htm80(idx)
             %subst(htmlstmt:idx:%len(h_action)) = h_action;
          endif;

          //  (ORDERNO) order number (9-char)
          idx = %scan('(ORDERNO)':htmlstmt:1);
          if idx > 0;
     c*                  movea     horder#       htm80(idx)
             %subst(htmlstmt:idx:%len(horder#)) = horder#;
          endif;

          idx = %scan('([ORD_TYPE])':htmlstmt:1);
          if idx > 0;
             if srchByDate;
                %subst(htmlstmt:idx:%len('([ORD_TYPE])')) = 'Completed';
             else;
                %subst(htmlstmt:idx:%len('([ORD_TYPE])')) = 'Ordered';
             endif;
          endif;

          //  ----Search for (((SK))) to insert SIGNONKEY
          idx = %scan('(((SK)))':htmlstmt:1);
          if idx         > 0;
     c*                  movea     hsignonkey    htm80(idx)
             %subst(htmlstmt:idx:%len(hsignonkey)) = hsignonkey;
          endif;

          //  ----Search for ++++++++ for userid field
          idx = %scan('++++++++':htmlstmt:1);
          if idx > 0;
     c*                  movea     blnk10        htm80(idx)
     c*                  movea     huserid       htm80(idx)
             %subst(htmlstmt:idx:%len(blnk10)) = blnk10;
             %subst(htmlstmt:idx:%len(huserid)) = huserid;
          endif;

          //  ----Search for (TIME) to insert time of day
          idx = %scan('(TIME)':htmlstmt:1);
          if idx > 0;
             #time6 = %dec(%time);
             #time6a = %editc(#time6:'X');
     c*                  movea     #time6a       htm80(idx)
             %subst(htmlstmt:idx:%len(#time6a)) = #time6a;
          endif;

          //  ----search for (SRCHTYPE for SSN/SID/ORD/LSN/DTA5/DTA8
          idx = %scan('(SRCHTYPE':htmlstmt:1);
          if idx > 0;
             clear byte17;
             byte17      = %trim(hsrch_type) + '">';
     c*                  movea     byte17        htm80(idx)
             %subst(htmlstmt:idx:%len(byte17)) = byte17;
          endif;

          //  ----search for (SRCHPARM for Confid/SSN/SID/Last Name Entered
          idx = %scan('(SRCHPARM':htmlstmt:1);
          if idx > 0;
             clear byte17;
             byte17      = %trim(hsrch_parm) + '">';
     c*                  movea     byte17        htm80(idx)
             %subst(htmlstmt:idx:%len(byte17)) = byte17;
          endif;

          //  ----search for (SRCH_NAM for Name Search Entered
          idx = %scan('(SRCH_NAM':htmlstmt:1);
          if idx > 0;
             clear byte50;
             byte50      = %trim(hsrch_nam) + '">';
     c*                  movea     byte27        htm80(idx)
             %subst(htmlstmt:idx:%len(byte50)) = byte50;
          endif;

          //  ----search for ([SRCH_NAM]) for Name Search Entered
          idx = %scan('([SRCH_NAM])':htmlstmt:1);
          if idx > 0;
             %subst(htmlstmt:idx) = %trim(hsrch_nam) + '">';
             leavesr;
          endif;
          //  ----search for ([SRCH_SSN]) for SSN Search Entered
          idx = %scan('([SRCH_SSN])':htmlstmt:1);
          if idx > 0;
             %subst(htmlstmt:idx) = %trim(hsrch_ssn) + '">';
             leavesr;
          endif;

          //  ----search for ([SRCH_SID]) for SID Search Entered
          idx = %scan('([SRCH_SID])':htmlstmt:1);
          if idx > 0;
             %subst(htmlstmt:idx) = %trim(hsrch_sid) + '">';
             leavesr;
          endif;

          //  ----search for [(SRCH_ORD)] for Order# Search Entered
          idx = %scan('([SRCH_ORD])':htmlstmt:1);
          if idx > 0;
             %subst(htmlstmt:idx) = %trim(hsrch_ord) + '">';
             leavesr;
          endif;

          idx = %scan('([SRCHDATERADIO])':htmlstmt:1);
          if idx > 0;
             if htm80(idx-2) = hdateInd or
                hdateInd = *blanks;
                %subst(htmlstmt:idx) = ' checked>';
             else;
                %subst(htmlstmt:idx) = '>';
             endif;
             leavesr;
          endif;

          idx = %scan('([SRCHIND])':htmlstmt);
          if idx > 0;
             %subst(htmlstmt:idx) = %trim(hsrchInd) + '">';
             leavesr;
          endif;

          //  ----search for (SRCH_DTA5 for tapp_data5 search
          idx = %scan('(SRCH_DTA5':htmlstmt:1);
          if idx > 0;
             clear byte12;
             byte12      = %trim(hsrch_dta5) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  ----search for (SRCH_DTA6 for tapp_data6 search
          idx = %scan('(SRCH_DTA6':htmlstmt:1);
          if idx > 0;
             clear byte12;
             byte12      = %trim(hsrch_dta6) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  ----search for (SRCH_TAG for TAG Search Entered
          idx = %scan('(SRCH_TAG':htmlstmt:1);
          if idx > 0;
             clear byte17;
             byte17      = %trim(hsrch_tag) + '">';
     c*                  movea     byte17        htm80(idx)
             %subst(htmlstmt:idx:%len(byte17)) = byte17;
          endif;

          //  ----search for (SRCH_TAREA for search Telephone area code
          idx = %scan('(SRCH_TAREA':htmlstmt:1);
          if idx > 0;
             clear byte12;
             byte12      = %trim(hsrch_tarea) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  ----search for (SRCH_TNUM for search Telephone number
          idx = %scan('(SRCH_TNUM':htmlstmt:1);
          if idx > 0;
             clear byte12;
             byte12      = %trim(hsrch_tnum) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  (ORDERBY) order BY Field
          idx = %scan('(ORDERBY)':htmlstmt:1);
          if idx > 0;
             clear byte12;
             byte12      = %trim(horderby) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  ((VIEW)) view only flag
          idx = %scan('((VIEW))':htmlstmt:1);
          if idx > 0;
             clear byte10;
             byte10      = %trim(hviewonly) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (RES2MODE) - Viewing RES2 (Deleted) mode
          idx = %scan('(RES2MODE)':htmlstmt:1);
          if idx > 0;
             clear byte10;
             byte10      = %trim(hres2mode) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  ----search for ((DSP_SSN - display the SSN
          idx = %scan('((DSP_SSN':htmlstmt:1);
          if idx         > 0;
             clear byte70;
             byte70      = '&nbsp;' + %trim(dsp_ssn);
     c*                  movea     byte70        htm80(idx)
             %subst(htmlstmt:idx:%len(byte70)) = byte70;
          endif;

          //  (SIDT)     Student ID number title
          idx = %scan('(SIDT)':htmlstmt:1);
          if idx > 0;
     c*                  movea     istuid_ttl    htm80(idx)
             %subst(htmlstmt:idx:%len(istuid_ttl)) = istuid_ttl;
          endif;

          //  ----search for ((MTCH_SSN - match SSN code
          idx = %scan('((MTCH_SSN':htmlstmt:1);
          if idx         > 0;
             clear byte70;
             byte70      = %trim(tro_matchs);
     c*                  movea     byte70        htm80(idx)
             %subst(htmlstmt:idx:%len(byte70)) = byte70;
          endif;

          //  ----search for ((DSP_SID - display the SID
          idx = %scan('((DSP_SID':htmlstmt:1);
          if idx > 0;
             clear byte70;
             byte70      = '&nbsp;' + %trim(dsp_sid);
     c*                  movea     byte70        htm80(idx)
             %subst(htmlstmt:idx:%len(byte70)) = byte70;
          endif;

          //  ----search for ((MTCH_SID - match SID code
          idx = %scan('((MTCH_SID':htmlstmt:1);
          if idx         > 0;
             clear byte70;
             byte70      = %trim(tro_matchi);
     c*                  movea     byte70        htm80(idx)
             %subst(htmlstmt:idx:%len(byte70)) = byte70;
          endif;

          //  ----search for ((DB10)) date of birth as mm-dd-yyyy
          idx = %scan('((DB10))':htmlstmt:1);
          if idx > 0;
             clear dsply_date;
             if hbirth      > 0;
                dsply_date  = %char(%date(hbirth:*iso):*usa);
             endif;
     c*                  movea     dsply_date    htm80(idx)
             %subst(htmlstmt:idx:%len(dsply_date)) = dsply_date;
          endif;

          //  ----Search for (STU_NAM: for student Full Name
          idx = %scan('(STU_NAM:':htmlstmt:1);
          if idx > 0;
             hfullname = %trimr(hsfrstn) + ' ' + hsmidln;
             hfullname = %trimr(hfullname) + ' ' + hslastn;
             hfullname = %trimr(hfullname) + ' ' + hsuffix;

                    if hslastno <> *blanks;
                       hfullname = %trim(hfullname) + ' (' + %trim(hslastno) +
                                    ')';
                    endif;

     c*                  movea     hfullname     htm80(idx)
             %subst(htmlstmt:idx:%len(hfullname)) = hfullname;
          endif;

          //  ----search for (STU_AD1: student address line 1 (transcripts)
          idx = %scan('(STU_AD1:':htmlstmt:1);
          if idx > 0;
             if stu_addr1  <> *blanks;
                string65 = '<br>&nbsp;' + stu_addr1;
     c*                  movea     string65      htm80(idx)
             %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ----search for (STU_AD2: student address line 2 (transcripts)
          idx = %scan('(STU_AD2:':htmlstmt:1);
          if idx > 0;
             if stu_addr2  <> *blanks;
                string65 = '<br>&nbsp;' + stu_addr2;
     c*                  movea     string65      htm80(idx)
                %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ----search for (STU_AD3: student address line 3 (transcripts)
          idx = %scan('(STU_AD3:':htmlstmt:1);
          if idx > 0;
             if stu_addr3  <> *blanks;
                string65 = '<br>&nbsp;' + stu_addr3;
     c*                  movea     string65      htm80(idx)
                %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ----search for (STU_AD4: student address line 4 (transcripts)
          idx = %scan('(STU_AD4:':htmlstmt:1);
          if idx > 0;
             if stu_addr4  <> *blanks;
                string65 = '<br>&nbsp;' + stu_addr4;
     c*                  movea     string65      htm80(idx)
                %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ----search for ((MTCH_NAM - match NAME code
          idx = %scan('((MTCH_NAM':htmlstmt:1);
          if idx         > 0;
             clear byte70;
             byte70      = 'FN: ' + tro_matchf + '<br>' +
                               'MN: ' + tro_matchm + '<br>' +
                               'LN: ' + tro_matchl + '<br>' +
                               'Full: ' + tro_matchn;
     c*                  movea     byte70        htm80(idx)
             %subst(htmlstmt:idx:%len(byte70)) = byte70;
          endif;

          //  ----Search for (STU_TEL Student Telephone Number - Transcript
          idx = %scan('(STU_TEL':htmlstmt:1);
          if idx > 0;
     c*                  movea     htel#         htm80(idx)
             %subst(htmlstmt:idx:%len(htel#)) = htel#;
          endif;

          //  ----search for (DEL_ATN: delivery attention for transcript

          idx = %scan('(DEL_ATN:':htmlstmt:1);
          if idx > 0;
             if hdel_attn  <> *blanks;
                clear string65;
                string65    = '&nbsp;' + hdel_attn;
     c*                  movea     string65      htm80(idx)
                %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ----search for (DEL_AD1: delivery address line 1

          idx = %scan('(DEL_AD1:':htmlstmt:1);
          if idx > 0;
             if del_addr1  <> *blanks;
                clear string65;
                string65    = '<br>&nbsp;' + del_addr1;
     c*                  movea     string65      htm80(idx)
                %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ----search for (DEL_AD2: delivery address line 2

          idx = %scan('(DEL_AD2:':htmlstmt:1);
          if idx > 0;
             if del_addr2  <> *blanks;
                clear string65;
                string65    = '<br>&nbsp;' + del_addr2;
     c*                  movea     string65      htm80(idx)
                %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ----search for (DEL_AD3: delivery address line 3

          idx = %scan('(DEL_AD3:':htmlstmt:1);
          if idx > 0;
             if del_addr3  <> *blanks;
                clear string65;
                string65    = '<br>&nbsp;' + del_addr3;
     c*                  movea     string65      htm80(idx)
                %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ----search for (DEL_AD4: delivery address line 4

          idx = %scan('(DEL_AD4:':htmlstmt:1);
          if idx > 0;
             if del_addr4  <> *blanks;
                clear string65;
                string65    = '<br>&nbsp;' + del_addr4;
     c*                  movea     string65      htm80(idx)
                %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ----search for (DEL_AD5: delivery address line 5

          idx = %scan('(DEL_AD5:':htmlstmt:1);
          if idx > 0;
             if del_addr5  <> *blanks;
                clear string65;
                string65    = '<br>&nbsp;' + del_addr5;
     c*                  movea     string65      htm80(idx)
                %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ----search for (DEL_TEL delivery tel for transcript

          idx = %scan('(DEL_TEL':htmlstmt:1);
          if idx > 0;
             if hdel_tel#  <> *blanks;
                clear string65;
                string65    = '<br>&nbsp;' + hdel_tel#;
     c*                  movea     string65      htm80(idx)
                %subst(htmlstmt:idx:%len(string65)) = string65;
             else;
                skip_it     = 'Y';
             endif;
          endif;

          //  ---(DATA_2)  for tapp_data2 (degree major)

          idx = %scan('(DATA_2)':htmlstmt:1);
          if idx > 0;
             byte25      = tapp_data2;
     c*                  movea     byte25        htm80(idx)
             %subst(htmlstmt:idx:%len(byte25)) = byte25;
          endif;

          //  ---(DATA_4)  for tapp_data4 (degree year)

          idx = %scan('(DATA_4)':htmlstmt:1);
          if idx > 0;
             byte10      = tapp_data4;
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  ---(DATA_0)  for tapp_data0 (degree type - replaces data1)

          idx = %scan('(DATA_0)':htmlstmt:1);
          if idx > 0;
             byte35      = tapp_data0;
             %subst(htmlstmt:idx:%len(byte35)) = byte35;
          endif;

          //  ----Search for ((CER_NAME  Name to appear on Certification
          //  ---(DATA_7)  for tapp_data7 (degree name)
          idx = %scan('(DATA_7)':htmlstmt:1);
          if idx > 0;
             %subst(htmlstmt:idx:%len(tapp_data7)) = tapp_data7;
          endif;

          idx = %scan('(DATA_5)':htmlstmt:1);
          if idx > 0;
             %subst(htmlstmt:idx:%len(tapp_data5)) = tapp_data5;
          endif;

          idx = %scan('(DATA_C)':htmlstmt:1);
          if idx > 0;
             %subst(htmlstmt:idx:%len(tapp_datac)) = tapp_datac;
          endif;

          idx = %scan('(TTLDEG)':htmlstmt:1);
          if idx > 0;
             messageDs = web_zGetMessage('GAM6401':Msg_File:imsgprefix);
             %subst(htmlstmt:idx) = %trim(messageDs.text);
          endif;

          idx = %scan('(TTLMJR)':htmlstmt:1);
          if idx > 0;
             messageDs = web_zGetMessage('GAM6402':Msg_File:imsgprefix);
             %subst(htmlstmt:idx) = %trim(messageDs.text);
          endif;

          idx = %scan('(TTLYER)':htmlstmt:1);
          if idx > 0;
             messageDs = web_zGetMessage('GAM6403':Msg_File:imsgprefix);
             %subst(htmlstmt:idx) = %trim(messageDs.text);
          endif;

          idx = %scan('(TTLGMY)':htmlstmt:1);
          if idx > 0;
             messageDs = web_zGetMessage('GAM6398':Msg_File:imsgprefix);
             %subst(htmlstmt:idx) = %trim(messageDs.text);
          endif;

          idx = %scan('(TTLNAM)':htmlstmt:1);
          if idx > 0;
             messageDs = web_zGetMessage('GAM6404':Msg_File:imsgprefix);
             %subst(htmlstmt:idx) = %trim(messageDs.text);
          endif;

          idx = %scan('(TITL_5)':htmlstmt:1);
          if idx > 0;
             messageDs = web_zGetMessage('GAM6396':Msg_File:imsgprefix);
             %subst(htmlstmt:idx) = %trim(messageDs.text);
          endif;

          idx = %scan('(TITL_C)':htmlstmt:1);
          if idx > 0;
             messageDs = web_zGetMessage('GAM6397':Msg_File:imsgprefix);
             %subst(htmlstmt:idx) = %trim(messageDs.text);
          endif;

          idx = %scan('(TITL_8)':htmlstmt:1);
          if idx > 0;
             messageDs = web_zGetMessage('GAM6395':Msg_File:imsgprefix);
             %subst(htmlstmt:idx) = %trim(messageDs.text);
          endif;

          idx = %scan('(TITL_9)':htmlstmt:1);
          if idx > 0;
             messageDs = web_zGetMessage('GAM6399':Msg_File:imsgprefix);
             %subst(htmlstmt:idx) = %trim(messageDs.text);
          endif;

          //  ----search for ((DTTM)) Order Date/Time
          idx = %scan('((DTTM))':htmlstmt:1);
          if idx > 0;
             clear byte37;
             byte37 = DspTmStamp(tdate:ttime:itime_zone:'*WEB');
             %subst(htmlstmt:idx:%len(byte37)) = byte37;
          endif;

          // search for ((PAYSTAT)) Payment Status
          idx = %scan('((PAYSTAT))':htmlstmt:1);
          if idx > 0;
             byte30 = GAORD_paystat(orderds);
             %subst(htmlstmt:idx:%len(byte30)) = byte30;
          endif;

          //  ----search for ((DTTMP) Tracer Paid Date/Time
          idx = %scan('((DTTMP)':htmlstmt:1);
          if idx > 0;
             clear byte80;
             byte80 = DspTmStamp(tga_paiddt:tga_paidtm:itime_zone:'*WEB');
             byte80 = %trim(byte80) + ' by ' + tga_paidus;
             %subst(htmlstmt:idx:%len(byte80)) = byte80;
          endif;

       // Search for ((DTTMR) 3rd Party Receiveable Date/Time
       idx = %scan('((DTTMR)':htmlstmt:1);
       if idx > 0;
          byte50 = %trim(DspTmStamp(trcvbl_dt:0:0:'*DATE')) +
                   ' by ' + %trim(trcvbl_us) + ' to account ' +
                   %trim(trcvbluser);
          %subst(htmlstmt:idx:50) = byte50;
       endif;


       //  ----search for ((DTPRNT) Printed Date/Time
          idx = %scan('((DTPRNT)':htmlstmt:1);
          if idx         > 0;
             clear byte37;
             byte37      = DspTmStamp(tga_fin_dt:
                                          tga_fin_tm:
                                          itime_zone:
                                          '*WEB');
     c*                  movea     byte37        htm80(idx)
             %subst(htmlstmt:idx:%len(byte37)) = byte37;
          endif;

          //  ----search for ((DTTMX) For End Status Date/Time
          idx = %scan('((DTTMX)':htmlstmt:1);
          if idx         > 0;


       byte37 = DspTmStamp(tstat_e_dt:tstat_e_tm:itime_zone:'*WEB');


     c*                  movea     byte37        htm80(idx)
             %subst(htmlstmt:idx:%len(byte37)) = byte37;
          endif;

          //  ----search for (APPRVD for Approve checked?
          idx = %scan('(APPRVD':htmlstmt:1);
          if idx         > 0;
             if hga_apr_cd  = 'Y';
     c*                  movea     'CHECKED'     htm80(idx)
                %subst(htmlstmt:idx:8) = 'CHECKED';
             else;
     c*                  movea     '       '     htm80(idx)
                %subst(htmlstmt:idx:8) = '       ';
             endif;
          endif;

          //  ----search for (AUTHRZ for Authorized checked?

          idx = %scan('(AUTHRZ':htmlstmt:1);
          if idx         > 0;
             if hga_aut_cd  = 'Y';
     c*                  movea     'CHECKED'     htm80(idx)
                %subst(htmlstmt:idx:8) = 'CHECKED';
             else;
     c*                  movea     '       '     htm80(idx)
                %subst(htmlstmt:idx:8) = '       ';
             endif;
          endif;

          //  ----search for (PAIDCD for Paid checked? - COD orders only

          idx = %scan('(PAIDCD':htmlstmt:1);
          if idx         > 0;
             if hga_paidcd  = 'Y';
     c*                  movea     'CHECKED'     htm80(idx)
                %subst(htmlstmt:idx:8) = 'CHECKED';
             else;
     c*                  movea     '       '     htm80(idx)
                %subst(htmlstmt:idx:8) = '       ';
             endif;
          endif;

          //  ----search for (SRHPD) for search paid orders only?

          idx = %scan('(SRHPD)':htmlstmt:1);
          if idx         > 0;
             $$i = idx - 3;
             byte1 = htm80($$i);
             if hsrch_paid  = *blanks;
                hsrch_paid  = 'N';
             endif;
             if hsrch_paid  = byte1;
     c*                  movea     'CHECKED'     htm80(idx)
                %subst(htmlstmt:idx:8) = 'CHECKED';
             else;
     c*                  movea     '       '     htm80(idx)
                %subst(htmlstmt:idx:8) = '       ';
             endif;
          endif;

          //  ----search for ((MRTN)) for MAIL Returned SELECT

          idx = %scan('((MRTN))':htmlstmt:1);
          if idx         > 0;
             $$i = idx - 3;
             byte1 = htm80($$i);
             if hmailtype   = byte1;
     c*                  movea     'SELECTED'    htm80(idx)
                %subst(htmlstmt:idx:8) = 'SELECTED';
             else;
     c*                  movea     '        '    htm80(idx)
                %subst(htmlstmt:idx:8) = '        ';
             endif;
          endif;

          //  ----search for (((RPY)) for Reply Method SELECT

          idx = %scan('(((RPY))':htmlstmt:1);
          if idx         > 0;
             $$i = idx - 3;
             byte1 = htm80($$i);
             if hrpymethod  = byte1;
     c*                  movea     'SELECTED'    htm80(idx)
                %subst(htmlstmt:idx:8) = 'SELECTED';
             else;
     c*                  movea     '        '    htm80(idx)
                %subst(htmlstmt:idx:8) = '        ';
             endif;
          endif;

          //  ---(((EM:)) for email address

          idx = %scan('(((EM:))':htmlstmt:1);
          if idx > 0;
             byte52 = %trimr(hemail) + '">';
     c*                  movea     byte52        htm80(idx)
             %subst(htmlstmt:idx:%len(byte52)) = byte52;
          endif;

          //   ((OPTN) opt in code
          idx = %scan('((OPTN)':htmlstmt:1);
          if idx         > 0;
             if hem_optin   = 'Y';
                byte7       = 'CHECKED';
             else;
                byte7       = '       ';
             endif;
     c*                  movea     byte7         htm80(idx)
             %subst(htmlstmt:idx:%len(byte7)) = byte7;
          endif;

          //  ---(SHIP) for ship type

          idx = %scan('(SHIP)':htmlstmt:1);
          if idx > 0;
             byte10 = %trimr(hship) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  ---(AMTSHIP) for shiping cost

          idx = %scan('(AMTSHIP)':htmlstmt:1);
          if idx > 0;
             byte10      = %trim(%editc(otc_ship:'3')) +
                                '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  ---(RUSH) for rush service option

          idx = %scan('(RUSH)':htmlstmt:1);
          if idx > 0;
             byte10 = %trimr(hrush) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  ----Search for ((CER_TYPE  Certification Type
          idx = %scan('((CER_TYPE':htmlstmt:1);
          if idx > 0;

             abbrev      = ':' + hcerttype;
             chain (hfice : abbrev) abbrevrec;
             *in90 = not %found;
             if *in90       = *off;
                byte50 = atext;
             else;
                byte50      = 'NOT FOUND';
             endif;
     c*                  movea     byte50        htm80(idx)
             %subst(htmlstmt:idx:%len(byte50)) = byte50;
          endif;

          //  ----Search for ((CER_NUM#  Certification Number
          idx = %scan('((CER_NUM#':htmlstmt:1);
          if idx > 0;
             byte10      = hcertnum;
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  ----Search for ((CER_EXAM  Certification Exam Month-Year
          idx = %scan('((CER_EXAM':htmlstmt:1);
          if idx > 0;
             byte10      = %subst(tapp_data4:5:2) +
                 '-' + %subst(tapp_data4:1:4);
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  ----Search for ((CER_NAME  Name to appear on Certification
          idx = %scan('((CER_NAME':htmlstmt:1);
          if idx > 0;
     c*                  movea     hdip_name     htm80(idx)
             %subst(htmlstmt:idx:%len(hdip_name)) = hdip_name;
          endif;

          //  ----Search for ((CER_PNAM  Certification Name at Time of Cert
          idx = %scan('((CER_PNAM':htmlstmt:1);
          if idx > 0;
     c*                  movea     hcer_pname    htm80(idx)
             %subst(htmlstmt:idx:%len(hcer_pname))= hcer_pname;
          endif;

          //  (UTYPE)  for husrtype
          idx         = %scan('(UTYPE)':htmlstmt:1);
          if idx         > 0;
             $$i = idx - 3;
             byte1 = htm80($$i);
             if husrtype    = byte1;
     c*                  movea     'SELECTED'    htm80(idx)
                %subst(htmlstmt:idx:8) = 'SELECTED';
             else;
     c*                  movea     '        '    htm80(idx)
                %subst(htmlstmt:idx:8) = '        ';
             endif;
          endif;

          //  ----Search for ((CER_PLOC  Certification Program Location
          idx = %scan('((CER_PLOC':htmlstmt:1);
          if idx > 0;
     c*                  movea     hcer_pgloc    htm80(idx)
             %subst(htmlstmt:idx:%len(hcer_pgloc))= hcer_pgloc;
          endif;

          //  (PROD) Product type

          idx = %scan('(PROD)':htmlstmt:1);
          if idx > 0;
             clear byte4;
             byte4       = hrecid + hproduct +
                               husrtype;
             NCatLen = %len(%trimr(byte4)) + %len('">');
             if NCatLen < %len(byte10);
                %subst(byte10:1:NCatLen) = %trimr(byte4) +
                    '">';
             else;
                byte10 = %trimr(byte4) + '">';
             endif;
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (NUMPMIT) the number of permits ordered

          idx = %scan('(NUMPMIT)':htmlstmt:1);
          if idx > 0;
             byte10 = %trimr(hnumpmits) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (DELATN) delivery attention

          idx = %scan('(DELATN)':htmlstmt:1);
          if idx > 0;
             string37 = %trimr(hdel_attn) + '">';
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  &DNL delivery attention length

          idx = %scan('&DNL':htmlstmt:1);
          if idx > 0;
             evalr byte2 = %editc(ilen_dname:'X');
             byte4 = byte2;
     c*                  movea     byte4         htm80(idx)
             %subst(htmlstmt:idx:%len(byte4)) = byte4;
          endif;

          //  (DELAD1) delivery address line 1

          idx = %scan('(DELAD1)':htmlstmt:1);
          if idx > 0;
             string37 = %trimr(hdel_addr1) + '">';
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  &D1L delivery address 1 length

          idx = %scan('&D1L':htmlstmt:1);
          if idx > 0;
             evalr byte2 = %editc(ilen_dadd1:'X');
             byte4 = byte2;
     c*                  movea     byte4         htm80(idx)
             %subst(htmlstmt:idx:%len(byte4)) = byte4;
          endif;

          //  (DELAD2) delivery address line 2

          idx = %scan('(DELAD2)':htmlstmt:1);
          if idx > 0;
             string37 = %trimr(hdel_addr2) + '">';
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  &D2L delivery address 2 length

          idx = %scan('&D2L':htmlstmt:1);
          if idx > 0;
             evalr byte2 = %editc(ilen_dadd2:'X');
             byte4 = byte2;
     c*                  movea     byte4         htm80(idx)
             %subst(htmlstmt:idx:%len(byte4)) = byte4;
          endif;

          //  (DELAD3) delivery address line 3

          idx = %scan('(DELAD3)':htmlstmt:1);
          if idx > 0;
             string37 = %trimr(hdel_addr3) + '">';
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  &D3L delivery address 3 length

          idx = %scan('&D3L':htmlstmt:1);
          if idx > 0;
             evalr byte2 = %editc(ilen_dadd3:'X');
             byte4 = byte2;
     c*                  movea     byte4         htm80(idx)
             %subst(htmlstmt:idx:%len(byte4)) = byte4;
          endif;

          //  (DELCTY) delivery city

          idx = %scan('(DELCTY)':htmlstmt:1);
          if idx > 0;
             string27 = %trimr(hdel_city) + '">';
     c*                  movea     string27      htm80(idx)
             %subst(htmlstmt:idx:%len(string27)) = string27;
          endif;

          //  &DCL delivery city length

          idx = %scan('&DCL':htmlstmt:1);
          if idx > 0;
             evalr byte2 = %editc(ilen_dcity:'X');
             byte4 = byte2;
     c*                  movea     byte4         htm80(idx)
             %subst(htmlstmt:idx:%len(byte4)) = byte4;
          endif;

          //  (DELEMF) delivery email/fax no.

          idx = %scan('(DELEMF)':htmlstmt:1);
          if idx > 0;
             string52 = %trimr(haddress) + '">';
     c*                  movea     string52      htm80(idx)
             %subst(htmlstmt:idx:%len(string52)) = string52;
          endif;

          //  (DELSTA) delivery state

          idx = %scan('(DELSTA)':htmlstmt:1);
          if idx > 0;
             string8 = %trimr(hdel_state) + '">';
     c*                  movea     string8       htm80(idx)
             %subst(htmlstmt:idx:%len(string8)) = string8;
          endif;

          //  (DELTEL) delivery telephone number

          idx = %scan('(DELTEL)':htmlstmt:1);
          if idx > 0;
             string22 = %trimr(hdel_tel#) + '">';
     c*                  movea     string22      htm80(idx)
             %subst(htmlstmt:idx:%len(string22)) = string22;
          endif;

          //  (DELZIP) delivery zip code

          idx = %scan('(DELZIP)':htmlstmt:1);
          if idx > 0;
             string12 = %trimr(hdel_zip) + '">';
     c*                  movea     string12      htm80(idx)
             %subst(htmlstmt:idx:%len(string12)) = string12;
          endif;

          //  (DELATNS) delivery attention

          idx = %scan('(DELATNS)':htmlstmt:1);
          if idx > 0;
             string37    = hdel_attn;
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  (DELAD1S) delivery address line 1

          idx = %scan('(DELAD1S)':htmlstmt:1);
          if idx > 0;
             string37    = hdel_addr1;
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  (DELAD2S) delivery address line 2

          idx = %scan('(DELAD2S)':htmlstmt:1);
          if idx > 0;
             string37    = hdel_addr2;
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  (DELAD3S) delivery address line 3

          idx = %scan('(DELAD3S)':htmlstmt:1);
          if idx > 0;
             string37    = hdel_addr3;
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  (DELCTYS) delivery city

          idx = %scan('(DELCTYS)':htmlstmt:1);
          if idx > 0;
             string27    = hdel_city;
     c*                  movea     string27      htm80(idx)
             %subst(htmlstmt:idx:%len(string27)) = string27;
          endif;

          //  (DELEMFS) delivery email/fax no.

          idx = %scan('(DELEMFS)':htmlstmt:1);
          if idx > 0;
             string52    = haddress;
     c*                  movea     string52      htm80(idx)
             %subst(htmlstmt:idx:%len(string52)) = string52;
          endif;

          //  (DELSTAS) delivery state

          idx = %scan('(DELSTAS)':htmlstmt:1);
          if idx > 0;
             byte10      = hdel_state;
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (DELTELS) delivery telephone number

          idx = %scan('(DELTELS)':htmlstmt:1);
          if idx > 0;
             string22    = hdel_tel#;
     c*                  movea     string22      htm80(idx)
             %subst(htmlstmt:idx:%len(string22)) = string22;
          endif;

          //  (DELZIPS) delivery zip code

          idx = %scan('(DELZIPS)':htmlstmt:1);
          if idx > 0;
             string12    = hdel_zip;
     c*                  movea     string12      htm80(idx)
             %subst(htmlstmt:idx:%len(string12)) = string12;
          endif;

          //  ---((EMAILS) for email address summary

          idx = %scan('((EMAILS)':htmlstmt:1);
          if idx > 0;
             byte52      = hemail;
     c*                  movea     byte52        htm80(idx)
             %subst(htmlstmt:idx:%len(byte52)) = byte52;
          endif;

          //  ---(COMMENT) for the additional comments

          idx = %scan('(COMMENT)':htmlstmt:1);
          if idx > 0;
             bufout = %trimr(bufout) + hcomment1;
             bufout = %trimr(bufout) + hcomment2;
             bufout = %trimr(bufout) + '">';
             bytesize = bytesize + 100;
             exsr sendbufr;
             clear htm80;
          endif;

          //  ((HSE#)) for address house number

          idx = %scan('((HSE#))':htmlstmt:1);
          if idx > 0;
             byte12 = %trimr(hstr_hnum) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  (STREET) street name

          idx = %scan('(STREET)':htmlstmt:1);
          if idx > 0;
             string27 = %trimr(hstr_name) + '">';
     c*                  movea     string27      htm80(idx)
             %subst(htmlstmt:idx:%len(string27)) = string27;
          endif;

          //  ((UNIT)) for unit / apt number

          idx = %scan('((UNIT))':htmlstmt:1);
          if idx > 0;
             byte10 = %trimr(hstr_apt) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  ----search for (VALDR1) for Valid Street Addr Direction

          idx = %scan('(VALDR1)':htmlstmt:1);
          if idx         > 0;
             $$i = idx - 4;
     c*                  movea     htm80($$i)    byte2
             byte2 = %subst(htmlstmt:$$i:%len(byte2));
             if hvald_dir1  = byte2;
     c*                  movea     'SELECTED'    htm80(idx)
                %subst(htmlstmt:idx:8) = 'SELECTED';
             else;
     c*                  movea     '        '    htm80(idx)
                %subst(htmlstmt:idx:8) = '        ';
             endif;
          endif;

          //  ----search for (VALDR2) for Valid Street Addr Direction

          idx = %scan('(VALDR2)':htmlstmt:1);
          if idx         > 0;
             $$i = idx - 4;
     c*                  movea     htm80($$i)    byte2
             byte2 = %subst(htmlstmt:$$i:%len(byte2));
             if hvald_dir2  = byte2;
     c*                  movea     'SELECTED'    htm80(idx)
                %subst(htmlstmt:idx:8) = 'SELECTED';
             else;
     c*                  movea     '        '    htm80(idx)
                %subst(htmlstmt:idx:8) = '        ';
             endif;
          endif;

          //  (VALEND1) valid street address range end 1

          idx = %scan('(VALEND1)':htmlstmt:1);
          if idx > 0;
             byte10 = %trimr(hvald_end1) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (VALEND2) valid street address range end 2

          idx = %scan('(VALEND2)':htmlstmt:1);
          if idx > 0;
             byte10 = %trimr(hvald_end2) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (VALSTR1) valid street address range start 1

          idx = %scan('(VALSTR1)':htmlstmt:1);
          if idx > 0;
             byte10 = %trimr(hvald_str1) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (VALSTR2) valid street address range start 2

          idx = %scan('(VALSTR2)':htmlstmt:1);
          if idx         > 0;
             byte10 = %trimr(hvald_str2) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (((HNF)) for First Name
          idx = %scan('(((HNF))':htmlstmt:1);
          if idx         > 0;
             byte22      = %trim(hfrstname) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (((HNM)) for Middle Name
          idx = %scan('(((HNM))':htmlstmt:1);
          if idx         > 0;
             byte22      = %trim(hmidlname) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (((HNL)) for Last Name
          idx = %scan('(((HNL))':htmlstmt:1);
          if idx         > 0;
             byte37      = %trim(hlastname) + '">';
     c*                  movea     byte37        htm80(idx)
             %subst(htmlstmt:idx:%len(byte37)) = byte37;
          endif;

          //   (SFX)  Student last name suffix

          idx = %scan('(SFX)':htmlstmt:1);
          if idx         > 0;
             clear byte12;
             byte12      = %trim(hsuffix) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  (IDCODE) for Business ID code

          idx = %scan('(IDCODE)':htmlstmt:1);
          if idx > 0;
             clear byte10;
             byte10      = %trim(%char(hidcode));
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (BILLUSER) for 3rd Party Receivable BILLING USERID

          idx = %scan('(BILLUSER)':htmlstmt:1);
          if idx > 0;
             clear byte12;
             byte12      = %trim(ky_billusr) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  (CNTACT) for Business Contact Name

          idx = %scan('(CNTACT)':htmlstmt:1);
          if idx > 0;
             string37 = %trimr(hcontact) + '">';
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  (CMPANY) for Company Name

          idx = %scan('(CMPANY)':htmlstmt:1);
          if idx > 0;
             string37 = %trimr(hcompany) + '">';
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  (((HA1)) for address line 1 (input)

          idx = %scan('(((HA1))':htmlstmt:1);
          if idx > 0;
             string37 = %trimr(haddr1) + '">';
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  [[[HA1]] for address line 1 (text)

          idx = %scan('[[[HA1]]':htmlstmt:1);
          if idx > 0;
             clear string37;
             string37    = haddr1;
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  (((HCI)) for city (input)

          idx = %scan('(((HCI))':htmlstmt:1);
          if idx > 0;
             string27 = %trimr(hcity) + '">';
     c*                  movea     string27      htm80(idx)
             %subst(htmlstmt:idx:%len(string27)) = string27;
          endif;

          //  [[HCSZ]] for city, state  zip (text)

          idx = %scan('[[HCSZ]]':htmlstmt:1);
          if idx > 0;
             clear byte70;
             byte70      = %trim(hcity) + ', ' +
                               hstate + '  ' + hpostcd;
     c*                  movea     byte70        htm80(idx)
             %subst(htmlstmt:idx:%len(byte70)) = byte70;
          endif;

          //  (((HST)) for state (input)

          idx = %scan('(((HST))':htmlstmt:1);
          if idx > 0;
             string12 = %trimr(hstate) + '">';
     c*                  movea     string12      htm80(idx)
             %subst(htmlstmt:idx:%len(string12)) = string12;
          endif;

          //  (((HZC)) for Zip Code (input)

          idx = %scan('(((HZC))':htmlstmt:1);
          if idx > 0;
             string12 = %trimr(hpostcd) + '">';
     c*                  movea     string12      htm80(idx)
             %subst(htmlstmt:idx:%len(string12)) = string12;
          endif;

          //  ((HTL)) for telephone

          idx = %scan('((HTL))':htmlstmt:1);
          if idx > 0;
             byte22 = %trimr(htel#) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (POBOX)) for PO BOX # (input)

          idx = %scan('(POBOX))':htmlstmt:1);
          if idx > 0;
             string37 = %trimr(hpo_box#) + '">';
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  (ALTA1)) for alternate address line 1 (input)

          idx = %scan('(ALTA1))':htmlstmt:1);
          if idx > 0;
             string37 = %trimr(halt_addr1) + '">';
     c*                  movea     string37      htm80(idx)
             %subst(htmlstmt:idx:%len(string37)) = string37;
          endif;

          //  (ALTCI)) for alternate city (input)

          idx = %scan('(ALTCI))':htmlstmt:1);
          if idx > 0;
             string27 = %trimr(halt_city) + '">';
     c*                  movea     string27      htm80(idx)
             %subst(htmlstmt:idx:%len(string27)) = string27;
          endif;

          //  (ALTST)) for alternate state (input)

          idx = %scan('(ALTST))':htmlstmt:1);
          if idx > 0;
             string12 = %trimr(halt_state) + '">';
     c*                  movea     string12      htm80(idx)
             %subst(htmlstmt:idx:%len(string12)) = string12;
          endif;

          //  (ALTZC)) for alternate Zip Code (input)

          idx = %scan('(ALTZC))':htmlstmt:1);
          if idx > 0;
             string12 = %trimr(halt_zipcd) + '">';
     c*                  movea     string12      htm80(idx)
             %subst(htmlstmt:idx:%len(string12)) = string12;
          endif;

          //  ----(INOUT) for Res Out of city checkbox

          idx = %scan('(INOUT)':htmlstmt:1);
          if idx         > 0;
             $$i = idx - 3;
             byte1 = htm80($$i);
             if hin_out     = byte1;
     c*                  movea     'CHECKED'     htm80(idx)
             %subst(htmlstmt:idx:8)= 'CHECKED';
             else;
     c*                  movea     '       '     htm80(idx)
             %subst(htmlstmt:idx:8) = '       ';
             endif;
          endif;

          //  (BNEMPL) # of Business Employees

          idx = %scan('(BNEMPL)':htmlstmt:1);
          if idx > 0;
             byte10 = %char(b#_employs) + '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (BPNUSR) Business Pin Userid

          idx = %scan('(BPNUSR)':htmlstmt:1);
          if idx > 0;
             byte10      = %trim(bpin_user) +
                                 '">';
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (BPIN#)) Business Pin #

          idx = %scan('(BPIN#))':htmlstmt:1);
          if idx > 0;
             byte10      = bpin#;
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (BCGUSR) Business File change user

          idx = %scan('(BCGUSR)':htmlstmt:1);
          if idx > 0;
             byte10      = bchguser;
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (BCHGDT) Business file change date

          idx = %scan('(BCHGDT)':htmlstmt:1);
          if idx > 0;
             byte10      = dspTmStamp(bchgdate:
                                          0:0:'*DATE');
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (BCHGTM) Business file change time

          idx = %scan('(BCHGTM)':htmlstmt:1);
          if idx > 0;
             byte10      = dspTmStamp(bchgtime:
                                          0:0:'*TIME');
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;

          //  (VCL_*) for vehicle class radio CHECKED
          idx = %scan('(VCL_':htmlstmt:1);
          if idx > 0;
             byte1       = %subst(htmlstmt:idx+5:1);
             if byte1       = hveh_class;
                byte7       = 'CHECKED';
             else;
                byte7       = '       ';
             endif;
     c*                  movea     byte7         htm80(idx)
             %subst(htmlstmt:idx:%len(byte7)) = byte7;
          endif;

          //  (VAC_*) for vehicle action checkbox CHECKED
          idx = %scan('(VAC_':htmlstmt:1);
          if idx > 0;
             byte1       = %subst(htmlstmt:idx+5:1);
             if byte1       = hvehaction;
                byte7       = 'CHECKED';
             else;
                byte7       = '       ';
             endif;
     c*                  movea     byte7         htm80(idx)
             %subst(htmlstmt:idx:%len(byte7)) = byte7;
          endif;

          //  (VFRSTN) for vehicle first name
          idx = %scan('(VFRSTN)':htmlstmt:1);
          if idx > 0;
             byte22      = %trim(hvfrstname) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (VMIDLN) for vehicle middle name
          idx = %scan('(VMIDLN)':htmlstmt:1);
          if idx > 0;
             byte22      = %trim(hvmidlname) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (VLASTN) for vehicle last name
          idx = %scan('(VLASTN)':htmlstmt:1);
          if idx > 0;
             byte37      = %trim(hvlastname) + '">';
     c*                  movea     byte37        htm80(idx)
             %subst(htmlstmt:idx:%len(byte37)) = byte37;
          endif;

          //  (VLASTORD#) for Vehicles Last Order#
          idx = %scan('(VLASTORD#)':htmlstmt:1);
          if idx         > 0;
             byte12      = %trim(hlastordr#) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  (VPLATE) for vehicle Plate
          idx = %scan('(VPLATE)':htmlstmt:1);
          if idx         > 0;
             byte12      = %trim(hveh_plate) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  (VK_PLISS) for vehicle state of issue Plate - hidden KEY
          idx = %scan('(VK_PLISS)':htmlstmt:1);
          if idx > 0;
             byte12      = %trim(h_kpliss) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  (VK_PLATE) for vehicle Plate - hidden KEY
          idx = %scan('(VK_PLATE)':htmlstmt:1);
          if idx > 0;
             byte12      = %trim(h_kplate) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  (SV_DLNUM) for saved Drivers License number
          idx = %scan('(SV_DLNUM)':htmlstmt:1);
          if idx > 0;
             byte17      = %trim(hold_dlnum) + '">';
     c*                  movea     byte17        htm80(idx)
             %subst(htmlstmt:idx:%len(byte17)) = byte17;
          endif;

          //  (VBODY) for Vehicle Body Type Select

          idx = %scan('(VBODY)':htmlstmt:1);
          if idx > 0;
             $$i = idx - 14;
     c*                  movea     htm80($$i)    byte12
             byte12 = %subst(htmlstmt:$$i:%len(byte12));
             if hveh_body   = byte12;
     c*                  movea     'SELECTED'    htm80(idx)
             %subst(htmlstmt:idx:8) = 'SELECTED';
             else;
     c*                  movea     '        '    htm80(idx)
             %subst(htmlstmt:idx:8) = '        ';
             endif;
          endif;

          //  (VMODEL) for Vehicle Model

          idx = %scan('(VMODEL)':htmlstmt:1);
          if idx         > 0;
             byte22      = %trim(hveh_model) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (VYEAR) for vehicle year
          idx = %scan('(VYEAR)':htmlstmt:1);
          if idx > 0;
             byte12      = %trim(hveh_year) + '">';
     c*                  movea     byte12        htm80(idx)
             %subst(htmlstmt:idx:%len(byte12)) = byte12;
          endif;

          //  (VCOLOR) for Vehicle Color
          idx = %scan('(VCOLOR)':htmlstmt:1);
          if idx > 0;
             byte22      = %trim(hveh_color) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (VSTCKR) for Vehicle Sticker
          idx = %scan('(VSTCKR)':htmlstmt:1);
          if idx > 0;
             byte22      = %trim(hveh_stckr) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (VVIN#) for Vehicle Vin#
          idx = %scan('(VVIN#)':htmlstmt:1);
          if idx > 0;
             byte22      = %trim(hveh_vin#) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (VDLNUM) for Drivers License
          idx = %scan('(VDLNUM)':htmlstmt:1);
          if idx > 0;
             byte22      = %trim(hveh_dlnum) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  [VDLNUM] for Drivers License - TEXT only
          idx = %scan('[VDLNUM]':htmlstmt:1);
          if idx > 0;
             byte22      = %trim(hveh_dlnum);
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (SNRSEL) for Senior Discount - Senior SELECTED
          idx = %scan('(SNRSEL)':htmlstmt:1);
          if idx         > 0;
             i1          = idx - 3;
             if hvehsenior  = htm80(i1);
     c*                  movea     'SELECTED'    htm80(idx)
             %subst(htmlstmt:idx:8) = 'SELECTED';
             else;
     c*                  movea     '        '    htm80(idx)
             %subst(htmlstmt:idx:8) = '        ';
             endif;
          endif;

          //  (VSENIOR) for Senior Discount value
          idx = %scan('(VSENIOR)':htmlstmt:1);
          if idx         > 0;
             if hvehsenior  = 'Y';
     c*                  movea     'YES       '  htm80(idx)
             %subst(htmlstmt:idx:10) = 'YES       ';
             else;
     c*                  movea     'NO        '  htm80(idx)
             %subst(htmlstmt:idx:10) = 'NO        ';
             endif;
          endif;

          //  (VPRDCOD) for Vehicle Special Code
          idx = %scan('(VPRDCOD)':htmlstmt:1);
          if idx > 0;
             byte22      = %trim(hveh_prdcd) + '">';
     c*                  movea     byte22        htm80(idx)
             %subst(htmlstmt:idx:%len(byte22)) = byte22;
          endif;

          //  (PK_TYPE) for Pet Type - hidden KEY
          idx = %scan('(PK_TYPE)':htmlstmt:1);
          if idx > 0;
             byte27      = %trim(h_ktype) + '">';
     c*                  movea     byte27        htm80(idx)
             %subst(htmlstmt:idx:%len(byte27)) = byte27;
          endif;

          //  (PK_NAME) for Pet Name - hidden KEY
          idx = %scan('(PK_NAME)':htmlstmt:1);
          if idx > 0;
             byte27      = %trim(h_kname) + '">';
     c*                  movea     byte27        htm80(idx)
             %subst(htmlstmt:idx:%len(byte27)) = byte27;
          endif;

          //  (PTYPSEL for Pet Type "SELECTED"

          idx = %scan('(PTYPSEL':htmlstmt:1);
          if idx         > 0;
             i1          = idx - 3;
             if hpet_type   = htm80(i1);
     c*                  movea     'SELECTED'    htm80(idx)
                %subst(htmlstmt:idx:8) = 'SELECTED';
             else;
     c*                  movea     '        '    htm80(idx)
                %subst(htmlstmt:idx:8) = '        ';
             endif;
          endif;

          //  (PNAME) for Pet Name
          idx = %scan('(PNAME)':htmlstmt:1);
          if idx > 0;
             byte27      = %trim(hpet_name) + '">';
     c*                  movea     byte27        htm80(idx)
             %subst(htmlstmt:idx:%len(byte27)) = byte27;
          endif;

          //  (PCOLOR) for Pet Color
          idx = %scan('(PCOLOR)':htmlstmt:1);
          if idx > 0;
             byte27      = %trim(hpet_color) + '">';
     c*                  movea     byte27        htm80(idx)
             %subst(htmlstmt:idx:%len(byte27)) = byte27;
          endif;

          //  (PBREED) for Pet Breed

          idx = %scan('(PBREED)':htmlstmt:1);
          if idx         > 0;
             byte37      = %trim(hpet_breed) + '">';
     c*                  movea     byte37        htm80(idx)
             %subst(htmlstmt:idx:%len(byte37)) = byte37;
          endif;

          //  (PSEXSEL for Pet Sex "SELECTED"

          idx = %scan('(PSEXSEL':htmlstmt:1);
          if idx         > 0;
             i1          = idx - 3;
             if hpet_sex    = htm80(i1);
     c*                  movea     'SELECTED'    htm80(idx)
                %subst(htmlstmt:idx:8) = 'SELECTED';
             else;
     c*                  movea     '        '    htm80(idx)
                %subst(htmlstmt:idx:8) = '        ';
             endif;
          endif;

          //  (RABIESY4) for Rabies 4 Digit year

          idx = %scan('(RABIESY4)':htmlstmt:1);
          if idx         > 0;
             byte37      = %trim(hrabies_y4) + '">';
     c*                  movea     byte37        htm80(idx)
                %subst(htmlstmt:idx:%len(byte37)) = byte37;
          endif;

          //  ((REI) for The Re-issue Method Command
          //         PP is the OTC re-issue method
          //         MS is the we Mail a Permit out again method
          idx = %scan('((REI)':htmlstmt:1);
          if idx         > 0;
             if grplc_meth  = 'M' and
                    ttempperm#  = *blanks and
                    tsource    <> 'OTC';
                byte6       = 'MS_REI';
             elseif gapplid     = 'MS';
                byte6       = 'MS_REI';
             else;
                byte6       = 'PP_REI';
             endif;
     c*                  movea     byte6         htm80(idx)
             %subst(htmlstmt:idx:%len(byte6)) = byte6;
          endif;

          //  ----Search for ((TDYS)) # days temp permit is valid
          idx = %scan('((TDYS))':htmlstmt:1);
          if idx         > 0;
             clear byte12;
             byte10      = %char(ga_tempdys);
     c*                  movea     byte10        htm80(idx)
             %subst(htmlstmt:idx:%len(byte10)) = byte10;
          endif;


       //---Search for ((TDATE) # days temp permit is valid
       idx = %scan('((TDATE)':htmlstmt:1);
       if idx > 0;
          %subst(htmlstmt:idx:25) = dspTmStamp(ga_tempdat:0:0:'*DATE');
       endif;

       //---Search for ((TAMT)) # Total amount for DP orders
       idx = %scan('((TAMT))':htmlstmt:1);
       if idx > 0;
          %subst(htmlstmt:idx:11) = '$' + %trim(%EDITC(tamt_total:'3'));
       endif;

       //---Search for ((TTRK)) # Tracking number
       idx = %scan('((TTRK))':htmlstmt:1);
       if idx > 0;
          if tapp_datab = *blanks;
             htmlstmt = %replace('':htmlstmt:idx:8);
          else;
             htmlstmt = %replace(%trim(tapp_datab):htmlstmt:idx:8);
          endif;
       endif;

       endsr;

       // **************************************************************
       //    WrtPanel:  Standard CLLC routine to write a screen panel to
       //               output buffer
       // **************************************************************
       begsr WrtPanel;

          // --------------------------------------------------------------
          //    if this is a menu panel, then get the user's authorities
          // --------------------------------------------------------------
          if panel       = '#MENU' or
                 panel       = '#MS_QUICK';
             if NOT %open(dvclientf2);
                open(e) dvclientf2;
                *in97 = %error;
             endif;
             chain(n) huserid authority;
             *in90 = not %found;
          endif;

          // - CLEAR OUT AUTHORITY IF NO MASTER RECORD FOR APPLID PRESENT
          if panel       = '#MENU' and
                 origin      = 'CLLC';
             if NOT %open(gamaster1);
                open gamaster1;
             endif;

             //   If no diploma, check for CE before clearing
             the_applid  = 'DP';
             chain (hfice : the_applid) ga_master;
             *in90 = not %found;
             if *in90       = *on;
                the_applid  = 'CE';
                chain (hfice : the_applid) ga_master;
                *in90 = not %found;
                if *in90;
                   clear cau_ga_dp;
                endif;
             endif;
             the_applid  = 'MS';
             chain (hfice : the_applid) ga_master;
             *in90 = not %found;
             if *in90;
                clear cau_ga_ms;
             endif;
             the_applid  = 'PP';
             chain (hfice : the_applid) ga_master;
             *in90 = not %found;
             if *in90;
                clear cau_ga_pp;
             endif;
          endif;

          // --------------------------------------------------------------
          //    if this is an OTC Order, allow for CLLC only
          // --------------------------------------------------------------
          //    Set OTC Batch Orders to DOWN for outside orders  TURNED OFF
          //                   if        origin     <> 'CLLC' and
          //                             panel       = '#PP_OTC   '
          //                   eval      panel       = '#PP_OTCDN '
          //                   endif

          //    Loop through the panel that was given

          @r = 1;
          @r = %lookup(PanelEntry : screens : @r);
          *in90 = (@r > 0);
       // *CVTWNG : %Equal & %Found are not updated by %Lookup
          if @r = 0;
             @r = 1;
          endif;
          @from = @r;
          @from = @from + 1;
          @to = 0;
          @loc_of_# = 0;
          @r = (@r * 26) + 1;
          @loc_of_# = %scan('#':screends:@r);
          @to = (@loc_of_# - 1) / 26;

          for @r = @from To @to;
             element_ds = screens(@r);

             select;
                   // ------------------
                when element_wd = 'MSG';
                   exsr WrtPanlMsg;

                   // ------------------
                when element_wd = 'RTN';


                   select;
                      when element_fl = '3RDD';
                         exsr Rtn_3rdDsp;
                      when element_fl = '3RDE';
                         exsr Rtn_3rdEdt;
                      when element_fl = 'ADDR';
                         exsr Rtn_Addr;
                      when element_fl = 'BLST';
                         exsr Rtn_BusLst;
                      when element_fl = 'BSED';
                         exsr Rtn_BusEdt;
                      when element_fl = 'CMNT';
                         exsr Rtn_Cmnt;
                      when element_fl = 'CMMS';
                         exsr Rtn_CmntMS;
                      when element_fl = 'DELY';
                         exsr Rtn_Dely;
                      when element_fl = 'DPCS';
                         exsr Rtn_DP_cs;
                      when element_fl = 'ERRS';
                         exsr Rtn_Errs;
                      when element_fl = 'ALRT';
                         exsr rtnAlerts;
                      when element_fl = 'GOT1';
                         exsr Rtn_Goto1;
                      when element_fl = 'GOT2';
                         exsr Rtn_Goto2;
                      when element_fl = 'HDRS';
                         exsr Rtn_Hdrs;
                      when element_fl = 'HEAD';
                         exsr Rtn_Head;
                      when element_fl = 'JQYF';
                         exsr rtn_jqFuncs;
                      when element_fl = 'LPRC';
                         exsr rtn_lprcites;
                      when element_fl = 'LPRP';
                         exsr rtn_lprplates;
                      when element_fl = 'LPRS';
                         exsr rtn_lprscan;
                      when element_fl = 'MOV2';
                         exsr Rtn_Move2;
                      when element_fl = 'MUNI';
                         exsr Rtn_Muni;
                      when element_fl = 'MSRH';
                         exsr Rtn_MN_Srh;
                      when element_fl = 'MRTN';
                         exsr Rtn_ML_rtn;
                      when element_fl = 'NCOA';
                         exsr Rtn_NCOA;
                      when element_fl = 'NWIN';
                         exsr Rtn_NEWwin;
                      when element_fl = 'OSRH';
                         exsr Rtn_Ord_Srch1;
                      when element_fl = 'OTCP';
                         exsr Rtn_OTC_p;
                      when element_fl = 'PASS';
                         exsr Rtn_Pass;
                      when element_fl = 'PEDT';
                         exsr Rtn_PT_Edt;
                      when element_fl = 'PVAL';
                         exsr Rtn_PassVal;
                      when element_fl = 'REDT';
                         exsr Rtn_RS_Edt;
                      when element_fl = 'RERR';
                         exsr Rtn_ResErr;
                      when element_fl = 'RPT1';
                         exsr Rtn_Rept1;
                      when element_fl = 'RPPP';
                         exsr Rtn_ReptPP;
                      when element_fl = 'RUSH';
                         exsr Rtn_Rush;
                      when element_fl = 'SHIP';
                         exsr Rtn_Ship;
                      when element_fl = 'SRC1';
                         exsr Rtn_Srch1;
                      when element_fl = 'SRC2';
                         exsr Rtn_Srch2;
                      when element_fl = 'STAT';
                         exsr Rtn_PP_Sts;
                      when element_fl = 'STRT';
                         exsr Rtn_Street;
                      when element_fl = 'STED';
                         exsr Rtn_Stredt;
                      when element_fl = 'TRAK';
                         exsr Rtn_Trak;
                      when element_fl = 'VEDT';
                         exsr Rtn_VE_Edt;
                      when element_fl = '_CEL';
                         exsr Rtn_CE_Lst;
                      when element_fl = '_CE1';
                         exsr Rtn_CE_1;
                      when element_fl = '_CE2';
                         exsr Rtn_CE_2;
                      when element_fl = '_CE3';
                         exsr Rtn_CE_3;
                      when element_fl = '_CE4';
                         exsr Rtn_CE_4;
                      when element_fl = '_DPL';
                         exsr Rtn_DP_Lst;
                      when element_fl = '_DP1';
                         exsr Rtn_DP_1;
                      when element_fl = '_DP2';
                         exsr Rtn_DP_2;
                      when element_fl = '_DP3';
                         exsr Rtn_DP_3;
                      when element_fl = '_DP4';
                         exsr Rtn_DP_4;
                      when element_fl = '_EXT';
                         exsr Rtn_Ext;
                      when element_fl = '_GTL';
                         exsr Rtn_GT_Lst;
                      when element_fl = '_HST';
                         exsr Rtn_Histry;
                      when element_fl = '_MOV';
                         exsr Rtn_Move;
                      when element_fl = '_MS1';
                         exsr Rtn_MS_1;
                      when element_fl = '_MSG';
                         exsr Rtn_Msg;
                      when element_fl = '_PHL';
                         exsr Rtn_PP_Hot;
                      when element_fl = '_PP1';
                         exsr Rtn_PP_1;
                      when element_fl = '_PPL';
                         exsr Rtn_PP_Lst;
                      when element_fl = '_PPP';
                         exsr Rtn_PP_Pay;
                      when element_fl = '_PYL';
                         exsr Rtn_PayLst;
                      when element_fl = '_RVP';
                         exsr Rtn_ReVePe;
                      when element_fl = '_RE2';
                         exsr Rtn_ReVe2;
                      when element_fl = '_SND';
                         exsr Rtn_ReSend;
                      other;
                         exsr RtnFail;
                   endsl;

                   // --Select Boxes
                when element_wd = 'SLT';
                   if element_fl  = 'MONT';
                      slct_type   = 'MON';
                   elseif element_fl  = 'MNTH';
                      slct_type   = 'MTH';
                   elseif element_fl  = 'YEAR';
                      slct_type   = 'YEA';
                   elseif element_fl  = 'PROD';
                      slct_type   = 'PRD';
                   elseif element_fl  = 'DAYS';
                      slct_type   = 'DAY';
                   elseif element_fl  = 'NUMP';
                      slct_type   = 'NUM';
                   elseif element_fl  = 'SUPR';
                      if csuperuser <> *blanks and
                             csuperuser <> 'XX ';
                         slct_type   = 'SPR';
                      else;
                         iter;
                      endif;
                   endif;
                   exsr do_select;

                   // ------------------
                other;
                   iter;
             endsl;
             // ------------------

          endfor;

          //       send any remaining HTML to user
          if bytesize    > 0;
             exsr sendbufr;
          endif;

       endsr;


       // **************************************************************
       //    WrtPanlGet:  Routine used for writing panels and writing
       //                 e-mail messages.  This rtn gets the message from
       //                 the message file and handles all parameter
       //                 substitution.  This way, whether we are writing
       //                 html or writing emails, the message is only handled
       //                 one time.
       //
       //     Parm_code values are:
       //
       //     '.' is NOT ALLOWED since it is used as a spacer
       //
       //     '@' = Application Name (pgm_name)
       //    '&' = ADM2 or ADM2T based on pgm_name
       //     '©' = Copyright Year
       //     'A' = Attention line of del address
       //     'a' = Address for Residence
       //     'B' = RSS Parking Count
       //     'b' = RSS Meeting Count
       //     'c' = Comments - OTC
       //     'C' = Current Status for GAORDER1 Record
       //     'D' = Current Date
       //     'd' = Street Name and Direction
       //     'E' = Email address
       //     'e' = CRM name and phone
       //     'f' = FICE
       //     'h' = Sha hash value
       //     'I' = ID Code
       //     'i' = BATCH ID and sequence
       //     'K' = Street Key
       //     'k' = H_KEY value
       //     'L' = Report DS (for PP load report)
       //     'l' = Report DS (for MS load report)
       //     'M' = HMONTH2
       //     'm' = Screen Sequence for MOVE Resident Screen
       //     'N' = Number of Permits - OTC
       //     'n' = Client first and last name
       //     'O' = Order No
       //     'o' = Root Order No
       //     'P' = Parking Permit Number
       //     'p' = Plate Key
       //     'Q' = Quick Order Screen - Hidden Variables
       //     'q' = Quick Order Screen - Post date checkbox
       //     'R' = Report Fields - rpt_title(35a), and rpt_slct(3a)
       //     'r' = Radio Control for CNTR_DP
       //     'S' = school name
       //     's' = Search Parameters
       //     'T' = option descript text
       //     't' = total cost of OTC parking order
       //     'U' = User ID field
       //     'V' = individual cost of parking permits
       //     'v' = Vehicle Category translated to text, 20A
       //     'W' = Signon Key + user id
       //     'X' = Text for a Button
       //     'x' = New Input Search Parameter Value
       //     'Y' = HYEAR4
       //     'Z' = RCHGUSER
       //     'z' = RCHGDATE
       //     '1' = hnew_addr1, ICITY, ISTATE, IPOSTCD
       //     '2' = Quick Order Screen - Post date date
       //     '3' = Quick Order Screen - Today in MM-DD-YYYY format
       //     '4' = Option Record key for View Demo permit link
       //     '5' = Address Override Checkbox checked
       // **************************************************************
       begsr WrtPanlGet;

          select;
             when element_mo = 'Y';
                msg_prefix = imsgprefix;
             other;
                msg_prefix = Msg_defalt;
          endsl;

          msg_num    =  element_fl;
          clear Msg_ParmD;
          clear Msg_ParmL;
          #Loc = 0;


       if pgm_name = TEST_NAME;
          if msg_num = '9027';
             msg_num = '9029';
             element_vf = 'J';
          endif;
          if msg_num = '9026';
             msg_num = '9032';
             element_vf = 'J';
          endif;
          if msg_num = '9028';
             msg_num = '9030';
             element_vf = 'J';
          endif;
          if msg_num = '3134';
             msg_num = '3135';
          endif;
       endif;



       // ----setup parameter data for message substitution by API

          for #P = 1 To 5;
             select;
                when #P = 1;
                   #Parm_Code = element_p1;
                when #P = 2;
                   #Parm_Code = element_p2;
                when #P = 3;
                   #Parm_Code = element_p3;
                when #P = 4;
                   #Parm_Code = element_p4;
                when #P = 5;
                   #Parm_Code = element_p5;
             endsl;

             if #Parm_Code  = *blanks or
                    #Parm_Code  = '.';
                iter;
             endif;

             select;

                   //   insert pgm_name
       WHEN #Parm_Code = '@';
         #Loc        = Msg_ParmL + 1;
         Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     pgm_name      Msg_PA(#Loc)
         %subst(Msg_ParmD:#Loc:%len(pgm_name)) = pgm_name;

       //   insert ADM2 or ADM2T based on pgm_name
       WHEN #Parm_Code = '&';
         #Loc        = Msg_ParmL + 1;
         Msg_ParmL   = Msg_ParmL + 10;
         if pgm_name = 'GACGIADMT';
            adm2name = 'GACGIADM2T';
         else;
            adm2name = 'GACGIADM2';
         endif;
     c*                  movea     adm2name      Msg_PA(#Loc)
         %subst(Msg_ParmD:#Loc:%len(adm2name)) = adm2name;

       //    insert copyright end year
                when #Parm_Code = '©';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 4;
                   byte4 = %editc(cycle_date:'X');
     c*                  movea     byte4         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte4)) = byte4;

       //    insert Delivery Attention Line
                when #Parm_Code = 'A';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 35;
     c*                  movea     hdel_attn     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hdel_attn)) = hdel_attn;

       // ------------------insert Resident Name/Address/Phone

                when #Parm_Code = 'a';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 40;
                   wkfullname  = %trim(rfrstname) + ' ' +
                       %trim(rmidlname) +' '+ %trim(rlastname);
     c*                  movea     wkfullname    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(wkfullname)) = wkfullname;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 35;
     c*                  movea     raddr1        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(raddr1)) = raddr1;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 25;
     c*                  movea     rcity         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rcity)) = rcity;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 3;
     c*                  movea     rstate        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rstate)) = rstate;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 11;
     c*                  movea     rpostcd       Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rpostcd)) = rpostcd;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 25;
     c*                  movea     rtel#         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rtel#)) = rtel#;

       //    insert RSS Parking Count
                when #Parm_Code = 'B';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 5;
                   clear byte5;
                   byte5       = %char(i#_ga_pps);
     c*                  movea     byte5         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte5)) = byte5;

       //    insert RSS Meeting Count
                when #Parm_Code = 'b';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 5;
                   clear byte5;
                   byte5       = %char(i#_ga_mts);
     c*                  movea     byte5         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte5)) = byte5;

       //    insert Comment
                when #Parm_Code = 'c';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 100;
                   %subst(byte100:1:50) = hcomment1;
                   %subst(byte100:51:50) = hcomment2;
     c*                  movea     byte100       Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte100)) = byte100;

       //    insert Current Status for GAORDER
                when #Parm_Code = 'C';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 30;
                   byte30 = GAORD_orderstat(orderds:huserid);
     c*                  movea     byte30        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte30)) = byte30;

       //    insert DSPLY_DATE
                when #Parm_Code = 'D';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     dsply_date    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(dsply_date)) = dsply_date;

       //    insert hstreet and hstr_dir - ASTERICK filled
                when #Parm_Code = 'd';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 25;
                   byte25 = %xlate(' ':'*':hstr_name);
     c*                  movea     byte25        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte25)) = byte25;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 2;
                   byte2 = %xlate(' ':'*':hstr_dir);
     c*                  movea     byte2         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte2)) = byte2;

       //    insert EMAIL
                when #Parm_Code = 'E';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 50;
     c*                  movea     hemail        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hemail)) = hemail;


       // insert CRM Name and Phone
       when #Parm_Code = 'e';
          #Loc = Msg_ParmL + 1;
          Msg_ParmL += 50;
          if not %open(dvclientl7);
             open dvclientl7;
          endif;
          byte10 = %trim(iteam_id) + 'CCS';
          clear byte50;
          chain (byte10) clientcrm;
          if %found;
             %subst(Msg_ParmD:#Loc:50) = %trim(jfrstname) + ' ' +
                                         %trim(jlastname) + ' at ' +
                                         %trim(jtel#);
          endif;


       //    insert FICE
                when #Parm_Code = 'f';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 6;
     c*                  movea     hfice         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hfice)) = hfice;

       //    insert SHA hash value
                when #Parm_Code = 'h';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 28;
     c*                  movea     sha_bytes     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(sha_bytes)) = sha_bytes;

       //    insert ID Code
                when #Parm_Code = 'I';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 7;
                   byte7       = %char(hidcode);
     c*                  movea     byte7         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte7)) = byte7;

       //    insert BATCH ID Code
                when #Parm_Code = 'i';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 8;
     c*                  movea     cbatchid      Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(cbatchid)) = cbatchid;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 3;
                   byte3       = %editc(cbatchrec#:'1');
     c*                  movea     byte3         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte3)) = byte3;


          when #Parm_Code = 'J';     // enter PDFCGI2 based on prod/test
             #Loc = Msg_ParmL + 1;
             Msg_ParmL = Msg_ParmL + 10;
             if pgm_name = TEST_NAME;
                byte10 = PDF_TEST;
             else;
                byte10 = PDF_PROD;
             endif;
             %subst(Msg_ParmD:#Loc:10) = %trim(byte10);

          when #Parm_Code = 'j';     // enter DVCGIADM2 based on prod/test
             #Loc = Msg_ParmL + 1;
             Msg_ParmL = Msg_ParmL + 10;
             if pgm_name = TEST_NAME;
                byte10 = ADM2_TEST;
             else;
                byte10 = ADM2_PROD;
             endif;
             %subst(Msg_ParmD:#Loc:10) = %trim(byte10);

       //    insert Key for update street
                when #Parm_Code = 'K';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 33;

                   skey_name   = hstr_name;
                   skey_type   = hstr_type;
                   skey_postd  = hstr_postd;
     c*                  movea     key_strds     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(key_strds)) = key_strds;

       //    insert H_KEY value
                when #Parm_Code = 'k';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 65;
     c*                  movea     h_key         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(h_key)) = h_key;

       //    insert Report DS for MS load report
                when #Parm_Code = 'L';
                   rpt_title   = 'Parking File ' +
                                      'Load Reports';
                   rpt_file    = 'REPT_GALOD';
                   rpt_hdr     = 'G';
                   rpt_appl    = 'PP*';
                   rpt_fice    = hfice;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     rpt_ds        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rpt_ds)) = rpt_ds;

       //    insert Report DS for MS load report
                when #Parm_Code = 'l';
                   rpt_title   = 'Parking File ' +
                                      'Load Reports';
                   rpt_file    = 'REPT_GALOD';
                   rpt_hdr     = 'G';
                   rpt_appl    = 'MS*';
                   rpt_fice    = hfice;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     rpt_ds        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rpt_ds)) = rpt_ds;

       //    insert HMONTH2 in TEXT
                when #Parm_Code = 'M';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 3;
                   idx = %dec(%subst(%editc(idx:'X'):1:3)
                         + %xlate(' ':'0':
                           hmonth2) :5:0);
     c*                  movea     month(idx)    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:3) = month(idx);

       //    insert hscrn_seq for Move Resident Screen
                when #Parm_Code = 'm';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 3;
                   byte3 = %editc(hscrn_seq:'X');
     c*                  movea     byte3         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte3)) = byte3;

       //    insert Clients Name in TEXT
                when #Parm_Code = 'n';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 35;
                   NCatLen = %len(%trimr(cfrstname)) + %len(
                       cmidlname) + 1;
                   if NCatLen < %len(byte35);
                      %subst(byte35:1:NCatLen) = %trimr(cfrstname
                          ) + ' ' + cmidlname;
                   else;
                      byte35 = %trimr(cfrstname) + ' ' + cmidlname;
                   endif;
                   byte35 = %trimr(byte35) + ' ' + clastname;
     c*                  movea     byte35        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte35)) = byte35;

       //    insert HNUMPMITS in TEXT
                when #Parm_Code = 'N';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 5;
     c*                  movea     hnumpmits     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hnumpmits)) = hnumpmits;

       //    insert Order No
                when #Parm_Code = 'O';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 9;
     c*                  movea     horder#       Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(horder#)) = horder#;

       //    insert Root Order No
                when #Parm_Code = 'o';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 9;
     c*                  movea     troot_ord#    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(troot_ord#)) = troot_ord#;

       //    insert Parking Permit Number
                when #Parm_Code = 'P';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 11;
     c*                  movea     tapp_data8    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(tapp_data8)) = tapp_data8;

       //    insert Plate# Key
                when #Parm_Code = 'p';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     h_kplate      Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(h_kplate)) = h_kplate;

       //    insert Quick Order Screen - Hidden Variables
                when #Parm_Code = 'Q';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 8;
     c*                  movea     rpin_user     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rpin_user)) = rpin_user;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 4;
     c*                  movea     rpin#         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rpin#)) = rpin#;

       //    insert Post date checkbox field CHECKED or NOT, VALUE
                when #Parm_Code = 'q';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 7;
                   if hchk_pdate  = 'Y';
     c*                  movea     'CHECKED'     Msg_PA(#Loc)
                      %subst(Msg_ParmD:#Loc:7) = 'CHECKED';
                   else;
     c*                  movea     '       '     Msg_PA(#Loc)
                      %subst(Msg_ParmD:#Loc:7) = '       ';
                   endif;

                   //    insert Report Fields - RPT_TITLE and RPT_SLCT
                when #Parm_Code = 'R';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 35;
     c*                  movea     rpt_title     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rpt_title)) = rpt_title;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 3;
     c*                  movea     rpt_slct      Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rpt_slct)) = rpt_slct;

       //    insert Control Radio Field - CHECKED or NOT, VALUE
                when #Parm_Code = 'r';
                   clear byte7a;
                   clear byte7b;
                   if h_applid    = 'DP' or
                          h_applid    = 'CE';
                      if hcntr_dp    = 'O';
                         byte7a      = 'CHECKED';
                      endif;
                      if hcntr_dp    = 'C';
                         byte7b      = 'CHECKED';
                      endif;
                   endif;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 7;
     c*                  movea     byte7a        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte7a)) = byte7a;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 7;
     c*                  movea     byte7b        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte7b)) = byte7b;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 1;
                   Msg_PA(#Loc) = hcntr_dp;

                   //    insert school name

                when #Parm_Code = 'S';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 50;
     c*                  movea     yschname      Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(yschname)) = yschname;

       //    insert Parking Search Parameters
                when #Parm_Code = 's';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 9;
     c*                  movea     hsrch_ord     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hsrch_ord)) = hsrch_ord;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     hsrch_dta5    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hsrch_dta5)) = hsrch_dta5;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 11;
     c*                  movea     hsrch_dta8    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hsrch_dta8)) = hsrch_dta8;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 20;
     c*                  movea     hsrch_nam     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hsrch_nam)) = hsrch_nam;

       //  SSN is not left unencrypted so insert blanks
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 9;
     c*                  movea     blnk9         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(blnk9)) = blnk9;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     hsrch_sid     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hsrch_sid)) = hsrch_sid;

       //    insert permit product Type description
                when #Parm_Code = 'T';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 70;
     c*                  movea     ga_text_1     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(ga_text_1)) = ga_text_1;

       //    insert total cost of OTC parking order
                when #Parm_Code = 't';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 7;
                   byte7       = %trim(%editc(otc_total:'3'));
     c*                  movea     byte7         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte7)) = byte7;

       //    insert User ID
                when #Parm_Code = 'U';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     huserid       Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(huserid)) = huserid;

          // insert superuser dropdown info
          when #Parm_Code = 'u';
             #Loc = Msg_ParmL + 1;
             Msg_ParmL = Msg_ParmL + 27;
             byte27 = %trim(sprusr.fice1) + '"';
             if cfreefice = sprusr.fice1;
                byte27 = %trim(sprusr.fice1) + '" selected="selected"';
             endif;
             %subst(Msg_ParmD:#Loc:27) = byte27;

             #Loc = Msg_ParmL + 1;
             Msg_ParmL = Msg_ParmL + 27;
             byte27 = %trim(sprusr.fice2) + '"';
             if cfreefice = sprusr.fice2;
                byte27 = %trim(sprusr.fice2) + '" selected="selected"';
             endif;
             %subst(Msg_ParmD:#Loc:27) = byte27;

             #Loc = Msg_ParmL + 1;
             Msg_ParmL = Msg_ParmL + 12;
             %subst(Msg_ParmD:#Loc:12) = sprusr.shrtname;


       //    insert total cost of OTC parking order
                when #Parm_Code = 'V';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
                   byte10      = %trim(%editc(otc_cost:'3'));
     c*                  movea     byte10        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte10)) = byte10;

       //    Vehicle Cageory Field

                when #Parm_Code = 'v';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 20;
                   clear byte20;
                   select;
                      when hcategry    = 'A';
                         byte20      = 'Antique';
                      when hcategry    = 'S';
                         byte20      = 'Trailer';
                      when hcategry    = 'R';
                         byte20      = 'Recreational Vehicle';
                      when hcategry    = 'B';
                         byte20      = 'School Bus';
                      other;
                         byte20      = 'Undefined';
                   endsl;
     c*                  movea     byte20        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte20)) = byte20;

       //    insert signonkey/huserid
                when #Parm_Code = 'W';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 12;
     c*                  movea     hsignonkey    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hsignonkey)) = hsignonkey;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
                   byte10 = %xlate(' ':'*':huserid);
     c*                  movea     byte10        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte10)) = byte10;

       //    insert BUTTON_TXT value
                when #Parm_Code = 'X';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 35;
     c*                  movea     button_txt    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(button_txt)) = button_txt;


         // insert search value into generic text input
         when #Parm_Code = 'x';
            #Loc = Msg_ParmL + 1;
            Msg_ParmL = Msg_ParmL + 20;

     c*                  movea     hsrch_value   Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hsrch_value)) = hsrch_value;

       //    insert HYEAR4
                when #Parm_Code = 'Y';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 4;
     c*                  movea     hyear4        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hyear4)) = hyear4;

       //    insert RCHGUSER
                when #Parm_Code = 'Z';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     rchguser      Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(rchguser)) = rchguser;

       //    insert RCHGDATE
                when #Parm_Code = 'z';
                   dsply_date  = dspTmStamp(rchgdate:
                                                0:0:'*DATE');
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     dsply_date    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(dsply_date)) = dsply_date;

       //    insert HNEW_ADDR1 - (5713 / 5714)
                when #Parm_Code = '1';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 35;
     c*                  movea     hnew_addr1    Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hnew_addr1)) = hnew_addr1;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 25;
     c*                  movea     icity         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(icity)) = icity;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 3;
     c*                  movea     istate        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(istate)) = istate;

                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 11;
                   byte11      = #AV_zipc_o;
                   if #AV_zip4_o <> *blanks;
                      byte11      = %trim(byte11) + '-' +
                                        #AV_zip4_o;
                   endif;
     c*                  movea     byte11        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte11)) = byte11;

       //   Check first Radio
                   clear byte7;
                   if hmove_res   = 'Y';
                      byte7       = 'CHECKED';
                   endif;
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 7;
     c*                  movea     byte7         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte7)) = byte7;

       //   Check second Radio
                   clear byte7;
                   if hmove_res   = 'N';
                      byte7       = 'CHECKED';
                   endif;
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 7;
     c*                  movea     byte7         Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte7)) = byte7;

       //    insert Post Date Date
                when #Parm_Code = '2';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
     c*                  movea     hpostdate     Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(hpostdate)) = hpostdate;

       //    insert Post Todays date in MM-DD-YYYY format
                when #Parm_Code = '3';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 10;
                   byte10      = cycle_mm + '-' +
                                     cycle_dd + '-' +
                                     cycle_yyyy;
     c*                  movea     byte10        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte10)) = byte10;

       //    insert Option Record Key, used for View Demo Permit link
                when #Parm_Code = '4';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 12;
                   byte12      = hfice +
                                     h_applid +
                                     hrecid +
                                     hproduct +
                                     husrtype;
                   byte12 = %xlate(' ':'*':byte12);
     c*                  movea     byte12        Msg_PA(#Loc)
                   %subst(Msg_ParmD:#Loc:%len(byte12)) = byte12;

       //    insert CHECKED for Address Override checkbox
                when #Parm_Code = '5';
                   #Loc        = Msg_ParmL + 1;
                   Msg_ParmL   = Msg_ParmL + 7;
                   if hav_ovride  = 'Y';
     c*                  movea     'CHECKED'     Msg_PA(#Loc)
                      %subst(Msg_ParmD:#Loc:7) = 'CHECKED';
                   else;
     c*                  movea     '       '     Msg_PA(#Loc)
                      %subst(Msg_ParmD:#Loc:7) = '       ';
                   endif;

             endsl;
          endfor;

       //----handle conditional execution of messages

       //  all screens
       select;
       when element_id = 'MENU';
          // Skip fice switching if not internal, unless the user is IT or Sales
          if msg_num = '9709' and
             origin <> 'CLLC' and cau_grp_id <> 'SAL' and cau_grp_id <> 'IT';
             Get_Retrn = 'SKIP';
             leavesr;
          endif;

         // Web Charting
         if msg_num = '2043' and ichargepp <> 'Y' and ichargepp <> 'S';
            Get_Retrn = 'SKIP';
            leavesr;
         endif;

         // Batch Ordering only visiable if not on LPR
         if msg_num = '2039' and glive_lpr = 'Y';
            Get_Retrn = 'SKIP';
            leavesr;
         endif;

         if msg_num = '2007' and ichargedp <> 'Y' and ichargedp <> 'S';
            Get_Retrn = 'SKIP';
            leavesr;
         endif;

         if msg_num = '2008' and ichargece <> 'Y' and ichargece <> 'S';
            Get_Retrn = 'SKIP';
            leavesr;
         endif;

          if msg_num = '9730'; // Fice switch
             if origin <> 'CLLC';
                if csuperuser <> 'XX ';
                   Get_Retrn = 'SKIP';
                   leavesr;
                endif;
             endif;
             if csuperuser <> 'XX ';
                Get_Retrn = 'SKIP';
                leavesr;
             endif;
          endif;


                if msg_num     = '5828' and
                       cau_ga_pp   = *blanks;
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                //   Only display load report for santa monica and chaffey

                if msg_num     = '2040' and
                       hfice      <> '001163' and
                       hfice      <> '001286' and
                       hfice      <> '001320' and
                       hfice      <> 'V98124' and
                       hfice      <> 'X07006';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                if (msg_num    = '2047' or
                        msg_num    = '2048') and
                       icert_optn  = 'Y';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                if msg_num     = '2047' and
                        ifice      = 'V01671';
                   msg_num     = '2051';
                endif;

                if msg_num     = '2050' and
                       icert_optn <> 'Y';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                if msg_num     = '2080' and
                       cau_ga_ms   = *blanks;
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

             when element_id = 'PP_OTC  ';
                //  Skip view sample OTC link if there is no product selected
                if msg_num     = '2546' and
                       hproduct    = *blanks;
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

             when element_id = 'PP_3RCV2';
                if msg_num     = '2782' and
                       h_key       = *blanks;
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                if msg_num     = '2790' and
                       h_key      <> *blanks;
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

             when element_id = 'DP_SCR1';
                if msg_num     = '3131' and
                       hcntr_dp    = 'C';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

             when element_id = 'MS_STEDT';
                if msg_num     = '5436' and
                       h_key       = *blanks;
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

             when element_id = 'MS_BUS';
                if msg_num     = '5631' and
                       show_del    = #true;
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                if msg_num     = '5632' and
                       show_del    = #false;
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

             when element_id = 'MS_BSEDT';
                //   Reset Pin and Delete and Update button
                if msg_num     = '5672' or
                       msg_num     = '5686';
                   if hidcode     = 0      or
                          bstatus     = 'D';
                      Get_Retrn   = 'SKIP';
                      leavesr;
                   endif;
                endif;

                //   Add Button
                if msg_num     = '5687' and
                       hidcode    <> 0;
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                //   Perm delete and restore
                if msg_num     = '5688' and
                       bstatus    <> 'D';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

             when element_id = 'MS_RVP';
                if msg_num     = '5549';
                   if (use_lookup = ' ' or
                           res_errors = 'Y');
                      Get_Retrn   = 'SKIP';
                      leavesr;
                   endif;
                endif;

                //   skip post date messages if not a counter user
                //   For testing allow all internal MSTEST users
                if (msg_num    = '5545' or
                        msg_num    = '9055');
                   if hfice       = 'MSTEST' or
                          (origin     = 'CLLC' and
                           hfice      = %subst(huserid:2:6)) or
                          origin     <> 'CLLC';
                      //     show the post date checkbox messages
                   else;
                      Get_Retrn   = 'SKIP';
                      leavesr;
                   endif;
                endif;

                //   skip post date field if checkbox not checked
                if msg_num     = '5546' and
                       hchk_pdate <> 'Y';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                //   Only put out hidden date variable if date field not shown
                if msg_num     = '5547' and
                       hchk_pdate  = 'Y';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

             when element_id = 'MS_RES2';
                if msg_num     = '5549';
                   if use_lookup  = ' ';
                      Get_Retrn   = 'SKIP';
                      leavesr;
                   endif;
                endif;

             when element_id = 'MS_QUICK';
                //   Skip the barcode popup - if the rpin_user and rpin# are blank
                if msg_num     = '5989';
                   if rpin_user   = *blanks or
                          rpin#       = *blanks or
                          use_namsrh  = 'Y' or
                          use_telsrh  = 'Y' or
                          use_vehsrh  = 'Y' or
                          use_adrsrh  = 'Y';
                      Get_Retrn   = 'SKIP';
                      leavesr;
                   endif;
                endif;

                //   skip batch informaion if not an internal user
                if msg_num     = '5972' and
                       (origin    <> 'CLLC' or
                       %subst(huserid:2:6) <> '009998');
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                //   skip post date messages if not a counter user
                //   For testing allow all internal MSTEST users
                if (msg_num    = '5981' or
                        msg_num    = '9055');
                   if hfice       = 'MSTEST' or
                          (origin     = 'CLLC' and
                           hfice      = %subst(huserid:2:6)) or
                          origin     <> 'CLLC';
                      //     show the post date checkbox messages
                   else;
                      Get_Retrn   = 'SKIP';
                      leavesr;
                   endif;
                endif;

                //   skip post date field if checkbox not checked
                if msg_num     = '5982' and
                       hchk_pdate <> 'Y';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                //   Only put out hidden date variable if date field not shown
                if msg_num     = '5983' and
                       hchk_pdate  = 'Y';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

                //   Write out javascript to submit close batch automatically
                if msg_num     = '5994' and
                       cbatchrec#  < MAX_BATCH;
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

             when element_id = 'RES_EDIT';
                if msg_num     = '5571';
                   if h_key      <> ' ';
                      Get_Retrn   = 'SKIP';
                      leavesr;
                   endif;
                endif;

                if msg_num     = '5572';
                   if h_key       = ' ';
                      Get_Retrn   = 'SKIP';
                      leavesr;
                   endif;
                endif;

             when element_id = 'VEH_EDIT';
                if msg_num     = '5771' or
                       msg_num     = '5780';
                   if h_kplate   <> ' ';
                      Get_Retrn   = 'SKIP';
                      leavesr;
                   endif;
                endif;

                if msg_num     = '5772' and
                       h_kplate    = ' ';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

             when element_id = 'PET_EDIT';
                if msg_num     = '5871' or
                       msg_num     = '5890';
                   if h_kplate   <> ' ';
                      Get_Retrn   = 'SKIP';
                      leavesr;
                   endif;
                endif;

                if msg_num     = '5872' and
                       h_kplate    = ' ';
                   Get_Retrn   = 'SKIP';
                   leavesr;
                endif;

          endsl;

          // ----Call Zgetmsg to get the message contents
          exsr zgetmsg;

       endsr;


       // *********************************************************************
       //    WrtPanlMsg:  This routine calls WrtPanlGet to process the messages
       //                 and then writes the completed message as html
       // *********************************************************************
       begsr WrtPanlMsg;

          clear Get_Retrn;
          exsr WrtPanlGet;
          if Get_Retrn   = 'SKIP';
             leavesr;
          endif;

          //  Menu item suppression based on security authorizations
          byte6 = msg_level1;

       if %subst(msg_level1:1:4) = '%GRP';
          if cau_grp_id <> %subst(msg_level1:6:3);
             clear msg_text;
             leavesr;
          endif;
       endif;
       if %subst(msg_level1:1:5) = '%GRPS';
          if cau_grp_id <> %subst(msg_level1:7:3)  and
             cau_grp_id <> %subst(msg_level1:10:3) and
             cau_grp_id <> %subst(msg_level1:13:3);
             clear msg_text;
             leavesr;
          endif;
       endif;

       // Parking
          if byte6       = '%AUPP ';
             byte1       = %subst(msg_level1:7:1);
             if byte1       = *blanks and
                    cau_ga_pp   = *blanks;
                clear msg_text;
             elseif byte1      <> *blanks and
                    %scan(byte1:cau_ga_pp:1) = 0;
                clear msg_text;
             endif;
          endif;
          // Diploma
          if byte6       = '%AUDP ';
             byte1       = %subst(msg_level1:7:1);
             if byte1       = *blanks and
                    cau_ga_dp   = *blanks;
                clear msg_text;
             elseif byte1      <> *blanks and
                    %scan(byte1:cau_ga_dp:1) = 0;
                clear msg_text;
             endif;
          endif;
          // Golf Tourneys
          if byte6       = '%AUGT ';
             byte1       = %subst(msg_level1:7:1);
             if byte1       = *blanks and
                    cau_ga_gt   = *blanks;
                clear msg_text;
             elseif byte1      <> *blanks and
                    %scan(byte1:cau_ga_gt:1) = 0;
                clear msg_text;
             endif;
          endif;
          // Meetings
          if byte6       = '%AUMT ';
             byte1       = %subst(msg_level1:7:1);
             if byte1       = *blanks and
                    cau_ga_mt   = *blanks;
                clear msg_text;
             elseif byte1      <> *blanks and
                    %scan(byte1:cau_ga_mt:1) = 0;
                clear msg_text;
             endif;
          endif;
          // Municipal Services
          if byte6       = '%AUMS ';
             byte1       = %subst(msg_level1:7:1);
             if byte1       = *blanks and
                    cau_ga_ms   = *blanks;
                clear msg_text;
             elseif byte1      <> *blanks and
                    %scan(byte1:cau_ga_ms:1) = 0;
                clear msg_text;
             endif;
          endif;


          BufOut = %trimr(BufOut) + msg_text;
          BufOut = %trimr(BufOut) + linefeed;
          nbytes = 1 + %len(%trimr(msg_text));
          ByteSize += nbytes;
          exsr sendbufr;

       endsr;

       /copy rpgcopy,zcgihskpg

      /eject

       // **********************************************************
       //    Function: Cvt2Num - cnvrt a string to numeric
       // **********************************************************
       //  nomain cvt2num subprocedure
       dcl-proc cvt2num export;
          dcl-pi cvt2num packed(11:3);
             $string         char(22)        value;
          end-pi;

       //  variables

          dcl-ds *n;
             retrn_val       packed(11:3)    inz;
             int_beg         packed(3:0)     inz;
             int_len         packed(3:0)     inz;
             dec_len         packed(3:0)     inz;
             dec_pnt         packed(3:0)     inz;
             str_len         packed(3:0)     inz;
          end-ds;

          dcl-ds *n;
             numval          zoned(21:8)     pos(1);
             alphaval        char(21)        pos(1);
          end-ds;

          numval  = 0;
          $string = %trim($string);

          dec_pnt = %scan('.':%trim($string));
          str_len = %len(%trim($string));
          if dec_pnt <= 0;
             dec_pnt = str_len + 1;
          endif;
          int_len = dec_pnt - 1;
          dec_len = str_len - dec_pnt;
          int_beg = 13 - int_len + 1;

          if int_len > 0;
             %subst(alphaval:int_beg:int_len) =
                 %subst($string:1:int_len);
          endif;

          if dec_len > 0;
             %subst(alphaval:14:dec_len) =
                 %subst($string:dec_pnt+1:dec_len);
          endif;

          retrn_val = numval;
          return retrn_val;
       end-proc cvt2num;

       //***********************************************************************
       // doEmail: send an email using Server_EM
       //***********************************************************************
       dcl-proc doEmail;
          dcl-pi *n;
             distro char(3) const;
             subject char(80) const;
             message varchar(1000) const;
             optFice char(6) options(*omit:*nopass) const;
             optOrder# char(9) options(*nopass) const;
          end-pi;

          #EM_func = 'EM';
          #EM_dist = distro;
          #EM_subjct = subject;
          #EM_short = *blanks;
          #EM_long = message;

          clear #EM_fice;
          if %parms() >= %parmNum(optFice);
             if %addr(optFice) <> *NULL;
                #EM_fice = optFice;
             endif;
          endif;
          if %parms() >= %parmNum(optOrder#);
             #EM_order# = optOrder#;
          else;
             clear #EM_order#;
          endif;

          exsr $put_EM;

          return;

       /copy rpgcopy,$SRVREM_SP

       end-proc;

       //**********************************************************************
       // Function parseForm
       //**********************************************************************
       /copy rpgcopy,parsinp_sp

       //*********************************************************************
       // Function: validNumber - test validity of a numeric input field
       //*********************************************************************
       dcl-proc validNumber;
       dcl-pi *n ind;
          numFieldChar char(20) const;
       end-pi;

       dcl-s numericField packed(15:5) inz;

       monitor;
          numericField = %dec(numFieldChar:15:5);
       on-error 105;      // Normal error status code for %dec
          return #FALSE;
       on-error *all;     // Catch all
          return #FALSE;
       endmon;

       return #TRUE;

       end-proc;

      /eject
       // **********************************************************************
       //   Compile-time array follows:
       // **********************************************************************
       /copy rpgcopy,parsetbl
** CTDATA =======12345M=SCREENS ===No Imbedded Blank recs allowed=====
#FATALERR
 FATALERR MSG9998              *fatal error screen
#RSS_MENU
 RSS_MENU MSG1201              *beg of html page
 RSS_MENU RTNHDRS              *Insert RSS Hidden Variables
 RSS_MENU MSG1202              *end of html page
#LOGONGA
 LOGONGA  MSG1101              *CHANGES WINDOW LOCATION TO RELOGCGI.PGM
#MENU
 MENU     MSG2001              *context/title/etc
 MENU     MSG9101              javascript  - newWindow.js
 MENU     MSG9100              javascript - dfltJSfuncts.js include
 MENU     MSG9107              importing jquery 3.3.1 file
 MENU     MSG5816              import bootstrap-4.3.1.min.css
 MENU     MSG9001              javascript  - style - 1
 MENU     MSG5802              508 styles
 MENU     MSG9002              javascript  - stype - 2 & Java Starter
 MENU     MSG9014              javascript  - change()
 MENU     MSG9015              javascript  - setsubmit
 MENU     MSG2019W@            javascript  - newORD();
 MENU     MSG9025              javascript  - AnyWin
 MENU     MSG9060              javascript  - DNLDwin(parm,w,h)
 MENU     MSG9009              javascript  - dismissMessage function with the ajax call
 MENU     MSG9005              javascript  - javascript for close button
 MENU     RTNNWIN              javascript  - NEWwin(pname,parm,winname,w,h,applid,forms,id)
 MENU     MSG9099              javascript  - ender
 MENU     MSG5805              <style>
 MENU     MSG5806              508 header styles
 MENU     MSG5811              508 header styles 2
 MENU     MSG5812              styles for alertbox
 MENU     MSG5807              </style>
 MENU     MSG5810@             head/body/form
 MENU     MSG9703              Top Bars Part 1
 MENU     MSG9704              Top Bars Part 2
 MENU     MSG9705              Std Left Menu Bar part 1
 MENU     MSG9709              Change Fice input and button // Conditional
 MENU     MSG9730u             Super user XX fice switch
 MENU     SLTSUPR              Super user fice switch
 MENU     MSG2005              *ADMIN Manual Link 1
 MENU     MSG2006              *ADMIN Manual Link 2
 MENU     MSG2010B             *PP - Table of PP RSS Counts
 MENU     MSG2011b             *MT - Table of MT RSS Counts
 MENU     MSG9720              Std Left Menu end/spacer/app table start
 MENU     RTNHEAD              Insert Header Variables
 MENU     MSG2007              DP Link to RSS
 MENU     MSG2008              CE Link to RSS
 MENU     MSG2020S             *Application panel title
 MENU     RTNERRS              Use errs array to do msgs from last ops
 MENU     RTNALRT              puts out alerts
 MENU     MSG2031              *Instructions
 MENU     MSG2033              *Table Start
 MENU     MSG5828              *PP-Menu Header
 MENU     ---2030              *PP-"GRP IT" LPR - List scans/citations
 MENU     MSG2035              *PP-"O"rders - Search/List
 MENU     MSG2046              *PP-"H"ot    - PP Hot Sheet
 MENU     MSG2036              *PP-"P"aymnt - COD Payment Screen
 MENU     MSG2042              *PP-"V"iew   - Search to view orders
 MENU     MSG2037              *PP-"S"tats  - Statistical Screen
 MENU     MSG2038              *PP-"R"epts  - Monthly Reports
 MENU     MSG2043              *PP-"C"harts - Reporting Charts      *conditional
 MENU     MSG2039W@            *PP-"F"ree   - Batch Permit Ordering *conditional
 MENU     MSG2040L             *PP-"L"oad   - Load report
 MENU     MSG2044              *PP-"E"xtract- Extract an excel file
 MENU     MSG2041              *PP-"3"rdPty - 3rd Party Maintenance
 MENU     MSG2049     Y        *PP-"N"ew    - Place New Paid Order
 MENU     MSG2025     Y        *PP-"N"ew    - Blank, Can be overridden for a custom link
 MENU     MSG2026     Y        *PP-"N"ew    - Blank, Can be overridden for a custom link
 MENU     MSG2027     Y        *PP-"N"ew    - Blank, Can be overridden for a custom link
 MENU     MSG2028     Y        *PP-"N"ew    - Blank, Can be overridden for a custom link
 MENU     MSG2029     Y        *PP-"N"ew    - Blank, Can be overridden for a custom link
 MENU     MSG2045              *PP-"D"ownload - Download Window
 MENU     MSG2050              *CE-"O"rders - Search/List
 MENU     MSG2080              *MS-Menu Header
 MENU     MSG2081              *MS-"S"treet      Maintenance
 MENU     MSG2082              *MS-"B"usiness    Maintenance
 MENU     MSG2083              *MS- R"E"sidence  Maintenance
 MENU     MSG2084              *MS-"C"hange of Address Maintenance
 MENU     MSG2085              *MS-"Q"uick Order via Barcode
 MENU     MSG2086              *MS-"O"rders Manage/Search
 MENU     MSG2087              *MS-"V"iew   - Search to view orders
 MENU     MSG2088              *MS-"P"aymnt - COD Payment Screen
 MENU     MSG2089              *MS-"N"ew    - Place New Paid Order
 MENU     MSG2090              *MS-"M"ail Returned Processing
 MENU     MSG2091W             *MS-"F"ree   - Batch Permit Ordering
 MENU     MSG2092              *MS-"R"epts  - Work with Reoprts
 MENU     MSG2093l             *MS-"L"oad   - Load report
 MENU     MSG2094              *MS-"D"ownload - Download Window
 MENU     MSG5829              Administrative Tasks
 MENU     MSG2097              Change Password
 MENU     MSG2099              *End of Menu
 MENU     MSG9786©            standard copyright and </table></form>
 MENU     MSG9109              Javscript - bootstrap-b-4.3.1.min.js
 MENU     MSG9790              standard </body></html>
#PP_SCR1
 PP_SCR1  MSG2101              *context/title/etc
 PP_SCR1  MSG9001              javascript  - style - 1
 PP_SCR1  MSG5802              508 styles
 PP_SCR1  MSG9003              javascript  - style - Srchn
 PP_SCR1  MSG9002              javascript  - stype - 2 & Java Starter
 PP_SCR1  MSG9008              javascript  - clrForm(form)
 PP_SCR1  MSG9010              javascript  - isFilled
 PP_SCR1  MSG9012              javascript  - isNum/isSSN/isCNF
 PP_SCR1  MSG9014              javascript  - change()
 PP_SCR1  MSG9015              javascript  - setsubmit()
 PP_SCR1  MSG9017              javascript  - inuseby()
 PP_SCR1  MSG9031              javascript  - isForm1()
 PP_SCR1  MSG2110              javascript  - setsubmitORD()
 PP_SCR1  MSG2106              javascript  - isReady(1)
 PP_SCR1  MSG2107              javascript  - isReady(2)
 PP_SCR1  MSG2108              javascript  - isReady(3)
 PP_SCR1  RTNJQYF              javascript  - JQuery Functions
 PP_SCR1  MSG9099              javascript  - ender
 PP_SCR1  MSG5805              <style>
 PP_SCR1  MSG5806              508 header styles
 PP_SCR1  MSG5811              508 header styles 2
 PP_SCR1  MSG5807              </style>
 PP_SCR1  MSG5801@             head/body/form
 PP_SCR1  MSG9703              Top Bars Part 1
 PP_SCR1  MSG9704              Top Bars Part 2
 PP_SCR1  MSG9705              Std Left Menu Bar part 1
 PP_SCR1  MSG9720              Std Left Menu end/spacer/app table start
 PP_SCR1  RTNHEAD              Insert Header Variables
 PP_SCR1  RTNPASS              Pass-on variables
 PP_SCR1  MSG2120S             *Application panel title
 PP_SCR1  MSG9726k             *hidden keys
 PP_SCR1  RTNERRS              Use errs array to do msgs from last ops
 PP_SCR1  MSG5830              *Instructions
 PP_SCR1  RTNSRC1              Display Top Portion for Searching
 PP_SCR1  RTN_PPL              Display List of Matches for PP
 PP_SCR1  MSG9786©            standard copyright and </table></form>
 PP_SCR1  MSG9790              standard </body></html>
#PP_SCR2
 PP_SCR2  MSG2151              *context/title/etc
 PP_SCR2  MSG9001              javascript  - style - 1
 PP_SCR2  MSG5802              508 styles
 PP_SCR2  MSG9002              javascript  - stype - 2 & Java Starter
 PP_SCR2  MSG2109              javascript  - EdtDAwin()
 PP_SCR2  MSG2114&             javascript  - chgcmt
 PP_SCR2  MSG2115&             javascript  - viewHistory
 PP_SCR2  MSG2113              javascript  - chgprb
 PP_SCR2  MSG2112              javascript  - set_CMNT()
 PP_SCR2  MSG9015              javascript  - setsubmit()
 PP_SCR2  MSG9026O             javascript  - prnt_pdf(key)
 PP_SCR2  MSG9027O             javascript  - prnt_temp(key)
 PP_SCR2  MSG2165&             javascript  - PPwin(parm,w,h)
 PP_SCR2  MSG2461&             javascript  - PPpaywin(type,w,h,parm)
 PP_SCR2  MSG2161PO            javascript  - chk_MRT() / chk_COD
 PP_SCR2  MSG5809P             javascript  - chk_3PP
 PP_SCR2  MSG9099              javascript  - ender
 PP_SCR2  MSG5810@             head/body/form
 PP_SCR2  MSG9703              Top Bars Part 1
 PP_SCR2  MSG9704              Top Bars Part 2
 PP_SCR2  MSG9705              Std Left Menu Bar part 1
 PP_SCR2  MSG9720              Std Left Menu end/spacer/app table start
 PP_SCR2  RTNHEAD              Insert Header Variables
 PP_SCR2  RTNPASS              Pass-on variables
 PP_SCR2  RTNPVAL              Pass-on value
 PP_SCR2  RTNERRS              Use errs array to do msgs from last ops
 PP_SCR2  MSG2170SPOC          *Application panel title
 PP_SCR2  MSG2171              *Instructions
 PP_SCR2  RTN_PP1              Display Parking Permit Detail 1
 PP_SCR2  RTNCMNT              Display problem/comments for this order
 PP_SCR2  RTNTRAK              Display IMB Tracking data for this order
 PP_SCR2  MSG5808              Adobe Acrobat Reader link
 PP_SCR2  MSG9786©             standard copyright and </form>
 PP_SCR2  MSG9101              <script> newWindow.js
 PP_SCR2  MSG9790              standard </body></html>
#PP_HLIST
 PP_HLIST MSG2401              *context/title/etc
 PP_HLIST MSG9001              javascript  - style - 1
 PP_HLIST MSG9002              javascript  - stype - 2 & Java Starter
 PP_HLIST MSG9014              javascript  - change()
 PP_HLIST MSG9015              javascript  - setsubmit()
 PP_HLIST MSG2422              javascript  - setsubmitORD()
 PP_HLIST MSG9099              javascript  - ender
 PP_HLIST MSG9702@             head/body/form
 PP_HLIST MSG9703              Top Bars Part 1
 PP_HLIST MSG9704              Top Bars Part 2
 PP_HLIST MSG9705              Std Left Menu Bar part 1
 PP_HLIST MSG9720              Std Left Menu end/spacer/app table start
 PP_HLIST RTNHEAD              Insert Header Variables
 PP_HLIST MSG2420S             *Application panel title
 PP_HLIST RTNERRS              Use errs array to do msgs from last ops
 PP_HLIST MSG2431              *Instructions
 PP_HLIST RTN_PHL              Display List of Parking Hot List
 PP_HLIST MSG9786©             standard copyright and </form>
 PP_HLIST MSG9790              standard </body></html>
#PYMNT
 PYMNT    MSG2451              *context/title/etc
 PYMNT    MSG9001              javascript  - style - 1
 PYMNT    MSG5802              508 styles
 PYMNT    MSG9002              javascript  - stype - 2 & Java Starter
 PYMNT    MSG9008              javascript  - clrForm(form)
 PYMNT    MSG9010              javascript  - isFilled
 PYMNT    MSG9017              javascript  - inuseby()
 PYMNT    MSG2453              javascript  - chgcmt()
 PYMNT    MSG2454              javascript  - chgprb()
 PYMNT    MSG9014              javascript  - change()
 PYMNT    MSG9015              javascript  - setsubmit()
 PYMNT    MSG9026o             javascript  - prnt_pdf(key)
 PYMNT    MSG9027o             javascript  - prnt_temp(key)
 PYMNT    MSG9031              javascript  - isForm1()
 PYMNT    MSG2459              javascript  - PPwin(parm,w,h)
 PYMNT    MSG2161Po            javascript  - chk_MRT() / chk_COD
 PYMNT    MSG2461&             javascript  - PPpaywin(type,w,h,parm)
 PYMNT    MSG2162              javascript  - setsubmitORD()
 PYMNT    MSG2164P             javascript  - chk_3PP, paywin
 PYMNT    MSG2455              javascript  - isReady(1)
 PYMNT    MSG2456              javascript  - isReady(2)
 PYMNT    MSG9099              javascript  - ender
 PYMNT    MSG5805              <style>
 PYMNT    MSG5806              508 header styles
 PYMNT    MSG5811              508 header styles 2
 PYMNT    MSG5807              </style>
 PYMNT    MSG5801@             head/body/form
 PYMNT    MSG9703              Top Bars Part 1
 PYMNT    MSG9704              Top Bars Part 2
 PYMNT    MSG9705              Std Left Menu Bar part 1
 PYMNT    MSG9720              Std Left Menu end/spacer/app table start
 PYMNT    RTNHEAD              Insert Header Variables
 PYMNT    MSG2460S             *Application panel title
 PYMNT    RTNERRS              Use errs array to do msgs from last ops
 PYMNT    MSG5831              *Instructions
 PYMNT    RTNSRC2              Display Top Portion for Searching - CODs
 PYMNT    RTN_PPP              Display Detail of Unpaid Item
 PYMNT    RTNCMNT              Display problem/comments for this order
 PYMNT    RTN_PYL              Display Paid Item List
 PYMNT    MSG9786©             standard copyright and </form>
 PYMNT    MSG9101              <script> newWindow.js
 PYMNT    MSG2490              *focus
 PYMNT    MSG9790              standard </body></html>
#PP_STATS
 PP_STATS MSG2501              *context/title/etc
 PP_STATS MSG9001              javascript  - style - 1
 PP_STATS MSG9002              javascript  - stype - 2 & Java Starter
 PP_STATS MSG9014              javascript  - change
 PP_STATS MSG9015              javascript  - setsubmit()
 PP_STATS MSG2510              javascript  - setsubmitMNTH()
 PP_STATS MSG9099              javascript  - ender
 PP_STATS MSG9702@             head/body/form
 PP_STATS MSG9703              Top Bars Part 1
 PP_STATS MSG9704              Top Bars Part 2
 PP_STATS MSG9705              Std Left Menu Bar part 1
 PP_STATS MSG9720              Std Left Menu end/spacer/app table start
 PP_STATS RTNHEAD              Insert Header Variables
 PP_STATS MSG2520S             *Application panel title
 PP_STATS RTNERRS              Use errs array to do msgs from last ops
 PP_STATS MSG2531              *Instructions
 PP_STATS MSG2532              <SELECT>
 PP_STATS SLTYEAR              Year  Select
 PP_STATS MSG2533              </SELECT>
 PP_STATS SLTMONT              Month Select
 PP_STATS RTNSTAT              List the Table of Stats
 PP_STATS MSG9786©             standard copyright and </form>
 PP_STATS MSG9790              standard </body></html>
#PP_TAXER
 PP_TAXER MSG2541              *context/title/etc
 PP_TAXER MSG9001              javascript  - style - 1
 PP_TAXER MSG5802              508 styles
 PP_TAXER MSG9002              javascript  - stype - 2 & Java Starter
 PP_TAXER MSG9099              javascript  - ender
 PP_TAXER MSG5805              <style>
 PP_TAXER MSG5806              508 header styles
 PP_TAXER MSG5811              508 header styles 2
 PP_TAXER MSG5807              </style>
 PP_TAXER MSG5801@             head/body/form
 PP_TAXER MSG9703              Top Bars Part 1
 PP_TAXER MSG9721              Top Bars Close window
 PP_TAXER MSG9705              Std Left Menu Bar part 1
 PP_TAXER MSG9720              Std Left Menu end/spacer/app table start
 PP_TAXER RTNHEAD              Insert Header Variables
 PP_TAXER RTN_MSG              *batch order tax exempt error msg
 PP_TAXER MSG9786©             standard copyright and </form>
 PP_TAXER MSG9101              javascript  - newWindow.js
 PP_TAXER MSG9790              standard </body></html>
#PP_OTC
 PP_OTC   MSG2541              *context/title/etc
 PP_OTC   MSG9001              javascript  - style - 1
 PP_OTC   MSG5802              508 styles
 PP_OTC   MSG9002              javascript  - stype - 2 & Java Starter
 PP_OTC   MSG9010              javascript  - isFilled
 PP_OTC   MSG9014              javascript  - change
 PP_OTC   MSG9015              javascript  - setsubmit()
 PP_OTC   MSG9018              javascript  - isEmail()
 PP_OTC   MSG9022              javascript  - viewSample()
 PP_OTC   MSG9025              javascript  - AnyWin
 PP_OTC   MSG2542              javascript  - isReady1
 PP_OTC   MSG2543              javascript  - isReady2
 PP_OTC   MSG2544              javascript  - isReady3
 PP_OTC   MSG9070              javascript  - setNL();
 PP_OTC   MSG9099              javascript  - ender
 PP_OTC   MSG5805              <style>
 PP_OTC   MSG5806              508 header styles
 PP_OTC   MSG5811              508 header styles 2
 PP_OTC   MSG5807              </style>
 PP_OTC   MSG5801@             head/body/form
 PP_OTC   MSG9703              Top Bars Part 1
 PP_OTC   MSG9704              Top Bars Part 2
 PP_OTC   MSG9705              Std Left Menu Bar part 1
 PP_OTC   MSG9720              Std Left Menu end/spacer/app table start
 PP_OTC   RTNHEAD              Insert Header Variables
 PP_OTC   MSG5832S             *Application panel title
 PP_OTC   MSG2548              *Instructions
 PP_OTC   RTNERRS              Use errs array to do msgs from last ops
 PP_OTC   MSG5836              <SELECT>
 PP_OTC   SLTPROD              Product Select
 PP_OTC   MSG2550              </SELECT>
 PP_OTC   MSG2546              View Sample Link
 PP_OTC   MSG2551              <SELECT>
 PP_OTC   SLTNUMP              Number of Permits Select
 PP_OTC   MSG2550              </SELECT>
 PP_OTC   MSG5833              Delivery Address Header
 PP_OTC   RTNDELY              Delivery Address
 PP_OTC   MSG5834              Rush Service Options Header
 PP_OTC   RTNRUSH              Rush Service Options
 PP_OTC   MSG5835              Shipping Options Header
 PP_OTC   RTNSHIP              Shipping Information
 PP_OTC   MSG2568c             Additional Comments
 PP_OTC   MSG2569              Next Button
 PP_OTC   MSG9786©             standard copyright and </form>
 PP_OTC   MSG9790              standard </body></html>
#PP_OTCDN
 PP_OTCDN MSG2541              *context/title/etc
 PP_OTCDN MSG9001              javascript  - style - 1
 PP_OTCDN MSG9002              javascript  - stype - 2 & Java Starter
 PP_OTCDN MSG9015              javascript  - setsubmit()
 PP_OTCDN MSG9099              javascript  - ender
 PP_OTCDN MSG9702@             head/body/form
 PP_OTCDN MSG9703              Top Bars Part 1
 PP_OTCDN MSG9704              Top Bars Part 2
 PP_OTCDN MSG9705              Std Left Menu Bar part 1
 PP_OTCDN MSG9720              Std Left Menu end/spacer/app table start
 PP_OTCDN RTNHEAD              Insert Header Variables
 PP_OTCDN MSG2545S             *Application panel title
 PP_OTCDN MSG2547              *OTC IS DOWN TEXT
 PP_OTCDN MSG9786©             standard copyright and </form>
 PP_OTCDN MSG9790              standard </body></html>
#PP_OTCS
 PP_OTCS  MSG2541              *context/title/etc
 PP_OTCS  MSG9001              javascript  - style - 1
 PP_OTCS  MSG9002              javascript  - stype - 2 & Java Starter
 PP_OTCS  MSG9014              javascript  - change
 PP_OTCS  MSG9015              javascript  - setsubmit()
 PP_OTCS  MSG9099              javascript  - ender
 PP_OTCS  MSG5805              <style>
 PP_OTCS  MSG5806              508 header styles
 PP_OTCS  MSG5811              508 header styles 2
 PP_OTCS  MSG5807              </style>
 PP_OTCS  MSG9702@             head/body/form
 PP_OTCS  MSG9703              Top Bars Part 1
 PP_OTCS  MSG9704              Top Bars Part 2
 PP_OTCS  MSG9705              Std Left Menu Bar part 1
 PP_OTCS  MSG9720              Std Left Menu end/spacer/app table start
 PP_OTCS  RTNHEAD              Insert Header Variables
 PP_OTCS  RTNOTCP              Over the Counter Pass-on variables
 PP_OTCS  MSG2586S             *Application panel title
 PP_OTCS  RTNERRS              Use errs array to do msgs from last ops
 PP_OTCS  MSG2587T             Product
 PP_OTCS  MSG2588NV            Enter Number of Permits
 PP_OTCS  RTNDELY              Delivery Address
 PP_OTCS  RTNRUSH              Rush Service Options
 PP_OTCS  RTNSHIP              Shipping Information
 PP_OTCS  MSG2598ctS           Additional Comments and cost
 PP_OTCS  MSG2599              Submit Button
 PP_OTCS  MSG9786©             standard copyright and </form>
 PP_OTCS  MSG9790              standard </body></html>
#PP_OTCCLS
 PP_OTCCLSMSG2541              *context/title/etc
 PP_OTCCLSMSG9702@             *context/title/etc
 PP_OTCCLSRTNERRS              Use errs array to do msgs from last ops
 PP_OTCCLSMSG2584              *context/title/etc
 PP_OTCCLSMSG9790              standard </body></html>
#PP_3RCV
 PP_3RCV  MSG2701              *context/title/etc.
 PP_3RCV  MSG9001              javascript  - style sheet
 PP_3RCV  MSG9002              javascript  - starter
 PP_3RCV  MSG9014              javascript  - change
 PP_3RCV  MSG9015              javascript  - setsubmit
 PP_3RCV  MSG2718W             javascript  - newOrd3rdPty(third)
 PP_3RCV  MSG9024              javascript  - edit
 PP_3RCV  MSG9099              javascript  - ender
 PP_3RCV  MSG9702@             head/body/form
 PP_3RCV  MSG9703              Top Bars Part 1
 PP_3RCV  MSG9704              Top Bars Part 2
 PP_3RCV  MSG9705              Std Left Menu Bar part 1
 PP_3RCV  MSG9720              Std Left Menu end/spacer/app table start
 PP_3RCV  RTNHEAD              Insert header variables
 PP_3RCV  MSG2720S             *Application panel title
 PP_3RCV  RTNERRS              Use errs array to do msgs from last ops
 PP_3RCV  MSG2722              *Add New 3rd party Button
 PP_3RCV  MSG2725              *Center and start table
 PP_3RCV  RTN3RDD              *Lists the 3rd Party Receivables - DSP
 PP_3RCV  MSG2729              *</table>
 PP_3RCV  MSG9786©             standard copyright
 PP_3RCV  MSG9790              standard </body></html>
#PP_3RCV2
 PP_3RCV2 MSG2751              *context/title/etc.
 PP_3RCV2 MSG9001              javascript  - style sheet
 PP_3RCV2 MSG9002              javascript  - starter
 PP_3RCV2 MSG9014              javascript  - change
 PP_3RCV2 MSG9015              javascript  - setsubmit
 PP_3RCV2 MSG9024              javascript  - edit
 PP_3RCV2 MSG9099              javascript  - ender
 PP_3RCV2 MSG9702@             head/body/form
 PP_3RCV2 MSG9703              Top Bars Part 1
 PP_3RCV2 MSG9704              Top Bars Part 2
 PP_3RCV2 MSG9705              Std Left Menu Bar part 1
 PP_3RCV2 MSG9720              Std Left Menu end/spacer/app table start
 PP_3RCV2 RTNHEAD              Insert header variables
 PP_3RCV2 MSG2770kS            *Application panel title
 PP_3RCV2 RTNERRS              Use errs array to do msgs from last ops
 PP_3RCV2 MSG2775              *Center and start table
 PP_3RCV2 RTN3RDE              *Lists the 3rd Party Receivables - EDT
 PP_3RCV2 MSG2780              *Cancel and Update button
 PP_3RCV2 MSG2782              *delete button (update only)
 PP_3RCV2 MSG2784              </table>
 PP_3RCV2 MSG9786©             standard copyright
 PP_3RCV2 MSG2790              *focus
 PP_3RCV2 MSG9790              standard </body></html>
#PP_EXT
 PP_EXT   MSG2801             *context/title/etc
 PP_EXT   MSG9001             javascript  - style - 1
 PP_EXT   MSG9002             javascript  - stype - 2 & Java Starter
 PP_EXT   MSG9014             javascript  - change
 PP_EXT   MSG9015             javascript  - setsubmit
 PP_EXT   MSG2811            *javascript  - dnl_rpt(mbrname) - OpWin
 PP_EXT   MSG9099             javascript  - ender
 PP_EXT   MSG9702@            head/body/form
 PP_EXT   MSG9703              Top Bars Part 1
 PP_EXT   MSG9704              Top Bars Part 2
 PP_EXT   MSG9705              Std Left Menu Bar part 1
 PP_EXT   MSG9720              Std Left Menu end/spacer/app table start
 PP_EXT   RTNHEAD             Insert Header Variables
 PP_EXT   MSG2820             *Application panel title
 PP_EXT   RTNERRS             Use errs array to do msgs from last ops
 PP_EXT   MSG2831             *Instructions
 PP_EXT   MSG2835             *Extract button
 PP_EXT   RTN_EXT             RTN to list all extractions
 PP_EXT   MSG9786©            standard copyright and </form>
 PP_EXT   MSG9790             standard </body></html>
#DP_SCR1
 DP_SCR1  MSG3101              *context/title/etc
 DP_SCR1  MSG9108              jquery-3.4.1.min.js / jquery-ui-smooth-1.12.0.min
 DP_SCR1  MSG9001              javascript  - style - 1
 DP_SCR1  MSG9002              javascript  - stype - 2 & Java Starter
 DP_SCR1  MSG9008              javascript  - clrForm(form)
 DP_SCR1  MSG9010              javascript  - isFilled
 DP_SCR1  MSG9014              javascript  - change()
 DP_SCR1  MSG9015              javascript  - setsubmit()
 DP_SCR1  MSG9031              javascript  - isForm1()
 DP_SCR1  MSG3110              javascript  - setsubmitORD()
 DP_SCR1  MSG3111     Y        javascript  - show_prb() / show_dpinfo()
 DP_SCR1  MSG3106              javascript  - isReady(1)
 DP_SCR1  MSG3107              javascript  - isReady(2)
 DP_SCR1  MSG3108              javascript  - isReady(3)
 DP_SCR1  MSG9033              javascript  - isForm1()
 DP_SCR1  MSG9099              javascript  - ender
 DP_SCR1  MSG3102@             head/body/form
 DP_SCR1  MSG9703              Top Bars Part 1
 DP_SCR1  MSG9704              Top Bars Part 2
 DP_SCR1  MSG9705              Std Left Menu Bar part 1
 DP_SCR1  MSG9720              Std Left Menu end/spacer/app table start
 DP_SCR1  RTNHEAD              Insert Header Variables
 DP_SCR1  RTNPASS              Pass-on variables
 DP_SCR1  MSG3120Sr            *Application panel title
 DP_SCR1  RTNERRS              Use errs array to do msgs from last ops
 DP_SCR1  MSG3131              *Instructions
 DP_SCR1  RTNOSRH              Display Top Portion for Searching
 DP_SCR1  RTN_DPL              Show ALL Diploma Orders
 DP_SCR1  MSG9786©             standard copyright and </form>
 DP_SCR1  MSG9790              standard </body></html>
#DP_SCR2
 DP_SCR2  MSG3151              *context/title/etc
 DP_SCR2  MSG9101              <script> newWindow.js
 DP_SCR2  MSG9001              javascript  - style - 1
 DP_SCR2  MSG9002              javascript  - stype - 2 & Java Starter
 DP_SCR2  MSG9015              javascript  - setsubmit()
 DP_SCR2  MSG2165&             javascript  - PPwin(parm,w,h)
 DP_SCR2  MSG2111              javascript  - chgcmt()
 DP_SCR2  MSG2113              javascript  - chgprb()
 DP_SCR2  MSG2116&             javascript  - chgTrackNum()
 DP_SCR2  MSG2117&             javascript  - updateInfo()
 DP_SCR2  MSG9099              javascript  - ender
 DP_SCR2  MSG9702@             head/body/form
 DP_SCR2  MSG9703              Top Bars Part 1
 DP_SCR2  MSG9704              Top Bars Part 2
 DP_SCR2  MSG9705              Std Left Menu Bar part 1
 DP_SCR2  MSG9720              Std Left Menu end/spacer/app table start
 DP_SCR2  RTNHEAD              Insert Header Variables
 DP_SCR2  RTNPASS              Pass-on variables
 DP_SCR2  MSG3170Sr            *Application panel title
 DP_SCR2  RTNERRS              Use errs array to do msgs from last ops
 DP_SCR2  MSG3180              *Instructions
 DP_SCR2  RTN_DP1              Diploma Detail Info - TOP (Student)
 DP_SCR2  RTN_DP2              Diploma Actions/Buttons - MID
 DP_SCR2  RTNCMNT              Display comment/problems for this order
 DP_SCR2  RTN_DP3              Optional Diploma Database
 DP_SCR2  RTN_DP4              Diploma Detail Info - BTM (Delivery)
 DP_SCR2  MSG9786©             standard copyright and </form>
 DP_SCR2  MSG9790              standard </body></html>
#GT_SCR1
 GT_SCR1  MSG4101              *context/title/etc
 GT_SCR1  MSG9001              javascript  - style - 1
 GT_SCR1  MSG9002              javascript  - stype - 2 & Java Starter
 GT_SCR1  MSG9010              javascript  - isFilled
 GT_SCR1  MSG9014              javascript  - change()
 GT_SCR1  MSG9015              javascript  - setsubmit()
 GT_SCR1  MSG9031              javascript  - isForm1()
 GT_SCR1  MSG4110              javascript  - setsubmitORD() / sql_ord()
 GT_SCR1  MSG9099              javascript  - ender
 GT_SCR1  MSG9702@             head/body/form
 GT_SCR1  MSG9703              Top Bars Part 1
 GT_SCR1  MSG9704              Top Bars Part 2
 GT_SCR1  MSG9705              Std Left Menu Bar part 1
 GT_SCR1  MSG9720              Std Left Menu end/spacer/app table start
 GT_SCR1  RTNHEAD              Insert Header Variables
 GT_SCR1  MSG4120S    Y        *Application panel title
 GT_SCR1  RTNERRS              Use errs array to do msgs from last ops
 GT_SCR1  MSG4131              *Instructions
 GT_SCR1  RTN_GTL              Show ALL Golf Tournament Orders
 GT_SCR1  MSG9786©             standard copyright and </form>
 GT_SCR1  MSG9790              standard </body></html>
#GT_REP1
 GT_REP1  MSG4151              *context/title/etc
 GT_REP1  MSG9001              javascript  - style - 1
 GT_REP1  MSG9002              javascript  - stype - 2 & Java Starter
 GT_REP1  MSG9010              javascript  - isFilled
 GT_REP1  MSG4210              javascript  - isReady()
 GT_REP1  MSG9014              javascript  - change()
 GT_REP1  MSG9015              javascript  - setsubmit()
 GT_REP1  MSG9018              javascript  - isEmail()
 GT_REP1  MSG9031              javascript  - isForm1()
 GT_REP1  MSG9070              javascript  - setNL()
 GT_REP1  MSG9099              javascript  - ender
 GT_REP1  MSG9701@             head/body/form
 GT_REP1  MSG9703              Top Bars Part 1
 GT_REP1  MSG9704              Top Bars Part 2
 GT_REP1  MSG9705              Std Left Menu Bar part 1
 GT_REP1  MSG9720              Std Left Menu end/spacer/app table start
 GT_REP1  RTNHEAD              Insert Header Variables
 GT_REP1  MSG4170S    Y        *Application panel title
 GT_REP1  RTNERRS              Use errs array to do msgs from last ops
 GT_REP1  MSG4181     Y        *Instructions
 GT_REP1  MSG4182E             E-Mail and Submit button
 GT_REP1  MSG9786©             standard copyright and </form>
 GT_REP1  MSG9790              standard </body></html>
#CE_SCR1
 CE_SCR1  MSG5101              *context/title/etc
 CE_SCR1  MSG9001              javascript  - style - 1
 CE_SCR1  MSG9002              javascript  - stype - 2 & Java Starter
 CE_SCR1  MSG9008              javascript  - clrForm(form)
 CE_SCR1  MSG9010              javascript  - isFilled
 CE_SCR1  MSG9014              javascript  - change()
 CE_SCR1  MSG9015              javascript  - setsubmit()
 CE_SCR1  MSG9031              javascript  - isForm1()
 CE_SCR1  MSG5110              javascript  - setsubmitORD()
 CE_SCR1  MSG5111              javascript  - show_prb() / show_ceinfo()
 CE_SCR1  MSG5106              javascript  - isReady(1)
 CE_SCR1  MSG5107              javascript  - isReady(2)
 CE_SCR1  MSG5108              javascript  - isReady(3)
 CE_SCR1  MSG9099              javascript  - ender
 CE_SCR1  MSG5102@             head/body/form
 CE_SCR1  MSG9703              Top Bars Part 1
 CE_SCR1  MSG9704              Top Bars Part 2
 CE_SCR1  MSG9705              Std Left Menu Bar part 1
 CE_SCR1  MSG9720              Std Left Menu end/spacer/app table start
 CE_SCR1  RTNHEAD              Insert Header Variables
 CE_SCR1  RTNPASS              Pass-on variables
 CE_SCR1  MSG5120Sr            *Application panel header
 CE_SCR1  RTNERRS              Use errs array to do msgs from last ops
 CE_SCR1  MSG5131              Refresh Button
 CE_SCR1  RTNSRC1              Display Top Portion for Searching
 CE_SCR1  RTN_CEL              Show ALL Certification Orders
 CE_SCR1  MSG9786©             standard copyright and </form>
 CE_SCR1  MSG9790              standard </body></html>
#CE_SCR2
 CE_SCR2  MSG5151              *context/title/etc
 CE_SCR2  MSG9001              javascript  - style - 1
 CE_SCR2  MSG9002              javascript  - stype - 2 & Java Starter
 CE_SCR2  MSG9015              javascript  - setsubmit()
 CE_SCR2  MSG2111              javascript  - chgcmt()
 CE_SCR2  MSG2113              javascript  - chgprb()
 CE_SCR2  MSG9099              javascript  - ender
 CE_SCR2  MSG9702@             head/body/form
 CE_SCR2  MSG9703              Top Bars Part 1
 CE_SCR2  MSG9704              Top Bars Part 2
 CE_SCR2  MSG9705              Std Left Menu Bar part 1
 CE_SCR2  MSG9720              Std Left Menu end/spacer/app table start
 CE_SCR2  RTNHEAD              Insert Header Variables
 CE_SCR2  RTNPASS              Pass-on variables
 CE_SCR2  MSG5170Sr            *Application panel title
 CE_SCR2  RTNERRS              Use errs array to do msgs from last ops
 CE_SCR2  MSG5180              *Instructions
 CE_SCR2  RTN_CE1              Certification Detail Info - TOP (Student
 CE_SCR2  RTN_CE2              Certification Actions/Buttons - MID
 CE_SCR2  RTN_CE3              Optional Certification Database
 CE_SCR2  RTNCMNT              Display comment/problems for this order
 CE_SCR2  RTN_CE4              Certification Detail Info - BTM (Delivry
 CE_SCR2  RTNDPCS              Display customer service stats
 CE_SCR2  MSG9786©             standard copyright and </form>
 CE_SCR2  MSG9790              standard </body></html>
#REPORTS
 REPORTS  MSG5201              *context/title/etc
 REPORTS  MSG9001              javascript  - style - 1
 REPORTS  MSG9002              javascript  - stype - 2 & Java Starter
 REPORTS  MSG9014              javascript  - change()
 REPORTS  MSG9015              javascript  - setsubmit()
 REPORTS  MSG5206              *javascript  - PDFMsg() - 1
 REPORTS  MSG5209              *javascript  - PDFMsg() - 2
 REPORTS  MSG5208              *javascript  - PDFEml() - 1
 REPORTS  MSG9099              javascript  - ender
 REPORTS  MSG5202@             *head/body/form /RSS-PDF/
 REPORTS  MSG9703              Top Bars Part 1
 REPORTS  MSG9704              Top Bars Part 2
 REPORTS  MSG9705              Std Left Menu Bar part 1
 REPORTS  MSG9720              Std Left Menu end/spacer/app table start
 REPORTS  RTNHEAD              Insert Header Variables
 REPORTS  MSG5220S             *Application panel title
 REPORTS  RTNERRS              Use errs array to do msgs from last ops
 REPORTS  MSG5231              *Instructions
 REPORTS  RTNRPT1              Drop Down for Monthly Report
 REPORTS  RTNRPPP              Parking Permit - Custom Reports
 REPORTS  MSG5289              Adobe Acrobat Reader Link
 REPORTS  MSG9786©             standard copyright and </form>
 REPORTS  MSG9790              standard </body></html>
#RESEND
 RESEND   MSG2301          *context/title/etc.
 RESEND   MSG9001             javascript  - style sheet
 RESEND   MSG9002             javascript  - starter
 RESEND   MSG9010             javascript  - isFilled
 RESEND   MSG9014             javascript  - change
 RESEND   MSG9015             javascript  - setsubmit
 RESEND   MSG9018             javascript  - isEmail
 RESEND   MSG2306             javascript isReady() - 1
 RESEND   MSG2307             javascript isReady() - 2
 RESEND   MSG9099             javascript  - ender
 RESEND   MSG9701@             head/body/form
 RESEND   MSG9703              Top Bars Part 1
 RESEND   MSG9704              Top Bars Part 2
 RESEND   MSG9705              Std Left Menu Bar part 1
 RESEND   MSG9720              Std Left Menu end/spacer/app table start
 RESEND   RTNHEAD                 Insert header variables
 RESEND   RTNPASS              Pass-on variables
 RESEND   RTNERRS             Use errs array to do msgs from last ops
 RESEND   MSG2320OC            *Application panel title
 RESEND   RTN_SND             Display Resend results
 RESEND   MSG9786©            standard copyright and </form>
 RESEND   MSG9790             standard </body></html>
#MS_STR
 MS_STR   MSG5301       *context/title/etc.
 MS_STR   MSG9001             javascript  - style sheet
 MS_STR   MSG9002             javascript  - starter
 MS_STR   MSG9014             javascript  - change
 MS_STR   MSG9015             javascript  - setsubmit
 MS_STR   MSG9024             javascript  - edit
 MS_STR   MSG9099             javascript  - ender
 MS_STR   MSG9702@            head/body/form
 MS_STR   MSG9703              Top Bars Part 1
 MS_STR   MSG9704              Top Bars Part 2
 MS_STR   MSG9705              Std Left Menu Bar part 1
 MS_STR   MSG9720              Std Left Menu end/spacer/app table start
 MS_STR   RTNHEAD                 Insert header variables
 MS_STR   MSG5320S            *Application panel title
 MS_STR   RTNERRS              Use errs array to do msgs from last ops
 MS_STR   MSG5325             *Add Street Button
 MS_STR   MSG5330             *Center and start table
 MS_STR   MSG5331             *Menu items list 1 (table header)
 MS_STR   RTNSTRT             *Lists the state names and codes
 MS_STR   MSG5339             *</table>
 MS_STR   MSG9786©            standard copyright
 MS_STR   MSG9790             standard </body></html>
#MS_STEDT
 MS_STEDT MSG5401       *context/title/etc.
 MS_STEDT MSG9001             javascript  - style sheet
 MS_STEDT MSG9002             javascript  - starter
 MS_STEDT MSG9014             javascript  - change
 MS_STEDT MSG9015             javascript  - setsubmit
 MS_STEDT MSG9024             javascript  - edit
 MS_STEDT MSG9099             javascript  - ender
 MS_STEDT MSG9702@            head/body/form
 MS_STEDT MSG9703              Top Bars Part 1
 MS_STEDT MSG9704              Top Bars Part 2
 MS_STEDT MSG9705              Std Left Menu Bar part 1
 MS_STEDT MSG9720              Std Left Menu end/spacer/app table start
 MS_STEDT RTNHEAD                 Insert header variables
 MS_STEDT MSG5420KS           *Application panel title
 MS_STEDT RTNERRS              Use errs array to do msgs from last ops
 MS_STEDT MSG5430             *Center and start table
 MS_STEDT MSG5431             *Menu items list 1 (table header)
 MS_STEDT RTNSTED             *Lists the state names and codes
 MS_STEDT MSG5435             *cancel and Update buttons
 MS_STEDT MSG5436             *delete button (update only)
 MS_STEDT MSG5439             *update button and </table>
 MS_STEDT MSG9786©            standard copyright
 MS_STEDT MSG9790             standard </body></html>
#MS_BUS
 MS_BUS   MSG5601       *context/title/etc.
 MS_BUS   MSG9001             javascript  - style sheet
 MS_BUS   MSG9002             javascript  - starter
 MS_BUS   MSG9014             javascript  - change
 MS_BUS   MSG9015             javascript  - setsubmit
 MS_BUS   MSG9024             javascript  - edit
 MS_BUS   MSG9099             javascript  - ender
 MS_BUS   MSG9702@            head/body/form
 MS_BUS   MSG9703              Top Bars Part 1
 MS_BUS   MSG9704              Top Bars Part 2
 MS_BUS   MSG9705              Std Left Menu Bar part 1
 MS_BUS   MSG9720              Std Left Menu end/spacer/app table start
 MS_BUS   RTNHEAD                 Insert header variables
 MS_BUS   MSG5620S            *Application panel title
 MS_BUS   RTNERRS              Use errs array to do msgs from last ops
 MS_BUS   MSG5630             *add business button
 MS_BUS   MSG5631             *show deleted button
 MS_BUS   MSG5632             *show active button
 MS_BUS   MSG5633             *Please select business text
 MS_BUS   RTNBLST             *Lists the businesses
 MS_BUS   MSG9786©            standard copyright
 MS_BUS   MSG9790             standard </body></html>
#MS_BSEDT
 MS_BSEDT MSG5651       *context/title/etc.
 MS_BSEDT MSG9001             javascript  - style sheet
 MS_BSEDT MSG9002             javascript  - starter
 MS_BSEDT MSG9010             javascript  - isFilled
 MS_BSEDT MSG9014             javascript  - change
 MS_BSEDT MSG9015             javascript  - setsubmit
 MS_BSEDT MSG9018             javascript  - isEmail
 MS_BSEDT MSG9024             javascript  - edit
 MS_BSEDT MSG5656             javascript  - isReady(1)
 MS_BSEDT MSG5657             javascript  - isReady(2)
 MS_BSEDT MSG5658             javascript  - isReady(3)
 MS_BSEDT MSG9070             javascript  - setNL()
 MS_BSEDT MSG9099             javascript  - ender
 MS_BSEDT MSG9701@            head/body/form w/ isReady
 MS_BSEDT MSG9703              Top Bars Part 1
 MS_BSEDT MSG9704              Top Bars Part 2
 MS_BSEDT MSG9705              Std Left Menu Bar part 1
 MS_BSEDT MSG9720              Std Left Menu end/spacer/app table start
 MS_BSEDT RTNHEAD                 Insert header variables
 MS_BSEDT MSG5670SI           *Application panel title
 MS_BSEDT RTNERRS              Use errs array to do msgs from last ops
 MS_BSEDT MSG5672             *Reset Pin Button
 MS_BSEDT MSG5680             *Center and start table
 MS_BSEDT RTNBSED             *The editable information fields
 MS_BSEDT MSG5685             *cancel button
 MS_BSEDT MSG5686             *delete and update button (update only)
 MS_BSEDT MSG5687             *add button (add only)
 MS_BSEDT MSG5688             *perm del and restore button (deleted only)
 MS_BSEDT MSG5689             *</table>
 MS_BSEDT MSG9786©            standard copyright
 MS_BSEDT MSG9790             standard </body></html>
#MS_SCR1                       5900's
 MS_SCR1  MSG5901              *context/title/etc
 MS_SCR1  MSG9001              javascript  - style - 1
 MS_SCR1  MSG9002              javascript  - stype - 2 & Java Starter
 MS_SCR1  MSG9008              javascript  - clrForm(form)
 MS_SCR1  MSG9010              javascript  - isFilled
 MS_SCR1  MSG9012              javascript  - isNum/isSSN/isCNF
 MS_SCR1  MSG9014              javascript  - change()
 MS_SCR1  MSG9015              javascript  - setsubmit()
 MS_SCR1  MSG9031              javascript  - isForm1()
 MS_SCR1  MSG5910              javascript  - setsubmitORD()
 MS_SCR1  MSG5906              javascript  - isReady(1)
 MS_SCR1  MSG5907              javascript  - isReady(2)
 MS_SCR1  MSG5908              javascript  - isReady(3)
 MS_SCR1  MSG9099              javascript  - ender
 MS_SCR1  MSG5902@             head/body/form
 MS_SCR1  MSG9703              Top Bars Part 1
 MS_SCR1  MSG9704              Top Bars Part 2
 MS_SCR1  MSG9705              Std Left Menu Bar part 1
 MS_SCR1  MSG9720              Std Left Menu end/spacer/app table start
 MS_SCR1  RTNHEAD              Insert Header Variables
 MS_SCR1  RTNPASS              Pass-on variables
 MS_SCR1  MSG9726k             *hidden keys
 MS_SCR1  MSG5920S             *Application panel title
 MS_SCR1  RTNERRS              Use errs array to do msgs from last ops
 MS_SCR1  MSG5931              *Instructions
 MS_SCR1  RTNSRC1              Display Top Portion for Searching
 MS_SCR1  RTN_PPL              Display List of Matches for PP
 MS_SCR1  MSG9786©             standard copyright and </form>
 MS_SCR1  MSG9790              standard </body></html>
#MS_SCR2
 MS_SCR2  MSG2151              *context/title/etc
 MS_SCR2  MSG9001              javascript  - style - 1
 MS_SCR2  MSG9002              javascript  - stype - 2 & Java Starter
 MS_SCR2  MSG2109              javascript  - EdtDAwin()
 MS_SCR2  MSG2111              javascript  - chgcmt()
 MS_SCR2  MSG2113              javascript  - chgprb()
 MS_SCR2  MSG2112              javascript  - set_CMNT()
 MS_SCR2  MSG9015              javascript  - setsubmit()
 MS_SCR2  MSG9026O             javascript  - prnt_pdf(key)
 MS_SCR2  MSG9027O             javascript  - prnt_temp(key)
 MS_SCR2  MSG2165&             javascript  - PPwin(parm,w,h)
 MS_SCR2  MSG2161PO            javascript  - chk_MRT() / chk_COD
 MS_SCR2  MSG2163P             javascript  - chk_3PP
 MS_SCR2  MSG9099              javascript  - ender
 MS_SCR2  MSG9702@             head/body/form
 MS_SCR2  MSG9703              Top Bars Part 1
 MS_SCR2  MSG9704              Top Bars Part 2
 MS_SCR2  MSG9705              Std Left Menu Bar part 1
 MS_SCR2  MSG9720              Std Left Menu end/spacer/app table start
 MS_SCR2  RTNHEAD              Insert Header Variables
 MS_SCR2  RTNPASS              Pass-on variables
 MS_SCR2  RTNERRS              Use errs array to do msgs from last ops
 MS_SCR2  MSG2170SPOC          *Application panel title
 MS_SCR2  MSG2171              *Instructions
 MS_SCR2  RTN_MS1              Display Parking Permit Detail 1
 MS_SCR2  RTNCMNT              Display problem/comments for this order
 MS_SCR2  RTNTRAK              Display IMB Tracking data for this order
 MS_SCR2  MSG9786©             standard copyright and </form>
 MS_SCR2  MSG9101              <script> newWindow.js
 MS_SCR2  MSG9790              standard </body></html>
#MS_RVP
 MS_RVP   MSG5501              *context/title/etc.
 MS_RVP   MSG9001              javascript  - style sheet
 MS_RVP   MSG9002              javascript  - starter
 MS_RVP   MSG9014              javascript  - change
 MS_RVP   MSG9015              javascript  - setsubmit
 MS_RVP   MSG9024              javascript  - edit
 MS_RVP   MSG9025              javascript  - AnyWin
 MS_RVP   MSG9031              javascript  - isForm1()
 MS_RVP   MSG9046              javascript  - replaceAST
 MS_RVP   MSG5507              javascript  - chgcmt - for res editor
 MS_RVP   MSG5509              javascript  - prt_mailer
 MS_RVP   MSG5510f             javascript  - findAddr()
 MS_RVP   MSG5511              javascript  - setAddr()
 MS_RVP   MSG5512              javascript  - clrSrch()
 MS_RVP   MSG5513              javascript  - setsubmitRES() - 1
 MS_RVP   MSG5514              javascript  - setsubmitRES() - 2
 MS_RVP   MSG5515              javascript  - setsubmitPLT()
 MS_RVP   MSG5516              javascript  - setsubmitNAM()
 MS_RVP   MSG5517              javascript  - confirmEmail()
 MS_RVP   MSG5518W             javascript  - newORD2();
 MS_RVP   MSG5519              javascript  - setsubmitORD()
 MS_RVP   MSG9055              javascript  - date chooser
 MS_RVP   MSG9099              javascript  - ender
 MS_RVP   MSG9702@             head/body/form
 MS_RVP   MSG9703              Top Bars Part 1
 MS_RVP   MSG9704              Top Bars Part 2
 MS_RVP   MSG9705              Std Left Menu Bar part 1
 MS_RVP   MSG9720              Std Left Menu end/spacer/app table start
 MS_RVP   RTNHEAD              Insert header variables
 MS_RVP   RTNMUNI              Muni Search Pass-on variables
 MS_RVP   MSG5520S             *Application panel title
 MS_RVP   RTNERRS              Use errs array to do msgs from last ops
 MS_RVP   MSG5524              *add resident button/action addr buttons
 MS_RVP   MSG5525              *switch to deleted mode
 MS_RVP   MSG9726k             *hidden keys
 MS_RVP   MSG5527              *instructions for search
 MS_RVP   RTNMSRH              *Search Resident DB by Tel#/Name/Addr
 MS_RVP   RTNRERR              *Table/Rows of Residence Actions/End Table
 MS_RVP   RTN_RVP              *Table/Rows of Resident/Vehicle/Pets
 MS_RVP   RTNADDR              Address Info
 MS_RVP   RTNCMMS              Display problem/comments for this order
 MS_RVP   MSG5545q             Backdate Checkbox
 MS_RVP   MSG554623            Backdate Date Field
 MS_RVP   MSG5547              Hidden Backdate when field is not shown
 MS_RVP   MSG5548              focus(); on barcode if available
 MS_RVP   MSG5549d             *open resident lookup if needed
 MS_RVP   MSG9786©             standard copyright
 MS_RVP   MSG9790              standard </body></html>
#MS_RES2
 MS_RES2  MSG5501              *context/title/etc.
 MS_RES2  MSG9001              javascript  - style sheet
 MS_RES2  MSG9002              javascript  - starter
 MS_RES2  MSG9014              javascript  - change
 MS_RES2  MSG9015              javascript  - setsubmit
 MS_RES2  MSG9024              javascript  - edit
 MS_RES2  MSG9031              javascript  - isForm1()
 MS_RES2  MSG9046              javascript  - replaceAST
 MS_RES2  MSG5509              javascript  - prt_mailer
 MS_RES2  MSG5510f             javascript  - findAddr()
 MS_RES2  MSG5512              javascript  - clrSrch()
 MS_RES2  MSG5508              javascript  - setsubmitKEY() - 1
 MS_RES2  MSG5515              javascript  - setsubmitPLT()
 MS_RES2  MSG5516              javascript  - setsubmitNAM()
 MS_RES2  MSG5517              javascript  - confirmEmail()
 MS_RES2  MSG5518W             javascript  - newORD2();
 MS_RES2  MSG5519              javascript  - setsubmitORD()
 MS_RES2  MSG9099              javascript  - ender
 MS_RES2  MSG9702@             head/body/form
 MS_RES2  MSG9703              Top Bars Part 1
 MS_RES2  MSG9704              Top Bars Part 2
 MS_RES2  MSG9705              Std Left Menu Bar part 1
 MS_RES2  MSG9720              Std Left Menu end/spacer/app table start
 MS_RES2  MSG5528              Table Row for DELETED Mode
 MS_RES2  RTNHEAD              Insert header variables
 MS_RES2  RTNMUNI              Muni Search Pass-on variables
 MS_RES2  MSG5520S             *Application panel title
 MS_RES2  RTNERRS              Use errs array to do msgs from last ops
 MS_RES2  MSG9726k             *hidden keys
 MS_RES2  MSG5526              *switch to production mode
 MS_RES2  RTNMSRH              *Search Resident DB by Tel#/Name/Addr
 MS_RES2  RTNRERR              *Table/Rows of Residence Actions/End Table
 MS_RES2  RTN_RE2              *Table/Rows of Resident2/Vehicle2/Pets2
 MS_RES2  MSG5528              Table Row for DELETED Mode
 MS_RES2  MSG5548              focus(); on barcode if available
 MS_RES2  MSG5549d             *open resident lookup if needed
 MS_RES2  MSG9786©             standard copyright
 MS_RES2  MSG9790              standard </body></html>
#MS_QUICK
 MS_QUICK MSG5951              *context/title/etc.
 MS_QUICK MSG9001              javascript  - style sheet
 MS_QUICK MSG9002              javascript  - starter
 MS_QUICK MSG9015              javascript  - setsubmit
 MS_QUICK MSG5511              javascript  - setAddr()
 MS_QUICK MSG5512              javascript  - setSrch/clrSrch
 MS_QUICK MSG9028              javascript  - prnt_rept(key)
 MS_QUICK MSG9031              javascript  - isForm1()
 MS_QUICK MSG9055              javascript  - date chooser
 MS_QUICK MSG9099              javascript  - ender
 MS_QUICK MSG9702@             head/body/form
 MS_QUICK MSG9703              Top Bars Part 1
 MS_QUICK MSG9704              Top Bars Part 2
 MS_QUICK MSG9705              Std Left Menu Bar part 1
 MS_QUICK MSG9720              Std Left Menu end/spacer/app table start
 MS_QUICK RTNHEAD              Insert header variables
 MS_QUICK MSG5970S             *Application panel title
 MS_QUICK RTNERRS              Use errs array to do msgs from last ops
 MS_QUICK MSG5972if            Batch processing Info 1 - Mail Only
 MS_QUICK MSG5975              *instructions
 MS_QUICK RTNMSRH              *Search Resident DB by Tel#/Name/Addr
 MS_QUICK RTN_RVP              *Table/Rows of Resident/Vehicle/Pets
 MS_QUICK MSG9726k             *hidden keys
 MS_QUICK MSG5977Q             *hidden variables for quick order
 MS_QUICK MSG5979              e-mail report button
 MS_QUICK MSG5981q             Backdate Checkbox
 MS_QUICK MSG598223            Backdate Date Field
 MS_QUICK MSG5983              Hidden Backdate when field is not shown
 MS_QUICK MSG5994if            auto close batch if max_batch reached
 MS_QUICK MSG5995              focus();
 MS_QUICK MSG5989W             javascript  - newORD2();
 MS_QUICK MSG5990              javascript  - clear fields
 MS_QUICK MSG9786©             standard copyright
 MS_QUICK MSG9790              standard </body></html>
#MS_NCOA
 MS_NCOA  MSG6001              *context/title/etc.
 MS_NCOA  MSG9001              javascript  - style sheet
 MS_NCOA  MSG9002              javascript  - starter
 MS_NCOA  MSG9014              javascript  - change
 MS_NCOA  MSG9015              javascript  - setsubmit
 MS_NCOA  MSG9099              javascript  - ender
 MS_NCOA  MSG9702@             head/body/form
 MS_NCOA  MSG9703              Top Bars Part 1
 MS_NCOA  MSG9704              Top Bars Part 2
 MS_NCOA  MSG9705              Std Left Menu Bar part 1
 MS_NCOA  MSG9720              Std Left Menu end/spacer/app table start
 MS_NCOA  RTNHEAD              Insert header variables
 MS_NCOA  MSG6020S             *Application panel title
 MS_NCOA  RTNERRS              Use errs array to do msgs from last ops
 MS_NCOA  MSG6027              *instructions for search
 MS_NCOA  RTNNCOA              *Table/Rows of Residence Actions/End Table
 MS_NCOA  MSG9786©             standard copyright
 MS_NCOA  MSG9790              standard </body></html>
#MS_RETND                      6050-6099
 MS_RETND MSG6051              *context/title/etc.
 MS_RETND MSG9001              javascript  - style sheet
 MS_RETND MSG9002              javascript  - starter
 MS_RETND MSG6062              javascript  - setSrch/clrSrch
 MS_RETND MSG9015              javascript  - setsubmit
 MS_RETND MSG9099              javascript  - ender
 MS_RETND MSG9702@             head/body/form
 MS_RETND MSG9703              Top Bars Part 1
 MS_RETND MSG9704              Top Bars Part 2
 MS_RETND MSG9705              Std Left Menu Bar part 1
 MS_RETND MSG9720              Std Left Menu end/spacer/app table start
 MS_RETND RTNHEAD              Insert header variables
 MS_RETND MSG6070S             *Application panel title
 MS_RETND RTNERRS              Use errs array to do msgs from last ops
 MS_RETND MSG6075              *instructions
 MS_RETND RTNMRTN              *Search Resident DB by Tel#/Name/Addr
 MS_RETND MSG9726k             *hidden keys
 MS_RETND MSG6095              focus();
 MS_RETND MSG9786©             standard copyright
 MS_RETND MSG9790              standard </body></html>
#RES_EDIT
 RES_EDIT MSG5551              *context/title/etc.
 RES_EDIT MSG9001              javascript  - style sheet
 RES_EDIT MSG9002              javascript  - starter
 RES_EDIT MSG9014              javascript  - change
 RES_EDIT MSG9015              javascript  - setsubmit
 RES_EDIT MSG9024              javascript  - edit
 RES_EDIT MSG9099              javascript  - ender
 RES_EDIT MSG9702@             head/body/form
 RES_EDIT MSG9703              Top Bars Part 1
 RES_EDIT MSG9704              Top Bars Part 2
 RES_EDIT MSG9705              Std Left Menu Bar part 1
 RES_EDIT MSG9720              Std Left Menu end/spacer/app table start
 RES_EDIT RTNHEAD              Insert header variables
 RES_EDIT RTNMUNI              Muni Search Pass-on variables
 RES_EDIT MSG5570k             *Application panel title
 RES_EDIT MSG5571S             *ADD Resident Title
 RES_EDIT MSG5572S             *UPD Resident Title
 RES_EDIT RTNERRS              Use errs array to do msgs from last ops
 RES_EDIT MSG5575              *Center and start table <TABLE>
 RES_EDIT RTNREDT              *The editable information fields
 RES_EDIT MSG5581              *</TABLE>
 RES_EDIT MSG9786©             standard copyright
 RES_EDIT MSG5582              *focus
 RES_EDIT MSG9790              standard </body></html>
#RES_MOVE
 RES_MOVE MSG5701              *context/title/etc.
 RES_MOVE MSG9001              javascript  - style sheet
 RES_MOVE MSG9002              javascript  - starter
 RES_MOVE MSG9014              javascript  - change
 RES_MOVE MSG9015              javascript  - setsubmit
 RES_MOVE MSG9024              javascript  - edit
 RES_MOVE MSG5708              javascript  - chk_all() / chk_non()
 RES_MOVE MSG9099              javascript  - ender
 RES_MOVE MSG9702@             head/body/form
 RES_MOVE MSG9703              Top Bars Part 1
 RES_MOVE MSG9704              Top Bars Part 2
 RES_MOVE MSG9705              Std Left Menu Bar part 1
 RES_MOVE MSG9720              Std Left Menu end/spacer/app table start
 RES_MOVE RTNHEAD              Insert header variables
 RES_MOVE RTNMUNI              Muni Search Pass-on variables
 RES_MOVE MSG5705km            *Hidden Keys
 RES_MOVE MSG5706S             *MOVE Resident Title
 RES_MOVE RTNERRS              Use errs array to do msgs from last ops
 RES_MOVE MSG5711              *Table Start - TABLE
 RES_MOVE RTN_MOV              Routine to Display MOVE options
 RES_MOVE MSG5720X             *Action Buttons / Table End   - END
 RES_MOVE MSG9786©             standard copyright
 RES_MOVE MSG5722              *focus
 RES_MOVE MSG9790              standard </body></html>
#RES_MOV2
 RES_MOV2 MSG5701              *context/title/etc.
 RES_MOV2 MSG9001              javascript  - style sheet
 RES_MOV2 MSG9002              javascript  - starter
 RES_MOV2 MSG9014              javascript  - change
 RES_MOV2 MSG9015              javascript  - setsubmit
 RES_MOV2 MSG9024              javascript  - edit
 RES_MOV2 MSG5708              javascript  - chk_all() / chk_non()
 RES_MOV2 MSG9099              javascript  - ender
 RES_MOV2 MSG9702@             head/body/form
 RES_MOV2 MSG9703              Top Bars Part 1
 RES_MOV2 MSG9704              Top Bars Part 2
 RES_MOV2 MSG9705              Std Left Menu Bar part 1
 RES_MOV2 MSG9720              Std Left Menu end/spacer/app table start
 RES_MOV2 MSG5528              Table Row for DELETED Mode
 RES_MOV2 RTNHEAD              Insert header variables
 RES_MOV2 RTNMUNI              Muni Search Pass-on variables
 RES_MOV2 MSG5705km            *Hidden Keys
 RES_MOV2 MSG5706S             *MOVE Resident Title
 RES_MOV2 RTNERRS              Use errs array to do msgs from last ops
 RES_MOV2 MSG5711              *Table Start - TABLE
 RES_MOV2 RTNMOV2              Routine to Display MOVE options
 RES_MOV2 MSG5720X             *Action Buttons / Table End   - END
 RES_MOV2 MSG5528              Table Row for DELETED Mode
 RES_MOV2 MSG9786©             standard copyright
 RES_MOV2 MSG5722              *focus
 RES_MOV2 MSG9790              standard </body></html>
#VEH_EDIT
 VEH_EDIT MSG5751              *context/title/etc.
 VEH_EDIT MSG9001              javascript  - style sheet
 VEH_EDIT MSG5802              508 styles
 VEH_EDIT MSG9002              javascript  - starter
 VEH_EDIT MSG9014              javascript  - change
 VEH_EDIT MSG9015              javascript  - setsubmit
 VEH_EDIT MSG9024              javascript  - edit
 VEH_EDIT MSG9099              javascript  - ender
 VEH_EDIT MSG5801@             head/body/form
 VEH_EDIT MSG9703              Top Bars Part 1
 VEH_EDIT MSG9704              Top Bars Part 2
 VEH_EDIT MSG9705              Std Left Menu Bar part 1
 VEH_EDIT MSG9720              Std Left Menu end/spacer/app table start
 VEH_EDIT RTNHEAD              Insert header variables
 VEH_EDIT RTNMUNI              Muni Search Pass-on variables
 VEH_EDIT MSG5770kp            *Application panel title
 VEH_EDIT MSG5771S             *ADD Vehicle Title
 VEH_EDIT MSG5772S             *UPD Vehicle Title
 VEH_EDIT RTNERRS              Use errs array to do msgs from last ops
 VEH_EDIT MSG5775              *Center and start table <TABLE>
 VEH_EDIT RTNVEDT              *The editable information fields
 VEH_EDIT MSG9786©             standard copyright
 VEH_EDIT MSG5780              *focus
 VEH_EDIT MSG9790              standard </body></html>
#PET_EDIT
 PET_EDIT MSG5851              *context/title/etc.
 PET_EDIT MSG9001              javascript  - style sheet
 PET_EDIT MSG9002              javascript  - starter
 PET_EDIT MSG9014              javascript  - change
 PET_EDIT MSG9015              javascript  - setsubmit
 PET_EDIT MSG9024              javascript  - edit
 PET_EDIT MSG9099              javascript  - ender
 PET_EDIT MSG9702@             head/body/form
 PET_EDIT MSG9703              Top Bars Part 1
 PET_EDIT MSG9704              Top Bars Part 2
 PET_EDIT MSG9705              Std Left Menu Bar part 1
 PET_EDIT MSG9720              Std Left Menu end/spacer/app table start
 PET_EDIT RTNHEAD              Insert header variables
 PET_EDIT RTNMUNI              Muni Search Pass-on variables
 PET_EDIT MSG5870kp            *Application panel title
 PET_EDIT MSG5871S             *ADD Pet Title
 PET_EDIT MSG5872S             *UPD Pet Title
 PET_EDIT RTNERRS              Use errs array to do msgs from last ops
 PET_EDIT MSG5875              *Center and start table <TABLE>
 PET_EDIT RTNPEDT              *The editable information fields
 PET_EDIT MSG9786©             standard copyright
 PET_EDIT MSG5890              *focus
 PET_EDIT MSG9790              standard </body></html>
#MT_SCR1
 MT_SCR1  MSG4201              *context/title/etc
 MT_SCR1  MSG9001              javascript  - style - 1
 MT_SCR1  MSG9002              javascript  - stype - 2 & Java Starter
 MT_SCR1  MSG9010              javascript  - isFilled
 MT_SCR1  MSG4210              javascript  - isReady()
 MT_SCR1  MSG9014              javascript  - change()
 MT_SCR1  MSG9015              javascript  - setsubmit()
 MT_SCR1  MSG9018              javascript  - isEmail()
 MT_SCR1  MSG9031              javascript  - isForm1()
 MT_SCR1  MSG9070              javascript  - setNL()
 MT_SCR1  MSG9099              javascript  - ender
 MT_SCR1  MSG9701@             head/body/form
 MT_SCR1  MSG9703              Top Bars Part 1
 MT_SCR1  MSG9704              Top Bars Part 2
 MT_SCR1  MSG9705              Std Left Menu Bar part 1
 MT_SCR1  MSG9720              Std Left Menu end/spacer/app table start
 MT_SCR1  RTNHEAD              Insert Header Variables
 MT_SCR1  MSG4220S             *Application panel title
 MT_SCR1  RTNERRS              Use errs array to do msgs from last ops
 MT_SCR1  MSG4231              *Instructions
 MT_SCR1  MSG4232E             E-Mail and PDF Submit button
 MT_SCR1  MSG9786©             standard copyright and </form>
 MT_SCR1  MSG9790              standard </body></html>
#LOGOFF
 LOGOFF   MSG1901              *context/title/etc
 LOGOFF   MSG9001              javascript  - style - 1
 LOGOFF   MSG9002              javascript  - stype - 2 & Java Starter
 LOGOFF   MSG9014              javascript  - change
 LOGOFF   MSG9099              javascript  - ender
 LOGOFF   MSG9702@             head/body/form
 LOGOFF   MSG9703              Top Bars Part 1
 LOGOFF   MSG1904              Top Bars Part 2
 LOGOFF   MSG9705              Std Left Menu Bar part 1
 LOGOFF   MSG9720              Std Left Menu end/spacer/app table start
 LOGOFF   MSG1920              *Application panel title
 LOGOFF   RTNERRS              Use errs array to do msgs from last ops
 LOGOFF   MSG1931@             *Instructions
 LOGOFF   MSG1940@             *Sign on Again
 LOGOFF   MSG9786©             standard copyright and </form>
 LOGOFF   MSG9790              standard </body></html>
#LPRSCAN
 LPRSCAN  MSG6501              <!DOCTYPE xhtml transitional>
 LPRSCAN  MSG6504              <link rel="StyleSheets"> - <style>
 LPRSCAN  MSG6505                CSS Overrides
 LPRSCAN  MSG6506                CSS Overrides
 LPRSCAN  MSG6555                CSS Overrides
 LPRSCAN  MSG6509              </style>
 LPRSCAN  MSG6510              <script>
 LPRSCAN  MSG6511                generic JS functions
 LPRSCAN  MSG6512                generic JS functions
 LPRSCAN  MSG6513                function DsplyImg(theImage,theType)
 LPRSCAN  MSG6519              </script>
 LPRSCAN  MSG9702@             </head>/<body>/<form form1>
 LPRSCAN  RTNHEAD              <input type=hidden>
 LPRSCAN  MSG6521              <div #container>
 LPRSCAN  MSG6503               <div #banner> <table #tophead>
 LPRSCAN  MSG6523               <div .main>
 LPRSCAN  MSG6570                <h3>section title</h3>
 LPRSCAN  MSG6531                <div #ScrnOpts><ul><li><a>
 LPRSCAN  RTNLPRS                <table #LPRscan>
 LPRSCAN  MSG6524               </div .main>
 LPRSCAN  MSG6546©              <div #Copyright .footer>
 LPRSCAN  MSG6522              </div #container>
 LPRSCAN  MSG6549              </form name=form1>
 LPRSCAN  MSG9790              </body></html>
#LPRPLATE
 LPRPLATE MSG6501              <!DOCTYPE xhtml transitional>
 LPRPLATE MSG6504              <link rel="StyleSheets"> - <style>
 LPRPLATE MSG6505                CSS Overrides
 LPRPLATE MSG6506                CSS Overrides
 LPRPLATE MSG6605                CSS Overrides
 LPRPLATE MSG6509              </style>
 LPRPLATE MSG6510              <script>
 LPRPLATE MSG6511                generic JS functions
 LPRPLATE MSG6519              </script>
 LPRPLATE MSG9702@             </head>/<body>/<form form1>
 LPRPLATE RTNHEAD              <input type=hidden>
 LPRPLATE MSG6521              <div #container>
 LPRPLATE MSG6503               <div #banner> <table #tophead>
 LPRPLATE MSG6523               <div .main>
 LPRPLATE MSG6620                <h3>section title</h3>
 LPRPLATE MSG6531                <div #ScrnOpts><ul><li><a>
 LPRPLATE RTNLPRP                <table #LPRplate>
 LPRPLATE MSG6524               </div .main>
 LPRPLATE MSG6546©              <div #Copyright .footer>
 LPRPLATE MSG6522              </div #container>
 LPRPLATE MSG6549              </form name=form1>
 LPRPLATE MSG9790              </body></html>
#LPRCITE
 LPRCITE  MSG6501              <!DOCTYPE xhtml transitional>
 LPRCITE  MSG6504              <link rel="StyleSheets"> - <style>
 LPRCITE  MSG6505                CSS Overrides
 LPRCITE  MSG6506                CSS Overrides
 LPRCITE  MSG6655                CSS Overrides
 LPRCITE  MSG6509              </style>
 LPRCITE  MSG6510              <script>
 LPRCITE  MSG6511                generic JS functions
 LPRCITE  MSG6513                function DsplyImg(theImage)
 LPRCITE  MSG6519              </script>
 LPRCITE  MSG9702@             </head>/<body>/<form form1>
 LPRCITE  RTNHEAD              <input type=hidden>
 LPRCITE  MSG6521              <div #container>
 LPRCITE  MSG6503               <div #banner> <table #tophead>
 LPRCITE  MSG6523               <div .main>
 LPRCITE  MSG6670                <h3>section title</h3>
 LPRCITE  MSG6531                <div #ScrnOpts><ul><li><a>
 LPRCITE  RTNLPRC                <table #LPRcite>
 LPRCITE  MSG6524               </div .main>
 LPRCITE  MSG6546©              <div #Copyright .footer>
 LPRCITE  MSG6522              </div #container>
 LPRCITE  MSG6549              </form name=form1>
 LPRCITE  MSG9790              </body></html>
#GOTO1
 GOTO1    RTNGOT1       *Write the ONLOAD Page for GOTO Page
#GOTO2
 GOTO2    RTNGOT2       *Write the ONLOAD Page for GOTO Page
#END-TBL
**    month    CTDATA
JanFebMarAprMayJunJulAugSepOctNovDec
**    salut    CTDATA
    MR. MRS.MS. DR.
** CTDATA HTML_GOTO1==================================================
Content-type: text/html
Cache-Control: no-store
Pragma: no-cache

<HTML><HEAD>
<TITLE>In-Transit</TITLE>

<SCRIPT LANGUAGE="JavaScript">
function autosubmit() {
document.form1.submit();}
</SCRIPT>
</head><body onLoad="javascript:autosubmit()"><form name="form1"
action="https://www.credentialsops.com/CGI-BIN/gacgiord(TESTPGM).pgm"
 method="post">

<input type="hidden" name="FICE" value="@@@@@@">
<input type="hidden" name="FORMID" value="PST">
<input type="hidden" name="APPLID" value="{AP{
<input type="hidden" name="SK" value="(((SK)))____">
<input type="hidden" name="JSCRIPTOK" value="Y">
<input type="hidden" name="ADMUSR" value="(ADMUSR)">
<input type="hidden" name="PP3USER" value="(PP3USR)">
<input type="hidden" name="USRTYPE" value="(USRTYP)">
<input type="hidden" name="KIOSK" value="(KIOSK)">

</form></body></html>
** CTDATA HTML_GOTO2==================================================
Content-type: text/html
Cache-Control: no-store
Pragma: no-cache

<HTML><HEAD>
<TITLE>In-Transit</TITLE>

<SCRIPT LANGUAGE="JavaScript">
function autosubmit() {
document.form1.submit();}
</SCRIPT>
</head><body onLoad="javascript:autosubmit()"><form name="form1"
action="https://www.credentialsops.com/CGI-BIN/relogcgi.pgm" method="post">

<input type="hidden" name="FICE" value="@@@@@@">
<input type="hidden" name="FORMID" value="MLG">
<input type="hidden" name="SYS" value="MS">
<input type="hidden" name="SK" value="(((SK)))____">
<input type="hidden" name="USERID" value="++USRP++
<input type="hidden" name="PASSWD" value="::::::::
<input type="hidden" name="JSCRIPTOK" value="Y">
<input type="hidden" name="ADMUSR" value="(ADMUSR)
<input type="hidden" name="OVRRATE" value="(OVRRAT)
<input type="hidden" name="POSTDATE" value="(PSTDAT)

</form></body></html>
** CTDATA =========== HTML_HEAD variables for all responses============
<input type="hidden" id="FICE" name="FICE" value="@@@@@@">
<input type="hidden" id="APPL" name="APPL" value="{AP{
<input type="hidden" name="FORMID" value="{{{">
<input type="hidden" id="ACTION" name="ACTION" value="}}}">
<input type="hidden" id="ORDERNO" name="ORDERNO" value="(ORDERNO)">
<input type="hidden" name="ORDERBY" value="(ORDERBY)
<input type="hidden" id="SK" name="SK" value="(((SK)))____">
<input type="hidden" id="USERID" name="USERID" value="++++++++__">
<input type="hidden" name="TIME" value="(TIME)">
<input type="hidden" name="JSCRIPTOK" value="N">
<input type="hidden" name="VIEWONLY" value="((VIEW))
<input type="hidden" name="RES2MODE" value="(RES2MODE)
<input type="hidden" name="SORTFLD" value="">
((STOP))
** CTDATA =========== HTML_HDRS variables for all responses ===========
<input type="hidden" name="FORMID" value="{{{">
<input type="hidden" name="ACTION" value="}}}">
<input type="hidden" name="SK" value="(((SK)))____">
<input type="hidden" name="FICE" value="@@@@@@">
<input type="hidden" name="TIME" value="(TIME)">
<input type="hidden" name="USERID" value="++++++++__">
((STOP))
** CTDATA =========== HTML_ORDSRCH == GA Search Parameters =======
<input type="hidden" id="SRCHIND" name="SRCHIND" value="([SRCHIND])
<input type="hidden" name="SRCHTYPE" value="(SRCHTYPE
<style type="text/css">
#FilterOptions div {font-size:12px;}
#OthrSrch,#DateSrch {padding-bottom:10em;}
div.SearchInfo { float:left;margin:0;width:550px;position:relative;}
.ui-tabs {padding:0;margin:0;border:none;}
.ui-tabs .ui-tabs-panel {border-width:1px;border-radius:
4px;border-color:#008080;position:relative;}
.ui-tabs .ui-tabs-nav li {font-size:12px;border-color:
#008080;border-width:1px;background:#008080;}
.ui-tabs .ui-tabs-nav li a {color:#FFF;}
.ui-tabs .ui-tabs-nav li.ui-tabs-active {background:#FFF;}
.ui-tabs .ui-tabs-nav li.ui-tabs-active a {color:#008080;}
ul.ui-widget-header {background:none;border:none;}
.ui-tabs.ui-widget.ui-widget-content{border:0}
</style>
<div id="Search">
<div id="FilterOptions">
<ul>
<li><a id="1" href="#OthrSrch" data-toggle="tab">
Basic Search</a></li>
<li><a id="2" href="#DateSrch" data-toggle="tab">
Search by Completed Date</a></li>
</ul>
<div id="OthrSrch">
<div class="SearchInfo" style="width:100%;">
<table border=0 cellpadding=3 cellspacing=5>
<tr><td align=right style="white-space: nowrap"><b>Order #:</b>&nbsp;</td>
<td align=left>
<input type="text" name="SRCH_ORD" size=10 maxlength=9 value="([SRCH_ORD])
</td><td align=right style="white-space: nowrap"><b>Last Name:</b>&nbsp;</td>
<td align=left>
<input type="text" name="SRCH_NAM" size=15 maxlength=20 value="([SRCH_NAM])
</td><td align=right><b>SSN:</b>&nbsp;</td><td align=left>
<input type="text" name="SRCH_SSN" size=10 maxlength=9 value="([SRCH_SSN])
</td></tr>
<tr><td align=right><b>SID:</b>&nbsp;</td><td align=right>
<input type="text" name="SRCH_SID" size=10 maxlength=10 value="([SRCH_SID])
</td><td colspan=4>&nbsp;</td></tr>
<tr><td colspan=12 align=center>
  <div class="SearchButton">
    <button type="submit" class="SearchButtons"
    onclick="change(this.form.ACTION, 'SRH');">Search</button>
    <button type="button" class="SearchButtons"
    onclick="clrForm(form1);">Clear All</button>
   </div>
  </td></tr>
</table>
   </div>
  </div>  <!-- end Accordion div 2 -->
<div id="DateSrch">
   <div class="SearchInfo">
   <table id="DateTbl" border=0 cellpadding=3 cellspacing=5>
   <tr>
    <td>
(DOSLCT)YR4
(DOSLCT)MN2
(DOSLCT)DY2
    </td>
    <td>
     <label>
      <input type="radio" id="YM" name="SRCHDATE" title="Month Day Only"
       onclick="DisableElem('DAY2');" value="M"([SRCHDATERADIO])
      Year/Month
     </label>
    </td>
    <td>
     <label>
      <input type="radio" id="YMD" name="SRCHDATE" title="Year Month Day"
       onclick="EnableElem('DAY2');" value="D"([SRCHDATERADIO])
      Full Date
     </label>
    </td>
   </tr>
   </tr><td colspan=6 align=center>
   <div class="SearchButton">
    <button type="submit" class="SearchButtons"
    onclick="change(this.form.ACTION, 'SRD');">Search</button>
   </div>
   </td></tr>
   </table>
   </div>
  </div>  <!-- end Accordion div 2 -->
</div>
<br/>
<script type="text/javascript" language="javascript">

var ActiveTab = 0;
if (GetValue('SRCHIND') == "N")
  ActiveTab = 0;
else if (GetValue('SRCHIND') == "D")
  ActiveTab = 1;

 $("#FilterOptions").tabs( { active: ActiveTab });

$(document).ready(function() {
 $("#NameErr").dialog({ autoOpen:false, modal:true,
 position: { my:"left+250 top", at:"left top", of:"#FilterOptions" },
 buttons: {
     Ok: function() { $(this).dialog("close"); setFocus('NL'); } }
                       });

 if (isChecked('YM'))
   DisableElem('DAY2');
 else
   EnableElem('DAY2');

});

function SetSearch(SearchValue) {
   SetValue('SRCHIND',SearchValue);
   subaction(GetValue('FORMID'));
}
</script>
((STOP))
** CTDATA =========== HTML_OTCP  ==== OTC Pass on Hidden==========
<input type="hidden" name="PRODUCT" value="(PROD)
<input type="hidden" name="NUMPMITS" value="(NUMPMIT)
<input type="hidden" name="DELATN" value="(DELATN)
<input type="hidden" name="DELAD1" value="(DELAD1)
<input type="hidden" name="DELAD2" value="(DELAD2)
<input type="hidden" name="DELAD3" value="(DELAD3)
<input type="hidden" name="DELCITY" value="(DELCTY)
<input type="hidden" name="DELSTATE" value="(DELSTA)
<input type="hidden" name="DELZIP" value="(DELZIP)
<input type="hidden" name="DELTEL" value="(DELTEL)
<input type="hidden" name="EMAIL"
   value="(((EM:))
<input type="hidden" name="SHIP" value="(SHIP)
<input type="hidden" name="AMTSHIP" value="(AMTSHIP)
<input type="hidden" name="RUSH" value="(RUSH)
<input type="hidden" name="COMNT" value="
(COMMENT)
((STOP))
** CTDATA =========== HTML_NUMP  ==== OTC Num Permit Options======
((CLLC))5    INTRL
((CLLC))10   INTRL
((CLLC))15   INTRL
((CLLC))20   INTRL
25
30
((CLLC))35   INTRL
((CLLC))40   INTRL
50
((CLLC))60   INTRL
75
100
150
200
250
300
350
400
425
450
500
550
600
650
700
800
900
1000
((STOP))
** CTDATA =========== HTML_3RD_E ===Edit Value for 3rd Party Maintenance====
((ADDN))<tr><td class="ttl">Bill User:
((ADDN))    <span style="color:red">*</span></td>
((ADDN))<td><input type=text name="BILLUSER" size=10 maxlength=10
((ADDN))value="(BILLUSER)
((ADDN))<div>Bill User is a 10 character (max) unique user id for
((ADDN))this entry</div>
((ADDN))</td></tr>

<tr><td class="ttl">Contact Name:&nbsp;</td>
<td><input type=text name="CNTACT" size=40 maxlength=35
value="(CNTACT)
</td></tr>

<tr><td class="ttl">Company Name:<span style="color:red">*</span></td>
<td><input type=text name="CMPANY" size=40 maxlength=35
value="(CMPANY)
<div>This will display in the dropdown list when marking an item
3rd Party Receivable</div>
</td></tr>

<tr><td class="ttl">Address Line:&nbsp;</td>
<td><input type=text name="A1" size=40 maxlength=35
value="(((HA1))
</td></tr>

<tr><td class="ttl">City:&nbsp;</td>
<td><input type=text name="CITY" size=25 maxlength=25
value="(((HCI))
<span style="font-weight:bold">&nbsp;&nbsp;&nbsp;State:&nbsp;</span>
<input type=text name="STATE" size=3 maxlength=3
value="(((HST))
</td></tr>

<tr><td class="ttl">ZIP Code:&nbsp;</td>
<td><input type=text name="ZIP" size=15 maxlength=10
value="(((HZC))
</td></tr>

<tr><td class="ttl">Telephone #:&nbsp;</td>
<td><input type=text name="TEL" size=20 maxlength=25
value="((HTL))
</td></tr>

<tr><td class="ttl">E-Mail Address:&nbsp;</td>
<td><input type=text name="EMAIL" size=40 maxlength=50
value="(((EM:))
</td></tr>
((STOP))
** CTDATA =========== HTML_SRCHN GA Search Parameters ==============
<input type="hidden" id="SRCHTYPE" name="SRCHTYPE" value="(SRCHTYPE

<table border=0 cellpadding=3 cellspacing=5 class="center">

((PP_AP)(((MSG))2135
((PP_AP)(((MSG))2136x

((MS_AP)(((MSG))5933s    Y
((MS_AP)(((MSG))5934s    Y

((DP_AP)(((MSG))3133s    Y
((DP_AP)(((MSG))3134s

((CE_AP)(((MSG))5133s
((CE_AP)(((MSG))5134s

(!PP)<tr><td colspan=6 align=center>
(!PP)<font size=+1><input type="submit" value="Find/Search"
(!PP)onClick="change(this.form.ACTION, 'SRH');"></font>
(!PP)<font size=+1><input type="button" value="Clear All"
(!PP)onClick="javascript:clrForm(form1);">
(!PP)</td></tr>
</table>
<hr size=3 noshade><br>
((STOP))
** CTDATA =========== HTML_SRCH GA Search Parameters ==============
<input type="hidden" name="SRCHTYPE" value="(SRCHTYPE

<table border=0 cellpadding=3 cellspacing=5>

((PP_AP)(((MSG))2133s    Y
((PP_AP)(((MSG))2137s    Y
((PP_AP)(((MSG))2138s    Y

((MS_AP)(((MSG))5933s    Y
((MS_AP)(((MSG))5934s    Y

((DP_AP)(((MSG))3133s
((DP_AP)(((MSG))3134s

((CE_AP)(((MSG))5133s
((CE_AP)(((MSG))5134s

<tr><td colspan=6 align=center>
<font size=+1><input type="submit" value="Find/Search"
onClick="change(this.form.ACTION, 'SRH');"></font>
<font size=+1><input type="button" value="Clear All"
onClick="javascript:clrForm(form1);">
</td></tr>
</table>
<hr size=3 noshade><br>
((STOP))
** CTDATA =========== HTML_SRCH2 GA Search Parameters ==============
<input type="hidden" name="SRCHTYPE" value="(SRCHTYPE

<table border=0 cellpadding=3 cellspacing=5>
<tr>
(((MSG))2465s
((PP_AP)<td align=right><label for="SRCH_DTA5"><b>Plate #:</b></label>&nbsp;
((PP_AP)</td><td align=left><input type="text" name="SRCH_DTA5" id="SRCH_DTA5"
((PP_AP)size=10 maxlength=10 value="(SRCH_DTA5
((PP_AP)</td>
((MS_AP)<td align=right><b>Plate #:</b>&nbsp;</td>
((MS_AP)<td align=left><input type="text" name="SRCH_DTA5" size=10
((MS_AP)maxlength=10 value="(SRCH_DTA5
((MS_AP)</td>
</tr>
<tr>
(((SID))(((MSG))2467s    Y
</tr>
((MT_AP)<tr><td align=center colspan=6>
((MT_AP) <input type="radio" name="SRHPD" value="N" (SRHPD)>
((MT_AP) <b>&nbsp;Items Waiting Payment Only</b>
((MT_AP) &nbsp;&nbsp;&nbsp;
((MT_AP) <input type="radio" name="SRHPD" value="Y" (SRHPD)>
((MT_AP) <b>&nbsp;Search All Items</b>
((MT_AP)</td></tr>
((GT_AP)<tr><td align=center colspan=6>
((GT_AP) <input type="radio" name="SRHPD" value="N" (SRHPD)>
((GT_AP) <b>&nbsp;Items Waiting Payment Only</b>
((GT_AP) &nbsp;&nbsp;&nbsp;
((GT_AP) <input type="radio" name="SRHPD" value="Y" (SRHPD)>
((GT_AP) <b>&nbsp;Search All Items</b>
((GT_AP)</td></tr>
<tr><td colspan=6 align=center>
<font size=+1><input type="submit" value="Find/Search"
onClick="javascript:change(this.form.ACTION, 'SRH');">
<input type="button" value="Clear All"
onClick="javascript:clrForm(form1);">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<input type="submit" value="Show All Unpaid" aria-label="last 15 days"
onClick="javascript:change(document.form1.ACTION,'UNP');">
</font>
&nbsp;&nbsp;&nbsp;Last
<SELECT name="LASTDAYS" aria-label="Last Days" size=1>
(LSTDAYS
</SELECT>&nbsp;Days
</td></tr>

<tr><td colspan=6 align=center><hr size=3 noshade></td></tr>

<tr><td colspan=6 align=center>
<SELECT name="MNTH" aria-label="Search date Month" size=1>
(SLTMNTH
</SELECT>&nbsp;&nbsp;&nbsp;
<SELECT name="DAYS" aria-label="Search date Day" size=1>
(SLTDAYS
</SELECT>&nbsp;&nbsp;&nbsp;
<SELECT name="YEAR" aria-label="Search date Year" size=1>
(SLTYEAR
</SELECT>&nbsp;&nbsp;&nbsp;
<font size=+1><input type="submit" value="Paid List"
onClick="change(this.form.ACTION, 'PAL');"></font>
</td></tr>

</table>
<hr size=3 noshade><br>
((STOP))
** CTDATA =========== HTML_DELY  ==== Shipping Address   =========
<table border=0 cellpadding=5 cellspacing=1 width=650>

<tr><td align=right width=125><label for="DELATN">
(((MSG))2553     Y
 </label></td><td class=dta width=180>
 <INPUT name="DELATN" id="DELATN" maxlength=&DNL size=35 type="text"
 value="(DELATN)
</td></tr>

<tr><td align=right width=125><label for="DELAD1">
(((MSG))2554     Y
 </label></td><td class=dta>
 <INPUT name="DELAD1" id="DELAD1" maxlength=&D1L size=35 type="text"
 value="(DELAD1)
</td></tr>

<tr><td align=right width=125><label for="DELAD2">
(((MSG))2555     Y
</label></td><td class=dta>
 <INPUT name="DELAD2" id="DELAD2" maxlength=&D2L size=35 type="text"
 value="(DELAD2)
</td></tr>

<tr><td align=right width=125><label for="DELAD3">
(((MSG))2556     Y
</label></td><td class=dta>
 <INPUT name="DELAD3" id="DELAD3" maxlength=&D3L size=35 type="text"
 value="(DELAD3)
</td></tr>

<tr><td align=right width=125><label for="DELCITY">
(((MSG))2558     Y
 </label></td><td class=dta>
 <INPUT name="DELCITY" id="DELCITY" maxlength=&DCL size=15
 type="text" value="(DELCTY)

 &nbsp;&nbsp;&nbsp;<label for="DELSTATE">
(((MSG))2559     Y
 </label><INPUT name="DELSTATE" id="DELSTATE" maxlength=3 size=3
 type="text" value="(DELSTA)
</td></tr>

<tr><td align=right width=125><label for="DELZIP">
(((MSG))2561     Y
</label></td><td class=dta>
 <INPUT name="DELZIP" id="DELZIP" maxlength=10 size=10
 type="text" value="(DELZIP)
(((MSG))2562     Y
</td></tr>

<tr><td align=right width=125><label for="DELTEL">
(((MSG))2557     Y
 </label></td><td class=dta>
 <INPUT name="DELTEL" id="DELTEL" maxlength=20 size=20
 type="text" value="(DELTEL)
&nbsp;&nbsp;
</td></tr>

<tr><td align=right width=125><label for="EMAIL">
(((MSG))2563     Y
</label></td><td class=dta><input type="text" name="EMAIL" id="EMAIL"
maxlength=50 size=35
value="(((EM:))
</td></tr>

<tr><td align=right width=125>&nbsp;</td>
<td class=dta><input type="checkbox" name="UPDINFO" id="UPDINFO" value="Y">
<label for="UPDINFO"><b>Use this address to update the record</b></label>
</td></tr>
</table>
<!--  End of dely tbl //-->
((STOP))

** CTDATA =========== HTML_DELYS  ==== Shipping Address Summary ===
<tr><td align=right width=220>
(((MSG))2589     Y
 </td><td class=dta><b>
(DELATNS)
</b></td></tr>

<tr><td align=right width=220>
(((MSG))2590     Y
 </td><td class=dta><b>
(DELAD1S)
</b></td></tr>

<tr><td align=right width=220>
(((MSG))2591     Y
</td><td class=dta><b>
(DELAD2S)
</b></td></tr>

<tr><td align=right width=220>
(((MSG))2592     Y
</td><td class=dta><b>
(DELAD3S)
</b></td></tr>

<tr><td align=right width=220>
(((MSG))2593     Y
 </td><td class=dta><b>
(DELCTYS)

 </b>&nbsp;&nbsp;&nbsp;
(((MSG))2594     Y
<b> (DELSTAS)
</b></td></tr>

<tr><td align=right width=220>
(((MSG))2595     Y
</td><td class=dta><b>
 (DELZIPS)
</b></td></tr>

<tr><td align=right width=220>
(((MSG))2596     Y
 </td><td class=dta><b>
 (DELTELS)
</b></td></tr>

<tr><td align=right width=220>
(((MSG))2597     Y
 </td><td class=dta><b>
((EMAILS)
</b></td></tr>

((STOP))
** CTDATA =========== HTML_RUSH  ==== Rush Service Options========
<table border=0 cellpadding=5 width=600>
<tr valign=top><td align=right width=150>
  <input type="radio" name="RUSH" id="STD" value="N" (CHKRSH)>
  </td><td align=left width=450><label for="STD"><b>
  Standard Service</b> (Shipped within <b>five
  business days</b>)</label>
</td></tr>
<tr valign=top><td align=right width=150>
  <input type="radio" name="RUSH" id="RUSH" value="Y" (CHKRSH)>
  </td><td align=left width=450><label for="RUSH"><b>
  Rush Service - $(RUSHFEE)
  Additional Handling Fee</b><br>
  (Shipped the <b>next business day</b>, 250 permit min,
  500 permit max, limit 1 rush per day)</label>
</td></tr>
</table>
</fieldset>
((STOP))
** CTDATA =========== HTML_RUSHS  ==== Rush Service Summary ===
<tr><td align=right width=220>
Processing Option:
 </td><td class=dta><b>
(RUSHSRV)
</b></td></tr>

((STOP))
** CTDATA =========== HTML_SHIP  ==== Shipping Information========
<table border=0 cellpadding=5 width=600>
<tr valign=top><td align=right width=150>
  <input type="radio" name="SHIP" id="SHIP1" value="O" (CHKSH)>
  </td><td align=left width=450><label for="SHIP1"><b>
  Priority Overnight</b> (10 am Delivery)</label>
</td></tr>
<tr valign=top><td align=right width=150>
  <input type="radio" name="SHIP" id="SHIP2" value="S" (CHKSH)>
  </td><td align=left width=450><label for="SHIP2"><b>
  Standard Overnight </b></label>
</td></tr>
<tr valign=top><td align=right width=150>
  <input type="radio" name="SHIP" id="SHIP3" value="2" (CHKSH)>
  </td><td align=left width=450><label for="SHIP3"><b>
  Two Day </b></label>
</td></tr>
<tr valign=top><td align=right width=150>
  <input type="radio" name="SHIP" id="SHIP4" value="X" (CHKSH)>
  </td><td align=left width=450><label for="SHIP4"><b>
  Express Saver</b> (Usually 3 Business Days)</label>
</td></tr>
<tr valign=top><td align=right width=150>
  <input type="radio" name="SHIP" id="SHIP5" value="G" (CHKSH)>
  </td><td align=left width=450><label for="SHIP5"><b>
  Ground</b> (Usually 4 to 7 Business Days)</label>
</td></tr>
((CRED))<tr valign=top><td align=right width=150>
((CRED))  <input type="radio" name="SHIP" id="SHIP6" value="U" (CHKSH)>
((CRED))  </td><td align=left width=450><label for="SHIP6"><b>
((CRED))  First Class Mail</b> (Credentials Internal Only)</label>
((CRED))</td></tr>
</table>
</fieldset>
((STOP))
** CTDATA =========== HTML_SHIPS  ==== Shipping Address Summary ===
<tr><td align=right width=220>
FedEx Shipping Method:
 </td><td class=dta><b>
(SHIPMTH)
</b></td></tr>

((STOP))
** CTDATA =========== HTML_DP_1 ===Details for Diploma Orders=========
<center><b>Detail Information for Order#:&nbsp;(ORDERNO)</b><br>
<input type="button" value="Back to List"
  onClick="setsubmit(this.form.ACTION, 'BCK')"></center>
<b>Diploma Student Information:</b>
<table border=2 cellspacing=0 cellpadding=0>

<tr valign="middle"><td width=140 align=right>
<font color="blue"><b>Social Sec#:&nbsp;</b></font></td>
</td><td width=450><b>
((DSP_SSN
</b>
(SSNBTN)<input type=hidden name="VIEWSSN" value="N">
(SSNBTN)&nbsp;&nbsp;&nbsp;&nbsp<input type="button" value="View SSN"
(SSNBTN)onClick="javascript:setsubmit(document.form1.VIEWSSN,'Y');">
<input type="hidden" id="SRCHIND" name="SRCHIND" value="([SRCHIND])
</td></tr>

((CONDS)<tr valign=top><td width=140 align=right>
((CONDS)<font color="blue"><b>(SIDT)                   :&nbsp;</b>
((CONDS)</font></td><td width=450><b>
((CONDS)((DSP_SID
((CONDS)</b></td></tr>

((CONDD)<tr valign=top><td width=140 align=right>
((CONDD)<font color="blue"><b>Date of Birth:&nbsp;</b>
((CONDD)</font></td><td width=450><b>
((CONDD)((DB10))
((CONDD)</b></td></tr>

<tr valign=middle><td width=140 valign=top align=right>
<font color="blue"><b>Name/Address:&nbsp;</b></font></td>
<td width=450><b>
&nbsp;(STU_NAM:
(STU_AD1:
(STU_AD2:
(STU_AD3:
(STU_AD4:
</b></td></tr>

<tr valign=middle><td width=140 align=right>
<font color="blue"><b>Student Tel#:&nbsp;</b></font></td>
<td width=450><b>
&nbsp;(STU_TEL
</b></td></tr>

<tr valign=middle><td width=140 align=right>
<font color="blue"><b>E-mail:&nbsp;</b></font></td>
<td width=450><b>
&nbsp;((EMAILS)
</b></td></tr>
</table><br>

(DEGINF)<table width=600 border=0><tr><td align=left>
(DEGINF) <p><b>Additional Information:</b>
(DEGINF)</td></tr></table>

<table border=2 cellspacing=0 cellpadding=0>
(DEGINF)<tr valign=top><td width=140 align=right>
(DEGINF) <font color="blue"><b>(TTLDEG)
(DEGINF) </b></font></td>
(DEGINF) <td width=450><b>&nbsp;(DATA_0)
(DEGINF)</b></td></tr>

(DEGINF)<tr valign=top><td width=140 align=right>
(DEGINF) <font color="blue"><b>(TTLMJR)
(DEGINF) </b></font></td>
(DEGINF) <td width=450><b>&nbsp;(DATA_2)
(DEGINF)</b></td></tr>

(DEGYER)<tr valign=top><td width=140 align=right>
(DEGYER) <font color="blue"><b>(TTLYER)
(DEGYER) </b></font></td>
(DEGYER) <td width=450><b>&nbsp;(DATA_4)
(DEGYER)</b></td></tr>

(DEGGMY)<tr valign=top><td width=140 align=right>
(DEGGMY) <font color="blue"><b>(TTLGMY)
(DEGGMY) </b></font></td>
(DEGGMY) <td width=450><b>&nbsp;(DATA_4)
(DEGGMY)</b></td></tr>

(DEGNAM)<tr valign=top><td width=140 align=right>
(DEGNAM) <font color="blue"><b>(TTLNAM)
(DEGNAM) </b></font></td>
(DEGNAM) <td width=450><b>&nbsp;(DATA_7)
(DEGNAM)</b></td></tr>

(DEGDT5)<tr valign=top><td width=140 align=right>
(DEGDT5) <font color="blue"><b>(TITL_5)
(DEGDT5) </b></font></td>
(DEGDT5) <td width=450><b>&nbsp;(DATA_5)
(DEGDT5)</b></td></tr>

(DEGDTC)<tr valign=top><td width=140 align=right>
(DEGDTC) <font color="blue"><b>(TITL_C)
(DEGDTC) </b></font></td>
(DEGDTC) <td width=450><b>&nbsp;(DATA_C)
(DEGDTC)</b></td></tr>

(DPSPCL)<tr valign=top><td width=140 align=right>
(DPSPCL) <font color="blue"><b>Special Instructions:&nbsp;</b></font></td>
(DPSPCL) <td width=450><b>&nbsp;((CER_PNAM
(DPSPCL)</b></td></tr>

(DPAPP8)<tr valign=top><td width=140 align=right>
(DPAPP8) <font color="blue"><b>(TITL_8)
(DPAPP8) </b></font></td>
(DPAPP8) <td width=450><b>&nbsp;((CER_PNAM
(DPAPP8)</b></td></tr>

(DPAPP9)<tr valign=top><td width=140 align=right>
(DPAPP9) <font color="blue"><b>(TITL_9)
(DPAPP9) </b></font></td>
(DPAPP9) <td width=450><b>&nbsp;((CER_PLOC
(DPAPP9)</b></td></tr>
</table></br>

((STOP))
** CTDATA =========== HTML_DP_2==Actions/Buttons for Diploma ==========
<p><table border=0 cellspacing=0 cellpadding=0>
<tr><td><b>Diploma Order Status:</b></td></tr>

<tr valign=top><td>

<table border=2 cellspacing=0 cellpadding=2>
<tr><td align=left valign=center width=180>
<input type="checkbox" name="AUTHRZ" value="Y" (AUTHRZ>
<font color="blue"><b>Authorized</b></font></td></tr>

<tr><td align=left valign=center width=180>
<input type="checkbox" name="APPRVD" value="Y" (APPRVD>
<font color="blue"><b>Approved</b></font></td></tr>

((ALWCOD<tr><td align=left valign=center width=180>
((ALWCOD<input type="checkbox" name="PAIDCD" value="Y" (PAIDCD>
((ALWCOD<font color="blue"><b>Payment Received</b></font></td></tr>
</table></td></tr></table><p>

<font size=+1><input type="button" value="Process Order"
onClick="setsubmit(this.form.ACTION, 'UPD')"></font>&nbsp;

&nbsp;<font size=+1><input type="button" value="Cancel Order"
onClick="if(confirm('Are you sure?')){setsubmit(this.form.ACTION, 'CXL');}">
</font>

(GAAUTH)&nbsp;<font size=+1><input type="button" value="Resend Auth"
(GAAUTH)onClick="setsubmit(this.form.ACTION, 'RAU')"></font>

&nbsp;<font size=+1><input type="button" value="Update Info"
onClick="updateInfo()"></font>

&nbsp;<font size=+1><input type="button" value="Back to List"
onClick="setsubmit(this.form.ACTION, 'BCK')"></font>
<hr size=3 noshade><p>

((STOP))
** CTDATA =========== HTML_DP_4==Details for Diploma Orders(DELIVERY)==
<p>

<b>Diploma Delivery Information:</b>
<table border=2 cellspacing=0 cellpadding=0>
<tr valign=top><td width=140 align=right>
<font color="blue"><b>Desired Service:&nbsp;</b></font></td>
<td width=450><b>
((GAOPT)GP
</b></td></tr>

(NOSHIP)<tr valign=top><td width=140 align=right>
(NOSHIP)<font color="blue"><b>Shipping Method:&nbsp;</b></font></td>
(NOSHIP)<td width=450><b>
(NOSHIP)((GAOPT)GS
(NOSHIP)</b></td></tr>

<tr valign=top><td width=140 align=right>
<font color="blue"><b>Mail To:&nbsp;</b></font></td>
<td width=450><b>
(DEL_ATN:
(DEL_AD1:
(DEL_AD2:
(DEL_AD3:
(DEL_AD4:
(DEL_AD5:
(DEL_TEL
</b></td></tr>

<tr valign="top"><td width=140 align=right>
<font color="blue"><b>Total Amount:&nbsp;</b></font></td>
<td width=450><b>
</b><b>
&nbsp;((TAMT))
</b></td></tr>

(TRKSET)<tr valign="top"><td width=140 align=right>
(TRKSET)<font color="blue"><b>Tracking#:&nbsp;</b></font></td>
(TRKSET)<td width=450><b>&nbsp;
(TRKSET)<input type="button" value="Set Tracking#"
(TRKSET) onClick="javascript:chgTrackNum();">
(TRKSET)</b></td></tr>

(TRKUPD)<tr valign="top"><td width=140 align=right>
(TRKUPD)<font color="blue"><b>Tracking#:&nbsp;</b></font></td>
(TRKUPD)<td width=450><b>
(TRKUPD)&nbsp;((TTRK))&nbsp;
(TRKUPD)<input type="button" value="Update"
(TRKUPD) onClick="javascript:chgTrackNum();">
(TRKUPD)</b></td></tr>

</table>
((STOP))
** CTDATA =========== HTML_CE_1 ===Details for Certification Orders===
<center><b>Detail Information for Order#:&nbsp;(ORDERNO)</b><br>
<input type="button" value="Back to List"
  onClick="setsubmit(this.form.ACTION, 'BCK')"></center>
<table width=620 border=0><tr><td align=left>
<b>Student Information:</b>
</td><td align=right><b>Matched File?</b></td></tr></table>

<table border=2 cellspacing=0 cellpadding=0>

<tr valign=top><td width=140 align=right>
<font color="blue"><b>Social Sec#:&nbsp;</b></font></td>
</td><td width=400><b>
((DSP_SSN
</b></td><td width=50 align=center><b>&nbsp;
((MTCH_SSN
</b></td></tr>

((CONDS)<tr valign=top><td width=140 align=right>
((CONDS)<font color="blue"><b>(SIDT)                   :&nbsp;</b>
((CONDS)</font></td><td width=400><b>
((CONDS)((DSP_SID
((CONDS)</b></td><td width=50 align=center><b>&nbsp;
((CONDS)((MTCH_SID
((CONDS)</b></td></tr>

<tr valign=middle><td width=140 valign=top align=right>
<font color="blue"><b>Name/Address:&nbsp;</b></font></td>
<td width=400><b>
&nbsp;(STU_NAM:
(STU_AD1:
(STU_AD2:
(STU_AD3:
(STU_AD4:
</b></td><td width=50 align=center><b>
((MTCH_NAM
</b></td></tr>

<tr valign=middle><td width=140 align=right>
<font color="blue"><b>Student Tel#:&nbsp;</b></font></td>
<td width=430 colspan=2><b>
&nbsp;(STU_TEL
</b></td></tr>

<tr valign=middle><td width=140 align=right>
<font color="blue"><b>E-mail:&nbsp;</b></font></td>
<td width=430 colspan=2><b>
&nbsp;((EMAILS)
</b></td></tr>
</table>

<table width=600 border=0><tr><td align=left>
<p><b>Additional Information:</b>
</td></tr></table>

<table border=2 cellspacing=0 cellpadding=0>

<tr valign=top><td width=300 align=right>
<font color="blue"><b>Certification Type:&nbsp;</b></font></td>
</td><td width=300><b>
&nbsp;((CER_TYPE
</b></td></tr>

<!--  comment out the cert number while we do not ask for it
<tr valign=top><td width=300 align=right>
<font color="blue"><b>Certification Number:&nbsp;</b></font></td>
</td><td width=300><b>
&nbsp;((CER_NUM#
</b></td></tr>
 -->

<tr valign=middle><td width=300 valign=top align=right>
<font color="blue"><b>Month/Year of Registry Examination:&nbsp;
</b></font></td><td width=300 colspan=2><b>
&nbsp;((CER_EXAM
</b></td></tr>

<tr valign=top><td width=300 align=right>
<font color="blue"><b>Name to appear on Certification:&nbsp;</b></font></td>
</td><td width=300 colspan=2><b>
&nbsp;((CER_NAME
</b></td></tr>

<tr valign=middle><td width=300 valign=top align=right>
<font color="blue"><b>Name at Time of Certification:&nbsp;
</b></font></td><td width=300 colspan=2><b>
&nbsp;((CER_PNAM
</b></td></tr>

<tr valign=middle><td width=300 valign=top align=right>
<font color="blue"><b>City/State of Training Program:&nbsp;
</b></font></td><td width=300 colspan=2><b>
&nbsp;((CER_PLOC
</b></td></tr>

</table>
((STOP))
** CTDATA =========== HTML_CE_2==Actions/Buttons for Certifications====
<p><table border=0 cellspacing=0 cellpadding=0>
<tr><td><b>Certificate Order Status:</b></td></tr>

<tr valign=top><td>

<table border=2 cellspacing=0 cellpadding=2>
<tr><td align=left valign=center width=180>
<input type="checkbox" name="APPRVD" value="Y" (APPRVD>
<font color="blue"><b>Approved</b></font></td></tr>

((ALWCOD<tr><td align=left valign=center width=180>
((ALWCOD<input type="checkbox" name="PAIDCD" value="Y" (PAIDCD>
((ALWCOD<font color="blue"><b>Payment Received</b></font></td></tr>
</table></td></tr></table><p>

<font size=+1><input type="button" value="Process Order"
onClick="setsubmit(this.form.ACTION, 'UPD')"></font>&nbsp;

((PROB))<font size=+1><input type="button" value="Remove Problem"
((PROB))onClick="setsubmit(this.form.ACTION, 'RMP')"></font>&nbsp;

&nbsp;<font size=+1><input type="button" value="Cancel Order"
onClick="setsubmit(this.form.ACTION, 'CXL')"></font>

&nbsp;<font size=+1><input type="button" value="Back to List"
onClick="setsubmit(this.form.ACTION, 'BCK')"></font>
<hr size=3 noshade><p>

((STOP))
** CTDATA =========== HTML_CE_4==Details for Certifications(DELIVERY)==
<p>
<b>Certificate Delivery Information:</b>
<table border=2 cellspacing=0 cellpadding=0>
<tr valign=top><td width=140 align=right>
<font color="blue"><b>Desired Service:&nbsp;</b></font></td>
<td width=450><b>
((GAOPT)GP
</b></td></tr>

(NOSHIP)<tr valign=top><td width=140 align=right>
(NOSHIP)<font color="blue"><b>Shipping Method:&nbsp;</b></font></td>
(NOSHIP)<td width=450><b>
(NOSHIP)((GAOPT)GS
(NOSHIP)</b></td></tr>

<tr valign=top><td width=140 align=right>
<font color="blue"><b>Mail To:&nbsp;</b></font></td>
<td width=450><b>
(DEL_ATN:
(DEL_AD1:
(DEL_AD2:
(DEL_AD3:
(DEL_AD4:
(DEL_AD5:
(DEL_TEL
</b></td></tr>

</table>
((STOP))
** CTDATA =========== HTML_MS ===Details for Municipal Services=====
<tr align=center><td colspan=2>
<font size=+1><input type="button" value="Go Back"
onClick="javascript:setsubmit(this.form.ACTION, 'BCK');">
</font>&nbsp;

((CONDE)<font size=+1><input type="button" value="Re-Send E-mail"
((CONDE)onClick="javascript:setsubmit(this.form.ACTION, 'SND');">
((CONDE)</font>&nbsp;

((CONDX)<font size=+1><input type="button" value="Cancel and/or Refund"
((CONDX)onClick="javascript:PPwin('PP_REF', 600, 500);">
((CONDX)</font>&nbsp;

((CONDL)&nbsp;<font size=+1><input type="button" value="Lost/Stolen"
((CONDL)onClick="javascript:PPwin('PP_LST', 450, 400);">
((CONDL)</font>&nbsp;

((CONDM)&nbsp;<font size=+1><input type="button" value="Mail Returned"
((CONDM)onClick="javascript:chk_MRT();">
((CONDM)</font>&nbsp;

((CONDR)&nbsp;<font size=+1><input type="button" value="Re-Issue"
((CONDR)onClick="javascript:PPwin('((REI)', 520, 450);">
((CONDR)</font>

((CONDA)&nbsp;<font size=+1><input type="button" value="Activate"
((CONDA)onClick="javascript:chk_ACT();">
((CONDA)</font>

((CONDN)&nbsp;<font size=+1><input type="button" value="Issue New Pass"
((CONDN)onClick="javascript:PPwin('PP_NEW', 450, 500);">
((CONDN)</font>
</td></tr>

((NCNTR)<tr><td width=180><b>Date/Time Ordered:</b>&nbsp;</td>
((CNTR))<tr><td width=180><b>Date/Time Entered:</b>&nbsp;</td>
<td align=left><b>
((DTTM))
</b></td></tr>

(((COD))<tr><td width=180><b>Date/Time Paid</b>:&nbsp;</td>
(((COD))<td width=450 align=left><b>
(((COD))((DTTMP)
(((COD))</b></td></tr>

((NCNTR)<tr><td width=180><b>Date/Time Printed:</b>&nbsp;</td>
((CNTR))<tr><td width=180><b>Date/Time Purchased:</b>&nbsp;</td>
<td align=left><b>
((DTPRNT)
</b></td></tr>

(((END))<tr><td width=180><b>End Status Date/Time</b>:&nbsp;</td>
(((END))<td width=450 align=left><b>
(((END))((DTTMX)
(((END))</b></td></tr>

((VRCP))GP
((VRCP))VE
((VRCP))PE
((VRCP))NM
((VRCP))DA
((VRCP))CC
</table>
((STOP))
** CTDATA =========== HTML_PP ===Details for Parking Permits========
<tr align=center><td colspan=2>
((NOSHA)<font size=+1><input type="button" value="Go Back"
((NOSHA)onClick="javascript:setsubmit(this.form.ACTION, 'BCK');">
((NOSHA)</font>&nbsp;

((CONDE)<font size=+1><input type="button" value="Re-Send E-mail"
((CONDE)onClick="javascript:setsubmit(this.form.ACTION, 'SND');">
((CONDE)</font>&nbsp;

((CONDX)<font size=+1><input type="button" value="Cancel and/or Refund"
((CONDX)onClick="javascript:PPwin('PP_REF', 600, 500);">
((CONDX)</font>&nbsp;

((CONDL)&nbsp;<font size=+1><input type="button" value="Lost/Stolen"
((CONDL)onClick="javascript:PPwin('PP_LST', 450, 400);">
((CONDL)</font>&nbsp;

((CONDM)&nbsp;<font size=+1><input type="button" value="Mail Returned"
((CONDM)onClick="javascript:chk_MRT();">
((CONDM)</font>&nbsp;

((CONDR)&nbsp;<font size=+1><input type="button" value="Re-Issue"
((CONDR)onClick="javascript:PPwin('((REI)', 520, 450);">
((CONDR)</font>

((CONDA)&nbsp;<font size=+1><input type="button" value="Activate"
((CONDA)onClick="javascript:chk_ACT();">
((CONDA)</font>

((CONDN)&nbsp;<font size=+1><input type="button" value="Issue New Pass"
((CONDN)onClick="javascript:PPwin('PP_NEW', 450, 500);">
((CONDN)</font>
</td></tr>

<tr><td width=180><b>Payment Status:</b>&nbsp;</td>
<td align=left><b>
((PAYSTAT))
</b></td></tr>

<tr><td width=180><b>Date/Time Ordered:</b>&nbsp;</td>
<td align=left><b>
((DTTM))
</b></td></tr>

(((RCV))<tr><td><b>Date Marked 3rd Party:</b>&nbsp;</td>
(((RCV))<td width=450 align=left><b>
(((RCV))((DTTMR)
(((RCV))</b></td></tr>

(((COD))<tr><td><b>Date/Time Paid</b>:&nbsp;</td>
(((COD))<td width=450 align=left><b>
(((COD))((DTTMP)
(((COD))</b></td></tr>

(MAILED)<tr><td><b>Date/Time Printed:</b>&nbsp;</td>
(MAILED)<td align=left><b>
(MAILED)((DTPRNT)
(MAILED)</b></td></tr>

(HANDED)<tr><td><b>Date/Time Issued:</b>&nbsp;</td>
(HANDED)<td align=left><b>
(HANDED)((DTPRNT)
(HANDED)</b></td></tr>

(((END))<tr><td><b>End Status Date/Time</b>:&nbsp;</td>
(((END))<td width=450 align=left><b>
(((END))((DTTMX)
(((END))</b></td></tr>

((VRCP))GP
((VRCP))VE
((VRCP))NM
((VRCP))DA
((VRCP))CC
</table>
((STOP))
** CTDATA =========== HTML_PPP ===Details for Parking Permit Payment===
((PP_AP)(((MSG))2470POC
((MS_AP)(((MSG))2470POC
((DP_AP)(((MSG))2471OC

((PP_AP)((CONDX)<tr><td colspan=2 align=center>
((PP_AP)((CONDX)<font size=+1><input type="button" value="Cancel"
((PP_AP)((CONDX)onClick="javascript:PPwin('PP_CXL', 450, 400);">
((PP_AP)((CONDX)</font>&nbsp;
((PP_AP)((CONDX)</td></tr>

<tr><td width=180><b>Payment Status:</b>&nbsp;</td>
<td align=left><b>
((PAYSTAT))
</b></td></tr>

<tr><td width=180><b>Date/Time Ordered:</b>&nbsp;</td>
<td align=left>
((DTTM))
</td></tr>

(((COD))<tr><td width=180><b>Date/Time Paid</b>:&nbsp;</td>
(((COD))<td width=450 align=left>
(((COD))((DTTMP)
(((COD))</td></tr>

(((RCV))<tr><td><b>Date Marked 3rd Party:</b>&nbsp;</td>
(((RCV))<td width=450 align=left>
(((RCV))((DTTMR)
(((RCV))</td></tr>

((PP_AP)(MAILED)<tr><td width=180><b>Date/Time Printed:</b>&nbsp;</td>
((PP_AP)(MAILED)<td align=left>
((PP_AP)(MAILED)((DTPRNT)
((PP_AP)(MAILED)</td></tr>

((PP_AP)(HANDED)<tr><td width=180><b>Date/Time Issued:</b>&nbsp;</td>
((PP_AP)(HANDED)<td align=left>
((PP_AP)(HANDED)((DTPRNT)
((PP_AP)(HANDED)</td></tr>

((MS_AP)<tr><td width=180><b>Date/Time Printed:</b>&nbsp;</td>
((MS_AP)<td align=left>
((MS_AP)((DTPRNT)
((MS_AP)</td></tr>

((VRCP))GP
((VRCP))NM
((GT_AP)((VRCP))AS
</table>
((STOP))
** CTDATA  ---------- HTML_MRTN-----  Municiple Mail Returned -----------
<center>
 <select name="MAILTYPE" onChange="javascript:
   document.form1.ACTION.value='RFH';document.form1.submit();">
  <option value=" " ((MRTN))>Please select an option
  <option value="V" ((MRTN))>Vacate Resident Account
  <option value="M" ((MRTN))>Move Within Municipality
 </select><p>
</center>

(MAILTP)<table border=1 cellspacing=3 cellpadding=2>
(MAILTP) <tr><td align=right><b>Barcode Scan:&nbsp;</b></td>
(MAILTP)  <td align=left><INPUT name="FICEUSER" maxlength=14 size=14
(MAILTP)  value="">
(MAILTP)  </td>
(MAILTP)  <td align=center valign=middle rowspan=6>
(MAILTP)  <input type="submit" value="Find/Search"
(MAILTP)  onclick="javascript:setSrch();">
(MAILTP)  </td>
(MAILTP) </tr>
(MAILTP)</table><p>

(MOVRES)<table border=1 width=600 cellspacing=3 cellpadding=2>
(MOVRES) <tr><td align=left width=200><b>Old Address:&nbsp;</b><br>
(MOVRES)(OLDRES)
(MOVRES)  </td>
(MOVRES)  <td align="left" valign="top">
(MOVRES)(NEWRES)
(MOVRES)  </td>
(MOVRES) </tr>
(MOVRES) <tr><td colspan=2 align=center>
(MOVRES)  <input type="button" value="Move Resident" onClick="javascript:
(MOVRES)  setsubmit(document.form1.ACTION, 'MOV');"
(MOVRES)  </td>
(MOVRES) </tr>
(MOVRES)</table><p>

((STOP))
** CTDATA  ---------- HTML_MSRH-----  Municiple Search Screen -----------
<table border=1 cellspacing=3 cellpadding=2>
((BARC))<tr><td align=right><b>Barcode Scan:&nbsp;</b></td>
((BARC))<td align=left><INPUT name="FICEUSER" maxlength=14
((BARC))size=14 value="">
((BARC))</td>
((BARC))<td align=center valign=middle rowspan=6>
((BARC))<input type="submit" value="Find/Search" tabindex="2"
((BARC))onclick="javascript:setSrch();"><p>
((BARC))<input type="button" value="Clear All" tabindex="2"
((BARC))onClick="javascript:clrSrch();"></td>
((BARC))</tr>

<tr><td align=right><b>Telephone #:&nbsp;</b></td>
<td align=left><INPUT name="SRCH_TAREA" maxlength=3 size=3
value="(SRCH_TAREA
&nbsp;&nbsp;&nbsp;
<INPUT name="SRCH_TNUM" maxlength=7 size=10
value="(SRCH_TNUM
</td>
((DELM))<td align=center valign=middle rowspan=5>
((DELM))<input type="submit" value="Find/Search"
((DELM))onclick="javascript:setSrch();"><p>
((DELM))<input type="button" value="Clear All"
((DELM))onClick="javascript:clrSrch();"></td>
</tr>

<tr><td align=right><b>Last Name:&nbsp;</b></td>
<td align=left><INPUT name="SRCH_NAM" maxlength=20 size=25
value="(SRCH_NAM
</td></tr>

<tr><td align=right><b>Plate State/#:&nbsp;</b></td>
<td align=left><SELECT name="STATE" size=1>
(SLCT_STA)
</SELECT>&nbsp;&nbsp;&nbsp;&nbsp;
<INPUT name="SRCH_DTA5" maxlength=10 size=10
value="(SRCH_DTA5
</td></tr>

(NORES2)<tr><td align=right><b>User ID:&nbsp;</b></td>
(NORES2)<td align=left><INPUT name="SRCH_DTA6" maxlength=8 size=10
(NORES2)value="(SRCH_DTA6
(NORES2)</td></tr>

<tr><td align=right><b>Address Line 1:&nbsp;</b></td>
<td align=left><INPUT name="A1" maxlength=35 size=35
value="(((HA1))
<input type="hidden" name="SACCT" value="">
</td></tr>
</table><p>

((STOP))
** CTDATA =========== HTML_RESD Edit Value for Residence Add/Edit=====
<tr><td align=right width=200><b>User Type:&nbsp;</b></td>
<td><select name="USRTYPE">
<option value="R" (UTYPE) >Resident
<option value="B" (UTYPE) >Business
<option value="C" (UTYPE) >Corporate
</select>
</td></tr>

<tr><td align=right width=200><b>Salutation:&nbsp;</b></td>
<td><select name="NSAL">
(SLCT_SAL)
</select>
</td></tr>

<tr><td align=right width=200><b>First Name:&nbsp;</b></td>
<td><input type=text name="NF" size=40 maxlength=20
value="(((HNF))
</td></tr>

<tr><td align=right width=200><b>Middle Name:&nbsp;</b></td>
<td><input type=text name="NM" size=40 maxlength=20
value="(((HNM))
</td></tr>

<tr><td align=right width=200><b>Last Name:&nbsp;</b></td>
<td><input type=text name="NL" size=40 maxlength=35
value="(((HNL))
</td></tr>

<tr><td align=right width=200><b>Suffix:&nbsp;</b></td>
<td><input type="text" name="NSFX" maxlength=3 size=3
value="(SFX)
</td></tr>

(((ADD))<tr><td align=right width=200><b>Address:&nbsp;</b></td>
(((ADD))<td><input type="text" name="A1" maxlength=35 size=35
(((ADD))value="(((HA1))
(((ADD))</td></tr>

(((UPD))<tr><td align=right width=200><b>Address:&nbsp;</b></td><td><b>
(((UPD))[[[HA1]]
(((UPD))</b></td></tr>
(((UPD))<input type="hidden" name="A1"
(((UPD))value="(((HA1))

(((HID))<tr><td>&nbsp;</td><td><b>
(((HID))[[HCSZ]]
(((HID))</b></td></tr>
(((INP))<tr><td align=right width=200><b>City:&nbsp;</b></td>
(((INP))<td><input type=text name="CITY" size=20 maxlength=25
(((INP))value="(((HCI))
(((INP))&nbsp;&nbsp;<b>State:&nbsp;</b>
(((INP))<input type=text name="STATE" size=3 maxlength=3
(((INP))value="(((HST))
(((INP))&nbsp;&nbsp;<b>Zip:&nbsp;</b>
(((INP))<input type=text name="ZIP" size=11 maxlength=11
(((INP))value="(((HZC))
(((INP))</td></tr>

(((HID))<input type="hidden" name="CITY"  value="(((HCI))
(((HID))<input type="hidden" name="STATE" value="(((HST))
(((HID))<input type="hidden" name="ZIP"   value="(((HZC))

<tr><td align=right width=200><b>Telephone:&nbsp;</b></td>
<td><input type=text name="TEL" size=20 maxlength=20
value="((HTL))
</td></tr>

<tr><td align=right width=200><b>E-mail Address:&nbsp;</b></td>
<td><input type=text name="EMAIL" size=50 maxlength=50
value="(((EM:))
</td></tr>

<tr><td align=right width=200>
    <input type="checkbox" name="OPTIN" value="Y" ((OPTN)>
</td><td>
(((MSG))5580S
</td></tr>

<tr><td colspan=2><hr size=3 noshade></td></tr>

<tr><td align=right width=200><b>PO BOX#:&nbsp;</b></td>
<td><input type=text name="POBOX" size=5 maxlength=4
value="(POBOX))
</td></tr>

<tr><td align=center colspan=2>-------  OR  -------</td></tr>

<tr><td align=right width=200><b>Alt Address 1:&nbsp;</b></td>
<td><input type=text name="ALTA1" size=40 maxlength=35
value="(ALTA1))
</td></tr>

<tr><td align=right width=200><b>Alt City:&nbsp;</b></td>
<td><input type=text name="ALTCITY" size=20 maxlength=25
value="(ALTCI))
&nbsp;&nbsp;&nbsp;&nbsp;<b>Alt State:</b>&nbsp;
<input type=text name="ALTST" size=3 maxlength=3
value="(ALTST))
</td></tr>

<tr><td align=right width=200><b>Alt Zip:&nbsp;</b></td>
<td><input type=text name="ALTZIP" size=10 maxlength=15
value="(ALTZC))
</td></tr>

<tr><td colspan=2><hr size=3 noshade></td></tr>

<tr><td align=right width=200>
    <input type="checkbox" name="INOUT" value="O" (INOUT)>
</td><td><b>Check if address is OUT of city</b>
</td></tr>

<tr><td colspan=2><hr size=3 noshade></td></tr>

<tr><td align=center colspan=2>
<table border=0 cellpadding=5 cellspacing=5><tr>
(((ADD))<td><input type="submit" value="Add Residence"
(((ADD))onClick="javascript:change(document.form1.ACTION,'ADD');">
(((ADD))</td>

(((UPD))<td><input type="submit" value="Update Residence"
(((UPD))onClick="javascript:setsubmit(document.form1.ACTION,'UPD');">
(((UPD))</td>

<td><input type="button" value="Cancel"
onClick="javascript:setsubmit(document.form1.ACTION,'CXL');">
</td>

</tr></table></td></tr>
((STOP))
** CTDATA =========== HTML_VEHD Edit Value for Vehicle Add/Edit=======
<input type="hidden" name="KEY_PLISS" value="(VK_PLISS)
<input type="hidden" name="KEY_PLATE" value="(VK_PLATE)
<input type="hidden" name="SAV_DLNUM" value="(SV_DLNUM)
<input type="hidden" name="LASTORDR" value="(VLASTORD#)

<tr><td colspan=3>
<table border=0 cellspacing=2 cellpadding=8>
 <tr><td width=30>&nbsp;</td><td valign="top">
  <input type="RADIO" name="VCLASS" value="P" (VCL_P)>
<!-- &nbsp;<b>Passenger Car</b><br> -->
(((MSG))5776
  <input type="RADIO" name="VCLASS" value="M" (VCL_M)>
<!-- &nbsp;<b>Motorcycle</b><br> -->
(((MSG))5777
 </td><td valign="top">
  <input type="RADIO" name="VCLASS" value="T" (VCL_T)>
<!-- &nbsp;<b>Truck</b><br> -->
(((MSG))5778
(XVCL_O)<input type="RADIO" name="VCLASS" value="O" (VCL_O)>
(XVCL_O)<!-- &nbsp;<b>Other (RV, Trailer, Antique, School Bus)</b> -->
(XVCL_O)(((MSG))5779     Y
 </td></tr></table>
</td></tr>

(MSTEST)<tr><td colspan=3 align=center>
(MSTEST)<table border=0 cellspacing=2 cellpadding=8>
(MSTEST) <tr><td width=20 valign=top>
(MSTEST)  <input type="CHECKBOX" name="VACTION" value="I" (VAC_I)>
(MSTEST) </td><td width=400 valign=top>
(MSTEST)   <b>Please do not contact me about this vehicle this year.
(MSTEST)   I will not be registering it.</b><br>
(MSTEST) </td></tr>
(MSTEST)</table>
(MSTEST)</td></tr>

<tr><td align=right width=200><b>First Name:&nbsp;</b></td>
<td><input type="text" name="VFRSTN" size=25 maxlength=20
value="(VFRSTN)
</td><td>
</td></tr>

<tr><td align=right width=200><b>Middle Name:&nbsp;</b></td>
<td><input type="text" name="VMIDLN" size=25 maxlength=20
value="(VMIDLN)
</td><td>
</td></tr>

<tr><td align=right width=200><b>Last Name:&nbsp;</b></td>
<td><input type="text" name="VLASTN" size=25 maxlength=35
value="(VLASTN)
</td><td>
</td></tr>

<tr><td align=right width=200><b>License Plate:&nbsp;</b></td>
<td><input type="text" name="VPLATE" size=10 maxlength=10
value="(VPLATE)
&nbsp;&nbsp;<b>State:</b>&nbsp;
<select name="VPLISS">
(SLCT_STA)
</select>
</td></tr>

<tr><td align=right width=200><b>Year:&nbsp;</b></td>
<td><input type=text name="VYEAR" size=4 maxlength=4
value="(VYEAR)
</td></tr>

<tr><td align=right width=200><b>Make:&nbsp;</b></td>
<td><select name="VMAKE">
(SLCT_VMK)
</select>
</td></tr>

<tr><td align=right width=200><b>Model:&nbsp;</b></td>
<td><input type="text" name="VMODEL" size=20 maxlength=20
value="(VMODEL)
</td></tr>

<tr><td align=right width=200><b>Color:&nbsp;</b></td>
<td><input type=text name="VCOLOR" size=12 maxlength=12
value="(VCOLOR)
</td></tr>

<tr><td align=right width=200><b>Body Style:&nbsp;</b></td>
<td><select name="VBODY">
<option value="            " (VBODY) >Select Body Type
<option value="BUS         " (VBODY) >BUS
<option value="CAB CHASS   " (VBODY) >CAB CHASS
<option value="CABRIOLET   " (VBODY) >CABRIOLET
<option value="CARRYALL    " (VBODY) >CARRYALL
<option value="CNVTR GER   " (VBODY) >CNVTR GER
<option value="CONVERTBL   " (VBODY) >CONVERTBL
<option value="COUPE       " (VBODY) >COUPE
<option value="CUTAWAY     " (VBODY) >CUTAWAY
<option value="DUMP TK     " (VBODY) >DUMP TK
<option value="FLATBED     " (VBODY) >FLATBED
<option value="HARDTOP     " (VBODY) >HARDTOP
<option value="HATCHBACK   " (VBODY) >HATCHBACK
<option value="MOPED       " (VBODY) >MOPED
<option value="MOTOR HOM   " (VBODY) >MOTOR HOM
<option value="MOTORCYCL   " (VBODY) >MOTORCYCL
<option value="MTR SCOOT   " (VBODY) >MTR SCOOT
<option value="PANEL       " (VBODY) >PANEL
<option value="PASS CAR    " (VBODY) >PASS CAR
<option value="PICKUP      " (VBODY) >PICKUP
<option value="ROADSTER    " (VBODY) >ROADSTER
<option value="RUNABOUT    " (VBODY) >RUNABOUT
<option value="SEDAN       " (VBODY) >SEDAN
<option value="SPORT VAN   " (VBODY) >SPORT VAN
<option value="STAKE/RAK   " (VBODY) >STAKE/RAK
<option value="STN WAGON   " (VBODY) >STN WAGON
<option value="SUV         " (VBODY) >SUV
<option value="TRACTR TK   " (VBODY) >TRACTR TK
<option value="TRAILER     " (VBODY) >TRAILER
<option value="TRL TRUCK   " (VBODY) >TRL TRUCK
<option value="TRUCK       " (VBODY) >TRUCK
<option value="UTILITY     " (VBODY) >UTILITY
<option value="VAN         " (VBODY) >VAN
<option value="VANETTE     " (VBODY) >VANETTE
<option value="WAGON       " (VBODY) >WAGON
<option value="2 DOOR      " (VBODY) >2 DOOR
<option value="2D HACHBK   " (VBODY) >2D HACHBK
<option value="2D HARDTP   " (VBODY) >2D HARDTP
<option value="2D LIFTBK   " (VBODY) >2D LIFTBK
<option value="4 DOOR      " (VBODY) >4 DOOR
<option value="4D HARDTP   " (VBODY) >4D HARDTP
<option value="4D HTCHBK   " (VBODY) >4D HTCHBK
<option value="4WHEEL DR   " (VBODY) >4WHEEL DR
<option value="5D HTCHBK   " (VBODY) >5D HTCHBK
</select>
</td></tr>

<tr><td align=right width=200><b>Vehicle VIN#:&nbsp;</b></td>
<td><input type=text name="VVINNUM" size=30 maxlength=30
value="(VVIN#)
</td></tr>

(SENR_D)<tr><td align=right width=200><b>Drivers License:&nbsp;</b></td>
(SENR_D)<td><input type=text name="VDLNUM" size=15 maxlength=15
(SENR_D)value="(VDLNUM)
(SENR_D)</td></tr>

(SENR_A)<tr><td align=right width=200><b>Apply Senior Discount?:&nbsp;</b></td>
(SENR_A)<td><select name="VSENIOR"><option value=" " (SNRSEL)>NO
(SENR_A)<option value="Y" (SNRSEL)>YES</select>
(SENR_A)</td><td>&nbsp;</td></tr>

<tr><td align=right width=200><b>Special Vehicle:&nbsp;</b></td>
<td><input type=text name="VPRDCOD" size=2 maxlength=1
value="(VPRDCOD)
</td></tr>

</table><p>

<table border=0 cellpadding=5 cellspacing=5><tr>
(((ADD))<td><input type="submit" value="Add Vehicle"
(((ADD))onClick="javascript:change(document.form1.ACTION,'ADD');">
(((ADD))</td>

(((UPD))<td><input type="submit" value="Update Vehicle"
(((UPD))onClick="javascript:change(document.form1.ACTION,'UPD');">
(((UPD))</td>

<td><input type="button" value="Cancel - Back to Vehicles"
onClick="javascript:setsubmit(document.form1.ACTION,'CXL');">
</td>
</tr></table>
((STOP))
** CTDATA =========== HTML_PETD Edit Value for Pet Add/Edit===========
<input type="hidden" name="KEY_PTYPE" value="(PK_TYPE)
<input type="hidden" name="KEY_PNAME" value="(PK_NAME)
<input type="hidden" name="LASTORDR" value="(VLASTORD#)

<tr><td align=right width=200><b>Type:&nbsp;</b></td>
<td><select name="PTYPE">
<option value=" " (PTYPSEL>Select Type
<option value="C" (PTYPSEL>CAT
<option value="D" (PTYPSEL>DOG
</select>
</td></tr>

<tr><td align=right width=200><b>Name:&nbsp;</b></td>
<td><input type="text" name="PNAME" size=25 maxlength=25
value="(PNAME)
</td></tr>

<tr><td align=right width=200><b>Color:&nbsp;</b></td>
<td><input type="text" name="PCOLOR" size=20 maxlength=20
value="(PCOLOR)
</td></tr>

<tr><td align=right width=200><b>Breed:&nbsp;</b></td>
<td><input type="text" name="PBREED" size=35 maxlength=35
value="(PBREED)
</td></tr>

<tr><td align=right width=200><b>Gender:&nbsp;</b></td>
<td><select name="PSEX">
<option value=" " (PSEXSEL>Select Gender
<option value="M" (PSEXSEL>MALE
<option value="F" (PSEXSEL>FEMALE
</select>
</td></tr>

<!-- Removed Rabies - LF no longer wants it
<tr><td align=right width=200><b>Rabies Exp. Date:&nbsp;</b></td>
<td><select name="RABIESM2">
(SLCT_MTH)
</select>&nbsp;&nbsp;&nbsp;&nbsp;
<input type="text" name="RABIESY4" size=4 maxlength=4
value="(RABIESY4)
</td></tr>
-->
</table><p>

<table border=0 cellpadding=5 cellspacing=5><tr>
(((ADD))<td><input type="submit" value="Add Pet"
(((ADD))onClick="javascript:change(document.form1.ACTION,'ADD');">
(((ADD))</td>

(((UPD))<td><input type="submit" value="Update Pet"
(((UPD))onClick="javascript:change(document.form1.ACTION,'UPD');">
(((UPD))</td>

<td><input type="button" value="Cancel - Back to Pets"
onClick="javascript:setsubmit(document.form1.ACTION,'CXL');">
</td>
</tr></table>
</center>
((STOP))
** CTDATA =========== HTML_SND  Re-Send for GA Apps ===================
<tr><td class=ttl>Send What?:&nbsp;</td>
<td class=dta><SELECT name="TYP"
size=1>
((OPTS))
</SELECT>&nbsp;</td></tr>

<tr><td class=ttl>Route by:&nbsp;</td>
<td class=dta><SELECT name="RPY"
size=1>
<OPTION value="E" (((RPY))>E-Mail
</SELECT>&nbsp;</td></tr>

<tr><td class=ttl>Send to:&nbsp;</td>
<td class=dta><input type="text" name="EMAIL" maxlength=50 size=35
value="(((EM:))
</td></tr>

<tr><td class=ttl>&nbsp;</td>
<td class=dta><input type="checkbox" name="UPDINFO" value="Y">
<b>Use this address to update the record</b></td></tr>

(TMPDAT)<tr><td class=ttl>&nbsp;</td>
(TMPDAT)<td class=dta><input type="checkbox" name="TEMPDT" value="Y">
(TMPDAT)<b>Make temp permit expire ((TDYS))
(TMPDAT)days from today</b></td></tr>

(NOTEMP)<tr><td class=ttl>&nbsp;</td>
(NOTEMP)<td class=dta>Temp Permits will be available starting:
(NOTEMP)((TDATE)
(NOTEMP)</td></tr>

</table>

<!--  The communication History  -->
(((MSG))2360
(((RTR))
(((MSG))2365

<center>
<font size=+1><input type="button" value="Go Back"
onClick="javascript:setsubmit(this.form.ACTION, 'BCK');">
</font>&nbsp;&nbsp;&nbsp;&nbsp;

<font size=+1>
<input type="submit" value="Re-Send">
</font></center>
((STOP))
** CTDATA =========== HTML_CMNT Comment/Problem for GA Application=====
<p><b>Problem/Comments:&nbsp;&nbsp;</b>
((NOSHA)<font size=+1><input type="button" value="Add Comment"
((NOSHA)onClick="javascript:chgcmt();"></font>&nbsp;&nbsp;&nbsp;&nbsp;
((PROB))<font size=+1><input type="button" value="Add Problem"
((PROB))onClick="javascript:chgprb();"></font>&nbsp;
((CMNT))<table border=2 cellspacing=2 cellpadding=2 width=700>
((CMNT))<tr bgcolor="FFFFA0"><th width=150>Date and Time</th>
((CMNT))<th width=100>By Whom</th>
((CMNT))<th width=100>Type</th><th>Description</th></tr>
((CMNT))RTN_CMNT
((CMNT))RTN_HISTRY
((CMNT))</table></p>
((STOP))
** CTDATA =========== HTML_STR Edit Value for Street Maint=============
<tr><td>
<input type=text name="STREET" size=30 maxlength=25 value="
(STREET)
</td><td align=center><SELECT name="STRTYP">
(SLTSTY)
</SELECT></td>
<td align=center><SELECT name="STR_POSTD">
(SLTDIR2
</SELECT>
</td><td><SELECT name="VALDDIR1">
<OPTION value="  " (VALDR1)>
<OPTION value="E " (VALDR1)>E
<OPTION value="W " (VALDR1)>W
<OPTION value="N " (VALDR1)>N
<OPTION value="S " (VALDR1)>S
<OPTION value="NE" (VALDR1)>NE
<OPTION value="NW" (VALDR1)>NW
<OPTION value="SE" (VALDR1)>SE
<OPTION value="SW" (VALDR1)>SW
</SELECT>&nbsp;
<input type="text" name="VALDSTR1" maxlength=5 size=3 value="
(VALSTR1)
&nbsp;-&nbsp;
<input type="text" name="VALDEND1" maxlength=5 size=3 value="
(VALEND1)
<br><SELECT name="VALDDIR2">
<OPTION value="  " (VALDR2)>
<OPTION value="E " (VALDR2)>E
<OPTION value="W " (VALDR2)>W
<OPTION value="N " (VALDR2)>N
<OPTION value="S " (VALDR2)>S
<OPTION value="NE" (VALDR2)>NE
<OPTION value="NW" (VALDR2)>NW
<OPTION value="SE" (VALDR2)>SE
<OPTION value="SW" (VALDR2)>SW
</SELECT>&nbsp;
<input type="text" name="VALDSTR2" maxlength=5 size=3 value="
(VALSTR2)
&nbsp;-&nbsp;
<input type="text" name="VALDEND2" maxlength=5 size=3 value="
(VALEND2)
</td></tr>
((STOP))
** CTDATA =========== HTML_BUS Edit Value for Business Edit============
((EDIT))<tr><td align=right width=200><b>ID Number:&nbsp;</b></td>
((EDIT))<td><b>(IDCODE)
((EDIT))</b></td></tr>

<tr><td align=right width=200><b>Contact Name:&nbsp;</b></td>
<td><input type=text name="CNTACT" size=40 maxlength=35
  value="(CNTACT)
</td></tr>
<tr><td align=right><b>Company Name:&nbsp;</b></td>
<td><input type=text name="CMPANY" size=40 maxlength=35
  value="(CMPANY)
</td></tr>
<tr><td align=right><b>Address Line:&nbsp;</b></td>
<td><input type=text name="A1" size=40 maxlength=35
  value="(((HA1))
</td></tr>
<tr><td align=right><b>City:&nbsp;</b></td>
<td><input type=text name="CITY" size=25 maxlength=25
  value="(((HCI))
  &nbsp;&nbsp;&nbsp;<b>State:&nbsp;</b>
  <input type=text name="STATE" size=3 maxlength=3
  value="(((HST))
</td></tr>
<tr><td align=right><b>Zip Code:&nbsp;</b></td>
<td><input type=text name="ZIP" size=15 maxlength=10
  value="(((HZC))
(((MSG))5682     Y
</td></tr>
<tr><td align=right><b>Telephone #:&nbsp;</b></td>
<td><input type=text name="TEL" size=20 maxlength=25
  value="((HTL))
(((MSG))5683     Y
</td></tr>
<tr><td align=right><b>E-Mail Address:&nbsp;</b></td>
<td><input type=text name="EMAIL" size=35 maxlength=50
  value="(((EM:))
</td></tr>
<tr><td align=right><b># of Employees:&nbsp;</b></td>
<td><input type=text name="BNEMPL" size=5 maxlength=3
  value="(BNEMPL)
</td></tr>
<tr><td align=right><b>Pin User ID:&nbsp;</b></td>
<td><input type=text name="BPNUSR" size=10 maxlength=8
  value="(BPNUSR)
</td></tr>

((EDIT))<tr><td align=right><b>Pin #:&nbsp;</b></td>
((EDIT))<td><b>(BPIN#))
((EDIT))</b></td></tr>
((EDIT))<tr><td align=right><b>Change User ID:&nbsp;</b></td>
((EDIT))<td><b>(BCGUSR)
((EDIT))</b></td></tr>
((EDIT))<tr><td align=right><b>Change Date:&nbsp;</b></td>
((EDIT))<td><b>(BCHGDT)
((EDIT))</b></td></tr>
((EDIT))<tr><td align=right><b>Change Time:&nbsp;</b></td>
((EDIT))<td><b>(BCHGTM)
((EDIT))</b></td></tr>
((STOP))
** CTDATA =========== HTML_RPPP - PP Custom PDF Reports================
<hr size=3 noshade>
<table border=3 cellpadding=5 cellspacing=0>
<tr><td align=center colspan=2>
<table border=0 cellpadding=0 cellspacing=0><tr><td>
<SELECT name="MNTH" size=1>
(SLTMNTH
</SELECT>&nbsp;&nbsp;&nbsp;
<SELECT name="DAYS" size=1>
(SLTDAYS
</SELECT>&nbsp;&nbsp;&nbsp;
<SELECT name="YEAR" size=1>
(SLTYEAR
</SELECT>
</td></tr></table></td></tr>

<tr>
<td><b>Daily Cash Reconciliation Report</b></td>
<td><font size=+1><input type="submit" value="Create and E-mail Report"
onClick="javascript:setsubmit(document.form1.ACTION, 'RP2');">
</font></td>
</tr>

<tr>
<td><b>Daily Refund Report</b></td>
<td><font size=+1><input type="submit" value="Create and E-mail Report"
onClick="javascript:setsubmit(document.form1.ACTION, 'RP5');">
</font></td>
</tr>
</table><p>

<table border=3 cellpadding=5 cellspacing=0>
((NOTLPR))<tr>
((NOTLPR))<td><b>On-Hand Permits Audit Report</b></td>
((NOTLPR))<td><font size=+1><input type="submit"
((NOTLPR))value="Create and E-mail Report"
((NOTLPR))onClick="javascript:setsubmit(document.form1.ACTION, 'RP1');">
((NOTLPR))</font></td>
((NOTLPR))</tr>

((NOTLPR))<tr>
((NOTLPR))<td><b>Return Mail Permits Audit Report</b></td>
((NOTLPR))<td><font size=+1><input type="submit"
((NOTLPR))value="Create and E-mail Report"
((NOTLPR))onClick="javascript:setsubmit(document.form1.ACTION, 'RP3');">
((NOTLPR))</font></td>
((NOTLPR))</tr>

<tr>
<td><b>Outstanding Receivables Audit Report</b></td>
<td><font size=+1><input type="submit" value="Create and E-mail Report"
onClick="javascript:setsubmit(document.form1.ACTION, 'RP4');">
</font></td>
</tr>

</table>
((STOP))
** CTDATA =========== HTML_DPOH - DP Orders Header================
<table border=2 cellspacing=1 cellpadding=6>
<tr align=center bgcolor="FFFFA0">
<td><b>Order No.</b></td>
<td style="min-width:100px"><b>([ORD_TYPE])<br/>Date and Time</b></td>
<td><b>Desired Service</b></td>
<td><b>LO</b></td>
<td><b>Status</b></td>
<td><b>Student Name</b></td>
<td><b>ID</b></td>
(QUANTY)<td><b>Number of Diplomas</b></td>
(SHIPNG)<td><b>Shipping</b></td>
(COMMNT)<td style="text-align:center"><b>Special Instructions</b></td>
</tr>
((STOP))
** CTDATA =========== AR_OPT ========ReSend Router Options =======
E Order Acknowledgement
O Order Receipt
P Order Problem
L Lost/Stolen
D Delivery Notification
M Mail Returned
R Re-Issued
X Canceled
V Voided
S Extended Temp Permit
((STOP))
** CTDATA TABDIG/TABLET
01A02B03C04D05E06F07G08H09J10K11L12M13N
14P15Q16R17S18T19U20V21W22X23Y24Z252263
274285296307318
**    SEL_STRTYP  CTDATA
    AVE BLVDCIR CT  DR  EXPYFRD HWY LN  PARKPKWYPL  PLZ RD  RDG RTE
SQ  ST  TER TRL WAY
** CTDATA ===SHIPARY=== ARRAY of FED EX SHIPPTING Options ========
O50   O ENV                 <=   50 envelope
O150  O BOX                 <=  150 small box
O300  O BOX                 <=  300 medium box
O500  O BOX                 <=  500 large box
O1000 O CST 15 12  9        <= 1000 custom box
S50   S ENV                 <=   50 envelope
S150  S BOX                 <=  150 small box
S300  S BOX                 <=  300 medium box
S500  S BOX                 <=  500 large box
S1000 S CST 15 12  9        <= 1000 custom box
250   2 ENV                 <=   50 envelope
2150  2 BOX                 <=  150 small box
2300  2 BOX                 <=  300 medium box
2500  2 BOX                 <=  500 large box
21000 2 CST 15 12  9        <= 1000 custom box
X50   X CST                 <=   50 // Express Saver must use your packaging
X150  X CST 12 11  1        <=  150 small box
X300  X CST 14 11  2        <=  300 medium box
X500  X CST 18 12  3        <=  500 large box
X1000 X CST 15 12  9        <= 1000 custom box
G50   G CST                 <=   50 //Ground must use your packaging
G150  G CST 12 11  1        <=  150 custom box
G300  G CST 14 11  2        <=  300 custom box
G500  G CST 18 12  3        <=  500 custom box
G1000 G CST 15 12  9        <= 1000 custom box
** CTDATA ====== ARRAY of PP CALL LOG TYPES=====MAN=====call_pp=======
X Cancel my order (for COD orders)
C COD order placed, now wants to pay with credit card
T Need Temp Permit
M Permit has not Arrived in the mail
L Permit Lost/Stolen
A Questions regarding mailing/receipt of the permit?
P Questions regarding problem status
R Refund Request
V Responding Voicemail
U Updated Vehicle/Student Information
Q Website Error - User Having Issues
B What is this charge on my credit card?
W Wrong Student ID
9 Other
  ((STOP))
** CTDATA ====== ARRAY of DP CALL LOG TYPES=====MAN=====call_dp=======
A Questions regarding mailing/receipt of replacement diploma
B Any Call Regarding the Credit Card
9 Other
  ((STOP))
** CTDATA ====== ARRAY of CT CALL LOG TYPES=====MAN=====call_ct=======
A What is this charge on my credit card?
C Request a user ID/password
E Enable User ID                                                     Y
L Logged User Off of System                                          Y
R Reset Password/Enabled Profile                                     Y
9 Other
  ((STOP))
** CTDATA ====== ARRAY of MS CALL LOG TYPES============call_ms=======
A When can I order my Vehicle/Pet License?
B What is this charge on my credit card?
C What is my user UserID/Pin#
E How does service work
H Complaint                                                          Y
9 Other
  ((STOP))
** CTDATA ====== ARRAY of MT CALL LOG TYPES============call_mt=======
A Need to change/modify registration
B Any Call Regarding the Credit Card
9 Other
  ((STOP))
** CTDATA ====== ARRAY of GT CALL LOG TYPES============call_gt=======
A Need to change/modify registration
B Any Call Regarding the Credit Card
9 Other
  ((STOP))
** CTDATA ====== ARRAY of CE CALL LOG TYPES============call_ce=======
A Questions regarding mailing/receipt of replacement certificate
B Any Call Regarding the Credit Card
L Updated Credit Card Information
9 Other
  ((STOP))
** CTDATA ====== ARRAY of PP CALL LOG TYPES=====AUTO===auto_pp=======
A Resent E-Mail
B Parking Permit Over Phone
C Voided Over Phone
E Refund Given
  ((STOP))
** CTDATA ====== ARRAY of DP CALL LOG TYPES=====AUTO===auto_dp=======
A Resent E-Mail
B Diploma Order Over Phone
E Refund Given
  ((STOP))
** CTDATA ====== ARRAY of CT CALL LOG TYPES=====AUTO===auto_ct=======
A UserID Enabled
B Enabled Password/Reset
C User Registration
D User Logged Off
E Updated Client Information
F Updated Credit Card Information
  ((STOP))
** CTDATA ====== ARRAY of MS CALL LOG TYPES=====AUTO===auto_ms=======
A Resent E-Mail
C Voided Over Phone
E Refund Given
  ((STOP))
** CTDATA ====== ARRAY of MT CALL LOG TYPES=====AUTO===auto_mt=======
A Resent E-Mail
  ((STOP))
** CTDATA ====== ARRAY of GT CALL LOG TYPES=====AUTO===auto_gt=======
A Resent E-Mail
  ((STOP))
** CTDATA ====== ARRAY of CE CALL LOG TYPES=====AUTO===auto_ce=======
A Resent E-Mail
  ((STOP))
** CTDATA ====== NEWwin() JSfunction that do not fit 1 msg ==========
var COPSI = 'https://www.credentialsops.com/cgi-bin/';
var CredInc = 'https://www.credentials-inc.com/cgi-bin/';
var WinCntr = 0;

function NEWwin(pname,parm,winname,w,h,applid,forms,id)
{
 var formAry = new Array();
 var userid = document.getElementById('USERID').value;
 var url = "";
 var errmsg = "N";
 var userPos = 0;

 formAry = forms.split(",");    // Split forms into an array
 lastPos = formAry.length - 1;  // last pos of the array

 // Must pad userid if not the last pos in the array
 if (lastPos >= 0 && formAry[lastPos] != "U"){
  for (i=0;i< (10 - userid.lenth);i++){
   userid += '*';
  }
 }

 // build the whattodo
 for (i=0;i<formAry.length;i++)
 {
  if (formAry[i] == "A")
   parm += applid;
  else if (formAry[i] == "C")
   parm += 'CS';
  else if (formAry[i] == "D")
   parm += '000000';
  else if (formAry[i] == "O")
   parm += document.getElementById('ORDNO').value;
  else if (formAry[i] == "S")
   parm += document.getElementById('SK').value;
  else if (formAry[i] == "U")
   parm += userid;
  else if (formAry[i] == "Z")
   parm += 'ZZZZZZ';
 }

 if (applid == "TP")
  url = CredInc + pname + '.pgm?' + parm;
 else if (applid == "GA")
  url = COPSI + pname + '.pgm?' + parm;
 else
  errmsg = "Y";

 if (errmsg == "N") {
  //OpWin(url,w,h);
  var options = 'toolbar=yes,scrollbars=yes,location=no,resizable=yes,width=' +
                w + ',height=' + h + ',left=20,top=20';
  popupWin = window.open(url, '_blank', options);
  popupWin.focus();
 }
}
((STOP))
** CTDATA ====== jqry_funcs jQuery functions that do not fit 1 msg ==========
$(function () {
 $(":submit").button();
 $("select").selectmenu();

 $("#SRCH_VAL").focus();

 setMaxLen(false);

 if ($("#SRCHTYPE").val() != "") {
  var srchtype = $("#SRCHTYPE").val();
  $("#SRCH_TYPE").val(srchtype);
  $("#SRCH_TYPE").selectmenu("refresh");
  setMaxLen();
 }

 $("#SRCH_TYPE").on("selectmenuchange",
  function( event, ui ) {
   setMaxLen(true);
  });

 //Add some extra onto the select menu
 $.each($('select'), function () {
  $(this).selectmenu({ width : $(this).width() + 30})
 })

 function setMaxLen(onChange){
  if (onChange){
   $("#SRCH_VAL").val("");
  }
  if ($("#SRCH_TYPE").val() == "NAM"){
   $("#SRCH_VAL").attr("maxlength","20");
  }else if ($("#SRCH_TYPE").val() == "SID"){
   $("#SRCH_VAL").attr("maxlength","10");
  }else if ($("#SRCH_TYPE").val() == "ORD"){
   $("#SRCH_VAL").attr("maxlength","9");
  }else if ($("#SRCH_TYPE").val() == "DT5"){
   $("#SRCH_VAL").attr("maxlength","10");
  }else if ($("#SRCH_TYPE").val() == "DT8"){
   $("#SRCH_VAL").attr("maxlength","11");
  }
 }
});
((STOP))
** CTDATA =========== ALERT_MODAL variables for all responses ===========
<div class="modal in" id="ALERTS" role="alertdialog" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content ci-alert-box">
      <div class="modal-header ci-alert-header">
        <h4 class="modal-title">Message(s) from Credentials Solutions</h4>
        <button type="button" class="close alert-header"
         data-dismiss="modal" aria-label="Close">
         <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div id="modalBody" class="modal-body ci-alert-info">
((BODY))
      </div>
      <div class="modal-footer closebtn">
        <button type="button" data-dismiss="modal" aria-label="Dismiss"
         class="btn btn-light">Close</button>
      </div>
    </div>
  </div>
</div>
((STOP))
